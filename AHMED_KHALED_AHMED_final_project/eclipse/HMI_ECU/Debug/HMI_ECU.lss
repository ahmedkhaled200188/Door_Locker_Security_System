
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  00002f88  0000301c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  0080010c  0080010c  000030c8  2**0
                  ALLOC
  3 .stab         00002e98  00000000  00000000  000030c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000130a  00000000  00000000  00005f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000726a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000073aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000751a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009163  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a04e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000adfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000af5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b1e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b9b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 30       	cpi	r26, 0x0C	; 12
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e0       	ldi	r26, 0x0C	; 12
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 32       	cpi	r26, 0x2E	; 46
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <main>
      8a:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e0       	ldi	r26, 0x04	; 4
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e0       	ldi	r24, 0x04	; 4
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 62 17 	jmp	0x2ec4	; 0x2ec4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 56 17 	jmp	0x2eac	; 0x2eac <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 72 17 	jmp	0x2ee4	; 0x2ee4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer1_init>:
#include <avr/io.h>
#include <avr/interrupt.h>
void (*call_back)(void);
Timer1_ConfigType * Timer1_Config_Ptr;
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Timer1_init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	SREG|=(1<<7);
     b54:	af e5       	ldi	r26, 0x5F	; 95
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	ef e5       	ldi	r30, 0x5F	; 95
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	80 68       	ori	r24, 0x80	; 128
     b60:	8c 93       	st	X, r24
	Timer1_Config_Ptr=Config_Ptr;
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	9a 81       	ldd	r25, Y+2	; 0x02
     b66:	90 93 0d 01 	sts	0x010D, r25
     b6a:	80 93 0c 01 	sts	0x010C, r24
	TCCR1B|=(Config_Ptr->prescaler>>0);
     b6e:	ae e4       	ldi	r26, 0x4E	; 78
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	ee e4       	ldi	r30, 0x4E	; 78
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	90 81       	ld	r25, Z
     b78:	e9 81       	ldd	r30, Y+1	; 0x01
     b7a:	fa 81       	ldd	r31, Y+2	; 0x02
     b7c:	84 81       	ldd	r24, Z+4	; 0x04
     b7e:	89 2b       	or	r24, r25
     b80:	8c 93       	st	X, r24
	TCNT1=Config_Ptr->initial_value;
     b82:	ac e4       	ldi	r26, 0x4C	; 76
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	e9 81       	ldd	r30, Y+1	; 0x01
     b88:	fa 81       	ldd	r31, Y+2	; 0x02
     b8a:	80 81       	ld	r24, Z
     b8c:	91 81       	ldd	r25, Z+1	; 0x01
     b8e:	11 96       	adiw	r26, 0x01	; 1
     b90:	9c 93       	st	X, r25
     b92:	8e 93       	st	-X, r24
	if(Config_Ptr->mode==normal)
     b94:	e9 81       	ldd	r30, Y+1	; 0x01
     b96:	fa 81       	ldd	r31, Y+2	; 0x02
     b98:	85 81       	ldd	r24, Z+5	; 0x05
     b9a:	88 23       	and	r24, r24
     b9c:	79 f4       	brne	.+30     	; 0xbbc <Timer1_init+0x76>
	{
		TCCR1B&=~(1<<WGM12);
     b9e:	ae e4       	ldi	r26, 0x4E	; 78
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	ee e4       	ldi	r30, 0x4E	; 78
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	87 7f       	andi	r24, 0xF7	; 247
     baa:	8c 93       	st	X, r24
		TIMSK|=(1<<TOIE1);//Overflow Interrupt Enable
     bac:	a9 e5       	ldi	r26, 0x59	; 89
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	e9 e5       	ldi	r30, 0x59	; 89
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	84 60       	ori	r24, 0x04	; 4
     bb8:	8c 93       	st	X, r24
     bba:	1c c0       	rjmp	.+56     	; 0xbf4 <Timer1_init+0xae>

	}
	else if(Config_Ptr->mode==compare)
     bbc:	e9 81       	ldd	r30, Y+1	; 0x01
     bbe:	fa 81       	ldd	r31, Y+2	; 0x02
     bc0:	85 81       	ldd	r24, Z+5	; 0x05
     bc2:	81 30       	cpi	r24, 0x01	; 1
     bc4:	b9 f4       	brne	.+46     	; 0xbf4 <Timer1_init+0xae>
	{
		TCCR1B|=(1<<WGM12);
     bc6:	ae e4       	ldi	r26, 0x4E	; 78
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	ee e4       	ldi	r30, 0x4E	; 78
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	88 60       	ori	r24, 0x08	; 8
     bd2:	8c 93       	st	X, r24
		OCR1A = Config_Ptr->compare_value;
     bd4:	aa e4       	ldi	r26, 0x4A	; 74
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	e9 81       	ldd	r30, Y+1	; 0x01
     bda:	fa 81       	ldd	r31, Y+2	; 0x02
     bdc:	82 81       	ldd	r24, Z+2	; 0x02
     bde:	93 81       	ldd	r25, Z+3	; 0x03
     be0:	11 96       	adiw	r26, 0x01	; 1
     be2:	9c 93       	st	X, r25
     be4:	8e 93       	st	-X, r24
		TIMSK |= (1 << OCIE1A);//Output Compare A Match Interrupt Enable
     be6:	a9 e5       	ldi	r26, 0x59	; 89
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e9 e5       	ldi	r30, 0x59	; 89
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	80 61       	ori	r24, 0x10	; 16
     bf2:	8c 93       	st	X, r24
	}

}
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	cf 91       	pop	r28
     bfa:	df 91       	pop	r29
     bfc:	08 95       	ret

00000bfe <Timer1_deInit>:
void Timer1_deInit(void)
{
     bfe:	df 93       	push	r29
     c00:	cf 93       	push	r28
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
	TCCR1B=0;
     c06:	ee e4       	ldi	r30, 0x4E	; 78
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	10 82       	st	Z, r1
	TIMSK&=~(1<<TOIE1);
     c0c:	a9 e5       	ldi	r26, 0x59	; 89
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e9 e5       	ldi	r30, 0x59	; 89
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	8b 7f       	andi	r24, 0xFB	; 251
     c18:	8c 93       	st	X, r24
	TIMSK&=~(1<<OCIE1A);
     c1a:	a9 e5       	ldi	r26, 0x59	; 89
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e9 e5       	ldi	r30, 0x59	; 89
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	8f 7e       	andi	r24, 0xEF	; 239
     c26:	8c 93       	st	X, r24

}
     c28:	cf 91       	pop	r28
     c2a:	df 91       	pop	r29
     c2c:	08 95       	ret

00000c2e <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
     c2e:	df 93       	push	r29
     c30:	cf 93       	push	r28
     c32:	00 d0       	rcall	.+0      	; 0xc34 <Timer1_setCallBack+0x6>
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	9a 83       	std	Y+2, r25	; 0x02
     c3a:	89 83       	std	Y+1, r24	; 0x01
	call_back=a_ptr;
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	9a 81       	ldd	r25, Y+2	; 0x02
     c40:	90 93 0f 01 	sts	0x010F, r25
     c44:	80 93 0e 01 	sts	0x010E, r24
}
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	08 95       	ret

00000c52 <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
     c52:	1f 92       	push	r1
     c54:	0f 92       	push	r0
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	0f 92       	push	r0
     c5a:	11 24       	eor	r1, r1
     c5c:	2f 93       	push	r18
     c5e:	3f 93       	push	r19
     c60:	4f 93       	push	r20
     c62:	5f 93       	push	r21
     c64:	6f 93       	push	r22
     c66:	7f 93       	push	r23
     c68:	8f 93       	push	r24
     c6a:	9f 93       	push	r25
     c6c:	af 93       	push	r26
     c6e:	bf 93       	push	r27
     c70:	ef 93       	push	r30
     c72:	ff 93       	push	r31
     c74:	df 93       	push	r29
     c76:	cf 93       	push	r28
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
	call_back();
     c7c:	e0 91 0e 01 	lds	r30, 0x010E
     c80:	f0 91 0f 01 	lds	r31, 0x010F
     c84:	09 95       	icall
	TCNT1=Timer1_Config_Ptr->initial_value;
     c86:	ac e4       	ldi	r26, 0x4C	; 76
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e0 91 0c 01 	lds	r30, 0x010C
     c8e:	f0 91 0d 01 	lds	r31, 0x010D
     c92:	80 81       	ld	r24, Z
     c94:	91 81       	ldd	r25, Z+1	; 0x01
     c96:	11 96       	adiw	r26, 0x01	; 1
     c98:	9c 93       	st	X, r25
     c9a:	8e 93       	st	-X, r24

}
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	ff 91       	pop	r31
     ca2:	ef 91       	pop	r30
     ca4:	bf 91       	pop	r27
     ca6:	af 91       	pop	r26
     ca8:	9f 91       	pop	r25
     caa:	8f 91       	pop	r24
     cac:	7f 91       	pop	r23
     cae:	6f 91       	pop	r22
     cb0:	5f 91       	pop	r21
     cb2:	4f 91       	pop	r20
     cb4:	3f 91       	pop	r19
     cb6:	2f 91       	pop	r18
     cb8:	0f 90       	pop	r0
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	0f 90       	pop	r0
     cbe:	1f 90       	pop	r1
     cc0:	18 95       	reti

00000cc2 <TIMER1_OVF_vect_vect>:
ISR(TIMER1_OVF_vect_vect)
{
     cc2:	1f 92       	push	r1
     cc4:	0f 92       	push	r0
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	0f 92       	push	r0
     cca:	11 24       	eor	r1, r1
     ccc:	2f 93       	push	r18
     cce:	3f 93       	push	r19
     cd0:	4f 93       	push	r20
     cd2:	5f 93       	push	r21
     cd4:	6f 93       	push	r22
     cd6:	7f 93       	push	r23
     cd8:	8f 93       	push	r24
     cda:	9f 93       	push	r25
     cdc:	af 93       	push	r26
     cde:	bf 93       	push	r27
     ce0:	ef 93       	push	r30
     ce2:	ff 93       	push	r31
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
	call_back();
     cec:	e0 91 0e 01 	lds	r30, 0x010E
     cf0:	f0 91 0f 01 	lds	r31, 0x010F
     cf4:	09 95       	icall
	TCNT1=Timer1_Config_Ptr->initial_value;
     cf6:	ac e4       	ldi	r26, 0x4C	; 76
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e0 91 0c 01 	lds	r30, 0x010C
     cfe:	f0 91 0d 01 	lds	r31, 0x010D
     d02:	80 81       	ld	r24, Z
     d04:	91 81       	ldd	r25, Z+1	; 0x01
     d06:	11 96       	adiw	r26, 0x01	; 1
     d08:	9c 93       	st	X, r25
     d0a:	8e 93       	st	-X, r24
}
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	ff 91       	pop	r31
     d12:	ef 91       	pop	r30
     d14:	bf 91       	pop	r27
     d16:	af 91       	pop	r26
     d18:	9f 91       	pop	r25
     d1a:	8f 91       	pop	r24
     d1c:	7f 91       	pop	r23
     d1e:	6f 91       	pop	r22
     d20:	5f 91       	pop	r21
     d22:	4f 91       	pop	r20
     d24:	3f 91       	pop	r19
     d26:	2f 91       	pop	r18
     d28:	0f 90       	pop	r0
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	0f 90       	pop	r0
     d2e:	1f 90       	pop	r1
     d30:	18 95       	reti

00000d32 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	00 d0       	rcall	.+0      	; 0xd38 <GPIO_setupPinDirection+0x6>
     d38:	00 d0       	rcall	.+0      	; 0xd3a <GPIO_setupPinDirection+0x8>
     d3a:	0f 92       	push	r0
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	89 83       	std	Y+1, r24	; 0x01
     d42:	6a 83       	std	Y+2, r22	; 0x02
     d44:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	88 30       	cpi	r24, 0x08	; 8
     d4a:	08 f0       	brcs	.+2      	; 0xd4e <GPIO_setupPinDirection+0x1c>
     d4c:	d5 c0       	rjmp	.+426    	; 0xef8 <GPIO_setupPinDirection+0x1c6>
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	84 30       	cpi	r24, 0x04	; 4
     d52:	08 f0       	brcs	.+2      	; 0xd56 <GPIO_setupPinDirection+0x24>
     d54:	d1 c0       	rjmp	.+418    	; 0xef8 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	3d 83       	std	Y+5, r19	; 0x05
     d5e:	2c 83       	std	Y+4, r18	; 0x04
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	91 05       	cpc	r25, r1
     d68:	09 f4       	brne	.+2      	; 0xd6c <GPIO_setupPinDirection+0x3a>
     d6a:	43 c0       	rjmp	.+134    	; 0xdf2 <GPIO_setupPinDirection+0xc0>
     d6c:	2c 81       	ldd	r18, Y+4	; 0x04
     d6e:	3d 81       	ldd	r19, Y+5	; 0x05
     d70:	22 30       	cpi	r18, 0x02	; 2
     d72:	31 05       	cpc	r19, r1
     d74:	2c f4       	brge	.+10     	; 0xd80 <GPIO_setupPinDirection+0x4e>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	71 f0       	breq	.+28     	; 0xd9a <GPIO_setupPinDirection+0x68>
     d7e:	bc c0       	rjmp	.+376    	; 0xef8 <GPIO_setupPinDirection+0x1c6>
     d80:	2c 81       	ldd	r18, Y+4	; 0x04
     d82:	3d 81       	ldd	r19, Y+5	; 0x05
     d84:	22 30       	cpi	r18, 0x02	; 2
     d86:	31 05       	cpc	r19, r1
     d88:	09 f4       	brne	.+2      	; 0xd8c <GPIO_setupPinDirection+0x5a>
     d8a:	5f c0       	rjmp	.+190    	; 0xe4a <GPIO_setupPinDirection+0x118>
     d8c:	8c 81       	ldd	r24, Y+4	; 0x04
     d8e:	9d 81       	ldd	r25, Y+5	; 0x05
     d90:	83 30       	cpi	r24, 0x03	; 3
     d92:	91 05       	cpc	r25, r1
     d94:	09 f4       	brne	.+2      	; 0xd98 <GPIO_setupPinDirection+0x66>
     d96:	85 c0       	rjmp	.+266    	; 0xea2 <GPIO_setupPinDirection+0x170>
     d98:	af c0       	rjmp	.+350    	; 0xef8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	81 30       	cpi	r24, 0x01	; 1
     d9e:	a1 f4       	brne	.+40     	; 0xdc8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     da0:	aa e3       	ldi	r26, 0x3A	; 58
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	ea e3       	ldi	r30, 0x3A	; 58
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	48 2f       	mov	r20, r24
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	02 2e       	mov	r0, r18
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <GPIO_setupPinDirection+0x8c>
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	0a 94       	dec	r0
     dc0:	e2 f7       	brpl	.-8      	; 0xdba <GPIO_setupPinDirection+0x88>
     dc2:	84 2b       	or	r24, r20
     dc4:	8c 93       	st	X, r24
     dc6:	98 c0       	rjmp	.+304    	; 0xef8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     dc8:	aa e3       	ldi	r26, 0x3A	; 58
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	ea e3       	ldi	r30, 0x3A	; 58
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	48 2f       	mov	r20, r24
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	02 2e       	mov	r0, r18
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <GPIO_setupPinDirection+0xb4>
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	0a 94       	dec	r0
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <GPIO_setupPinDirection+0xb0>
     dea:	80 95       	com	r24
     dec:	84 23       	and	r24, r20
     dee:	8c 93       	st	X, r24
     df0:	83 c0       	rjmp	.+262    	; 0xef8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	a1 f4       	brne	.+40     	; 0xe20 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     df8:	a7 e3       	ldi	r26, 0x37	; 55
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e7 e3       	ldi	r30, 0x37	; 55
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	48 2f       	mov	r20, r24
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 2e       	mov	r0, r18
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <GPIO_setupPinDirection+0xe4>
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	0a 94       	dec	r0
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <GPIO_setupPinDirection+0xe0>
     e1a:	84 2b       	or	r24, r20
     e1c:	8c 93       	st	X, r24
     e1e:	6c c0       	rjmp	.+216    	; 0xef8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     e20:	a7 e3       	ldi	r26, 0x37	; 55
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e7 e3       	ldi	r30, 0x37	; 55
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <GPIO_setupPinDirection+0x10c>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <GPIO_setupPinDirection+0x108>
     e42:	80 95       	com	r24
     e44:	84 23       	and	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	57 c0       	rjmp	.+174    	; 0xef8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	a1 f4       	brne	.+40     	; 0xe78 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     e50:	a4 e3       	ldi	r26, 0x34	; 52
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e4 e3       	ldi	r30, 0x34	; 52
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 2e       	mov	r0, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <GPIO_setupPinDirection+0x13c>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <GPIO_setupPinDirection+0x138>
     e72:	84 2b       	or	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	40 c0       	rjmp	.+128    	; 0xef8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     e78:	a4 e3       	ldi	r26, 0x34	; 52
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e4 e3       	ldi	r30, 0x34	; 52
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	48 2f       	mov	r20, r24
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 2e       	mov	r0, r18
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <GPIO_setupPinDirection+0x164>
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	0a 94       	dec	r0
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <GPIO_setupPinDirection+0x160>
     e9a:	80 95       	com	r24
     e9c:	84 23       	and	r24, r20
     e9e:	8c 93       	st	X, r24
     ea0:	2b c0       	rjmp	.+86     	; 0xef8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	a1 f4       	brne	.+40     	; 0xed0 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     ea8:	a1 e3       	ldi	r26, 0x31	; 49
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e1 e3       	ldi	r30, 0x31	; 49
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <GPIO_setupPinDirection+0x194>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <GPIO_setupPinDirection+0x190>
     eca:	84 2b       	or	r24, r20
     ecc:	8c 93       	st	X, r24
     ece:	14 c0       	rjmp	.+40     	; 0xef8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ed0:	a1 e3       	ldi	r26, 0x31	; 49
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e1 e3       	ldi	r30, 0x31	; 49
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	48 2f       	mov	r20, r24
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 2e       	mov	r0, r18
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <GPIO_setupPinDirection+0x1bc>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	0a 94       	dec	r0
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <GPIO_setupPinDirection+0x1b8>
     ef2:	80 95       	com	r24
     ef4:	84 23       	and	r24, r20
     ef6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	08 95       	ret

00000f08 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <GPIO_writePin+0x6>
     f0e:	00 d0       	rcall	.+0      	; 0xf10 <GPIO_writePin+0x8>
     f10:	0f 92       	push	r0
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	89 83       	std	Y+1, r24	; 0x01
     f18:	6a 83       	std	Y+2, r22	; 0x02
     f1a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	88 30       	cpi	r24, 0x08	; 8
     f20:	08 f0       	brcs	.+2      	; 0xf24 <GPIO_writePin+0x1c>
     f22:	d5 c0       	rjmp	.+426    	; 0x10ce <GPIO_writePin+0x1c6>
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	84 30       	cpi	r24, 0x04	; 4
     f28:	08 f0       	brcs	.+2      	; 0xf2c <GPIO_writePin+0x24>
     f2a:	d1 c0       	rjmp	.+418    	; 0x10ce <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	3d 83       	std	Y+5, r19	; 0x05
     f34:	2c 83       	std	Y+4, r18	; 0x04
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	9d 81       	ldd	r25, Y+5	; 0x05
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	91 05       	cpc	r25, r1
     f3e:	09 f4       	brne	.+2      	; 0xf42 <GPIO_writePin+0x3a>
     f40:	43 c0       	rjmp	.+134    	; 0xfc8 <GPIO_writePin+0xc0>
     f42:	2c 81       	ldd	r18, Y+4	; 0x04
     f44:	3d 81       	ldd	r19, Y+5	; 0x05
     f46:	22 30       	cpi	r18, 0x02	; 2
     f48:	31 05       	cpc	r19, r1
     f4a:	2c f4       	brge	.+10     	; 0xf56 <GPIO_writePin+0x4e>
     f4c:	8c 81       	ldd	r24, Y+4	; 0x04
     f4e:	9d 81       	ldd	r25, Y+5	; 0x05
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	71 f0       	breq	.+28     	; 0xf70 <GPIO_writePin+0x68>
     f54:	bc c0       	rjmp	.+376    	; 0x10ce <GPIO_writePin+0x1c6>
     f56:	2c 81       	ldd	r18, Y+4	; 0x04
     f58:	3d 81       	ldd	r19, Y+5	; 0x05
     f5a:	22 30       	cpi	r18, 0x02	; 2
     f5c:	31 05       	cpc	r19, r1
     f5e:	09 f4       	brne	.+2      	; 0xf62 <GPIO_writePin+0x5a>
     f60:	5f c0       	rjmp	.+190    	; 0x1020 <GPIO_writePin+0x118>
     f62:	8c 81       	ldd	r24, Y+4	; 0x04
     f64:	9d 81       	ldd	r25, Y+5	; 0x05
     f66:	83 30       	cpi	r24, 0x03	; 3
     f68:	91 05       	cpc	r25, r1
     f6a:	09 f4       	brne	.+2      	; 0xf6e <GPIO_writePin+0x66>
     f6c:	85 c0       	rjmp	.+266    	; 0x1078 <GPIO_writePin+0x170>
     f6e:	af c0       	rjmp	.+350    	; 0x10ce <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	a1 f4       	brne	.+40     	; 0xf9e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     f76:	ab e3       	ldi	r26, 0x3B	; 59
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	eb e3       	ldi	r30, 0x3B	; 59
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	48 2f       	mov	r20, r24
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <GPIO_writePin+0x8c>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <GPIO_writePin+0x88>
     f98:	84 2b       	or	r24, r20
     f9a:	8c 93       	st	X, r24
     f9c:	98 c0       	rjmp	.+304    	; 0x10ce <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     f9e:	ab e3       	ldi	r26, 0x3B	; 59
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	eb e3       	ldi	r30, 0x3B	; 59
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <GPIO_writePin+0xb4>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <GPIO_writePin+0xb0>
     fc0:	80 95       	com	r24
     fc2:	84 23       	and	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	83 c0       	rjmp	.+262    	; 0x10ce <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	a1 f4       	brne	.+40     	; 0xff6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     fce:	a8 e3       	ldi	r26, 0x38	; 56
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e8 e3       	ldi	r30, 0x38	; 56
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <GPIO_writePin+0xe4>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <GPIO_writePin+0xe0>
     ff0:	84 2b       	or	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	6c c0       	rjmp	.+216    	; 0x10ce <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     ff6:	a8 e3       	ldi	r26, 0x38	; 56
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e8 e3       	ldi	r30, 0x38	; 56
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <GPIO_writePin+0x10c>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <GPIO_writePin+0x108>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	57 c0       	rjmp	.+174    	; 0x10ce <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	a1 f4       	brne	.+40     	; 0x104e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1026:	a5 e3       	ldi	r26, 0x35	; 53
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e5 e3       	ldi	r30, 0x35	; 53
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <GPIO_writePin+0x13c>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <GPIO_writePin+0x138>
    1048:	84 2b       	or	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	40 c0       	rjmp	.+128    	; 0x10ce <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    104e:	a5 e3       	ldi	r26, 0x35	; 53
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e5 e3       	ldi	r30, 0x35	; 53
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <GPIO_writePin+0x164>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <GPIO_writePin+0x160>
    1070:	80 95       	com	r24
    1072:	84 23       	and	r24, r20
    1074:	8c 93       	st	X, r24
    1076:	2b c0       	rjmp	.+86     	; 0x10ce <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	81 30       	cpi	r24, 0x01	; 1
    107c:	a1 f4       	brne	.+40     	; 0x10a6 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    107e:	a2 e3       	ldi	r26, 0x32	; 50
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e2 e3       	ldi	r30, 0x32	; 50
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	02 2e       	mov	r0, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <GPIO_writePin+0x194>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	0a 94       	dec	r0
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <GPIO_writePin+0x190>
    10a0:	84 2b       	or	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	14 c0       	rjmp	.+40     	; 0x10ce <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    10a6:	a2 e3       	ldi	r26, 0x32	; 50
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e2 e3       	ldi	r30, 0x32	; 50
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <GPIO_writePin+0x1bc>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <GPIO_writePin+0x1b8>
    10c8:	80 95       	com	r24
    10ca:	84 23       	and	r24, r20
    10cc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <GPIO_readPin+0x6>
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <GPIO_readPin+0x8>
    10e6:	0f 92       	push	r0
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	8a 83       	std	Y+2, r24	; 0x02
    10ee:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    10f0:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	88 30       	cpi	r24, 0x08	; 8
    10f6:	08 f0       	brcs	.+2      	; 0x10fa <GPIO_readPin+0x1c>
    10f8:	84 c0       	rjmp	.+264    	; 0x1202 <GPIO_readPin+0x124>
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	84 30       	cpi	r24, 0x04	; 4
    10fe:	08 f0       	brcs	.+2      	; 0x1102 <GPIO_readPin+0x24>
    1100:	80 c0       	rjmp	.+256    	; 0x1202 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	3d 83       	std	Y+5, r19	; 0x05
    110a:	2c 83       	std	Y+4, r18	; 0x04
    110c:	4c 81       	ldd	r20, Y+4	; 0x04
    110e:	5d 81       	ldd	r21, Y+5	; 0x05
    1110:	41 30       	cpi	r20, 0x01	; 1
    1112:	51 05       	cpc	r21, r1
    1114:	79 f1       	breq	.+94     	; 0x1174 <GPIO_readPin+0x96>
    1116:	8c 81       	ldd	r24, Y+4	; 0x04
    1118:	9d 81       	ldd	r25, Y+5	; 0x05
    111a:	82 30       	cpi	r24, 0x02	; 2
    111c:	91 05       	cpc	r25, r1
    111e:	34 f4       	brge	.+12     	; 0x112c <GPIO_readPin+0x4e>
    1120:	2c 81       	ldd	r18, Y+4	; 0x04
    1122:	3d 81       	ldd	r19, Y+5	; 0x05
    1124:	21 15       	cp	r18, r1
    1126:	31 05       	cpc	r19, r1
    1128:	69 f0       	breq	.+26     	; 0x1144 <GPIO_readPin+0x66>
    112a:	6b c0       	rjmp	.+214    	; 0x1202 <GPIO_readPin+0x124>
    112c:	4c 81       	ldd	r20, Y+4	; 0x04
    112e:	5d 81       	ldd	r21, Y+5	; 0x05
    1130:	42 30       	cpi	r20, 0x02	; 2
    1132:	51 05       	cpc	r21, r1
    1134:	b9 f1       	breq	.+110    	; 0x11a4 <GPIO_readPin+0xc6>
    1136:	8c 81       	ldd	r24, Y+4	; 0x04
    1138:	9d 81       	ldd	r25, Y+5	; 0x05
    113a:	83 30       	cpi	r24, 0x03	; 3
    113c:	91 05       	cpc	r25, r1
    113e:	09 f4       	brne	.+2      	; 0x1142 <GPIO_readPin+0x64>
    1140:	49 c0       	rjmp	.+146    	; 0x11d4 <GPIO_readPin+0xf6>
    1142:	5f c0       	rjmp	.+190    	; 0x1202 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1144:	e9 e3       	ldi	r30, 0x39	; 57
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	88 2f       	mov	r24, r24
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	a9 01       	movw	r20, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <GPIO_readPin+0x7e>
    1158:	55 95       	asr	r21
    115a:	47 95       	ror	r20
    115c:	8a 95       	dec	r24
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <GPIO_readPin+0x7a>
    1160:	ca 01       	movw	r24, r20
    1162:	81 70       	andi	r24, 0x01	; 1
    1164:	90 70       	andi	r25, 0x00	; 0
    1166:	88 23       	and	r24, r24
    1168:	19 f0       	breq	.+6      	; 0x1170 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	49 c0       	rjmp	.+146    	; 0x1202 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1170:	19 82       	std	Y+1, r1	; 0x01
    1172:	47 c0       	rjmp	.+142    	; 0x1202 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1174:	e6 e3       	ldi	r30, 0x36	; 54
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	88 2f       	mov	r24, r24
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	a9 01       	movw	r20, r18
    1186:	02 c0       	rjmp	.+4      	; 0x118c <GPIO_readPin+0xae>
    1188:	55 95       	asr	r21
    118a:	47 95       	ror	r20
    118c:	8a 95       	dec	r24
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <GPIO_readPin+0xaa>
    1190:	ca 01       	movw	r24, r20
    1192:	81 70       	andi	r24, 0x01	; 1
    1194:	90 70       	andi	r25, 0x00	; 0
    1196:	88 23       	and	r24, r24
    1198:	19 f0       	breq	.+6      	; 0x11a0 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	31 c0       	rjmp	.+98     	; 0x1202 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11a0:	19 82       	std	Y+1, r1	; 0x01
    11a2:	2f c0       	rjmp	.+94     	; 0x1202 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    11a4:	e3 e3       	ldi	r30, 0x33	; 51
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	88 2f       	mov	r24, r24
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	a9 01       	movw	r20, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <GPIO_readPin+0xde>
    11b8:	55 95       	asr	r21
    11ba:	47 95       	ror	r20
    11bc:	8a 95       	dec	r24
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <GPIO_readPin+0xda>
    11c0:	ca 01       	movw	r24, r20
    11c2:	81 70       	andi	r24, 0x01	; 1
    11c4:	90 70       	andi	r25, 0x00	; 0
    11c6:	88 23       	and	r24, r24
    11c8:	19 f0       	breq	.+6      	; 0x11d0 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	19 c0       	rjmp	.+50     	; 0x1202 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11d0:	19 82       	std	Y+1, r1	; 0x01
    11d2:	17 c0       	rjmp	.+46     	; 0x1202 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    11d4:	e0 e3       	ldi	r30, 0x30	; 48
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	88 2f       	mov	r24, r24
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	a9 01       	movw	r20, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <GPIO_readPin+0x10e>
    11e8:	55 95       	asr	r21
    11ea:	47 95       	ror	r20
    11ec:	8a 95       	dec	r24
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <GPIO_readPin+0x10a>
    11f0:	ca 01       	movw	r24, r20
    11f2:	81 70       	andi	r24, 0x01	; 1
    11f4:	90 70       	andi	r25, 0x00	; 0
    11f6:	88 23       	and	r24, r24
    11f8:	19 f0       	breq	.+6      	; 0x1200 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	01 c0       	rjmp	.+2      	; 0x1202 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1200:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1202:	89 81       	ldd	r24, Y+1	; 0x01
}
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	00 d0       	rcall	.+0      	; 0x121a <GPIO_setupPortDirection+0x6>
    121a:	00 d0       	rcall	.+0      	; 0x121c <GPIO_setupPortDirection+0x8>
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	84 30       	cpi	r24, 0x04	; 4
    1228:	90 f5       	brcc	.+100    	; 0x128e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	3c 83       	std	Y+4, r19	; 0x04
    1232:	2b 83       	std	Y+3, r18	; 0x03
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	d1 f0       	breq	.+52     	; 0x1272 <GPIO_setupPortDirection+0x5e>
    123e:	2b 81       	ldd	r18, Y+3	; 0x03
    1240:	3c 81       	ldd	r19, Y+4	; 0x04
    1242:	22 30       	cpi	r18, 0x02	; 2
    1244:	31 05       	cpc	r19, r1
    1246:	2c f4       	brge	.+10     	; 0x1252 <GPIO_setupPortDirection+0x3e>
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	9c 81       	ldd	r25, Y+4	; 0x04
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	61 f0       	breq	.+24     	; 0x1268 <GPIO_setupPortDirection+0x54>
    1250:	1e c0       	rjmp	.+60     	; 0x128e <GPIO_setupPortDirection+0x7a>
    1252:	2b 81       	ldd	r18, Y+3	; 0x03
    1254:	3c 81       	ldd	r19, Y+4	; 0x04
    1256:	22 30       	cpi	r18, 0x02	; 2
    1258:	31 05       	cpc	r19, r1
    125a:	81 f0       	breq	.+32     	; 0x127c <GPIO_setupPortDirection+0x68>
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	9c 81       	ldd	r25, Y+4	; 0x04
    1260:	83 30       	cpi	r24, 0x03	; 3
    1262:	91 05       	cpc	r25, r1
    1264:	81 f0       	breq	.+32     	; 0x1286 <GPIO_setupPortDirection+0x72>
    1266:	13 c0       	rjmp	.+38     	; 0x128e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1268:	ea e3       	ldi	r30, 0x3A	; 58
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	80 83       	st	Z, r24
    1270:	0e c0       	rjmp	.+28     	; 0x128e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1272:	e7 e3       	ldi	r30, 0x37	; 55
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	80 83       	st	Z, r24
    127a:	09 c0       	rjmp	.+18     	; 0x128e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    127c:	e4 e3       	ldi	r30, 0x34	; 52
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	80 83       	st	Z, r24
    1284:	04 c0       	rjmp	.+8      	; 0x128e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1286:	e1 e3       	ldi	r30, 0x31	; 49
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	80 83       	st	Z, r24
			break;
		}
	}
}
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <GPIO_writePort+0x6>
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <GPIO_writePort+0x8>
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	89 83       	std	Y+1, r24	; 0x01
    12aa:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	84 30       	cpi	r24, 0x04	; 4
    12b0:	90 f5       	brcc	.+100    	; 0x1316 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	3c 83       	std	Y+4, r19	; 0x04
    12ba:	2b 83       	std	Y+3, r18	; 0x03
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	9c 81       	ldd	r25, Y+4	; 0x04
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	91 05       	cpc	r25, r1
    12c4:	d1 f0       	breq	.+52     	; 0x12fa <GPIO_writePort+0x5e>
    12c6:	2b 81       	ldd	r18, Y+3	; 0x03
    12c8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ca:	22 30       	cpi	r18, 0x02	; 2
    12cc:	31 05       	cpc	r19, r1
    12ce:	2c f4       	brge	.+10     	; 0x12da <GPIO_writePort+0x3e>
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	61 f0       	breq	.+24     	; 0x12f0 <GPIO_writePort+0x54>
    12d8:	1e c0       	rjmp	.+60     	; 0x1316 <GPIO_writePort+0x7a>
    12da:	2b 81       	ldd	r18, Y+3	; 0x03
    12dc:	3c 81       	ldd	r19, Y+4	; 0x04
    12de:	22 30       	cpi	r18, 0x02	; 2
    12e0:	31 05       	cpc	r19, r1
    12e2:	81 f0       	breq	.+32     	; 0x1304 <GPIO_writePort+0x68>
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	9c 81       	ldd	r25, Y+4	; 0x04
    12e8:	83 30       	cpi	r24, 0x03	; 3
    12ea:	91 05       	cpc	r25, r1
    12ec:	81 f0       	breq	.+32     	; 0x130e <GPIO_writePort+0x72>
    12ee:	13 c0       	rjmp	.+38     	; 0x1316 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    12f0:	eb e3       	ldi	r30, 0x3B	; 59
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	80 83       	st	Z, r24
    12f8:	0e c0       	rjmp	.+28     	; 0x1316 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    12fa:	e8 e3       	ldi	r30, 0x38	; 56
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	80 83       	st	Z, r24
    1302:	09 c0       	rjmp	.+18     	; 0x1316 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1304:	e5 e3       	ldi	r30, 0x35	; 53
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	80 83       	st	Z, r24
    130c:	04 c0       	rjmp	.+8      	; 0x1316 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    130e:	e2 e3       	ldi	r30, 0x32	; 50
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	80 83       	st	Z, r24
			break;
		}
	}
}
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	00 d0       	rcall	.+0      	; 0x132a <GPIO_readPort+0x6>
    132a:	00 d0       	rcall	.+0      	; 0x132c <GPIO_readPort+0x8>
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1332:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	84 30       	cpi	r24, 0x04	; 4
    1338:	90 f5       	brcc	.+100    	; 0x139e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	3c 83       	std	Y+4, r19	; 0x04
    1342:	2b 83       	std	Y+3, r18	; 0x03
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	9c 81       	ldd	r25, Y+4	; 0x04
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	91 05       	cpc	r25, r1
    134c:	d1 f0       	breq	.+52     	; 0x1382 <GPIO_readPort+0x5e>
    134e:	2b 81       	ldd	r18, Y+3	; 0x03
    1350:	3c 81       	ldd	r19, Y+4	; 0x04
    1352:	22 30       	cpi	r18, 0x02	; 2
    1354:	31 05       	cpc	r19, r1
    1356:	2c f4       	brge	.+10     	; 0x1362 <GPIO_readPort+0x3e>
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	9c 81       	ldd	r25, Y+4	; 0x04
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	61 f0       	breq	.+24     	; 0x1378 <GPIO_readPort+0x54>
    1360:	1e c0       	rjmp	.+60     	; 0x139e <GPIO_readPort+0x7a>
    1362:	2b 81       	ldd	r18, Y+3	; 0x03
    1364:	3c 81       	ldd	r19, Y+4	; 0x04
    1366:	22 30       	cpi	r18, 0x02	; 2
    1368:	31 05       	cpc	r19, r1
    136a:	81 f0       	breq	.+32     	; 0x138c <GPIO_readPort+0x68>
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	9c 81       	ldd	r25, Y+4	; 0x04
    1370:	83 30       	cpi	r24, 0x03	; 3
    1372:	91 05       	cpc	r25, r1
    1374:	81 f0       	breq	.+32     	; 0x1396 <GPIO_readPort+0x72>
    1376:	13 c0       	rjmp	.+38     	; 0x139e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1378:	e9 e3       	ldi	r30, 0x39	; 57
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	0e c0       	rjmp	.+28     	; 0x139e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1382:	e6 e3       	ldi	r30, 0x36	; 54
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	89 83       	std	Y+1, r24	; 0x01
    138a:	09 c0       	rjmp	.+18     	; 0x139e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    138c:	e3 e3       	ldi	r30, 0x33	; 51
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	89 83       	std	Y+1, r24	; 0x01
    1394:	04 c0       	rjmp	.+8      	; 0x139e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1396:	e0 e3       	ldi	r30, 0x30	; 48
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    139e:	89 81       	ldd	r24, Y+1	; 0x01
}
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	08 95       	ret

000013ae <Step1>:
uint8 pass[6];
uint8 pass2[6];
uint8 pass3[6];

/* Function to handle Changing the password */
void Step1(void) {
    13ae:	0f 93       	push	r16
    13b0:	1f 93       	push	r17
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	ae 97       	sbiw	r28, 0x2e	; 46
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    /* Send CHANGE_PASSWORD_COMMAND to initiate password change */
    UART_sendByte(CHANGE_PASSWORD_COMMAND);
    13c6:	81 e1       	ldi	r24, 0x11	; 17
    13c8:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <UART_sendByte>

    /* Clear the LCD screen */
    LCD_clearScreen();
    13cc:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <LCD_clearScreen>

    /* Display message for user to enter the new password */
    LCD_displayString("plz enter pass:");
    13d0:	80 e6       	ldi	r24, 0x60	; 96
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_displayString>

    /* Wait until a valid key is pressed (not '=' or 17) */
    while (KEYPAD_getPressedKey() == '=' | KEYPAD_getPressedKey() == 17);
    13d8:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <KEYPAD_getPressedKey>
    13dc:	1e a6       	std	Y+46, r1	; 0x2e
    13de:	8d 33       	cpi	r24, 0x3D	; 61
    13e0:	11 f4       	brne	.+4      	; 0x13e6 <Step1+0x38>
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	8e a7       	std	Y+46, r24	; 0x2e
    13e6:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <KEYPAD_getPressedKey>
    13ea:	1d a6       	std	Y+45, r1	; 0x2d
    13ec:	81 31       	cpi	r24, 0x11	; 17
    13ee:	11 f4       	brne	.+4      	; 0x13f4 <Step1+0x46>
    13f0:	91 e0       	ldi	r25, 0x01	; 1
    13f2:	9d a7       	std	Y+45, r25	; 0x2d
    13f4:	8e a5       	ldd	r24, Y+46	; 0x2e
    13f6:	9d a5       	ldd	r25, Y+45	; 0x2d
    13f8:	89 2b       	or	r24, r25
    13fa:	88 23       	and	r24, r24
    13fc:	69 f7       	brne	.-38     	; 0x13d8 <Step1+0x2a>

    int i = 0;
    13fe:	1c a6       	std	Y+44, r1	; 0x2c
    1400:	1b a6       	std	Y+43, r1	; 0x2b
    pass[5] = '\0';
    1402:	10 92 15 01 	sts	0x0115, r1

    /* Read and display the password with '*' masking */
    for (i = 0; i < 5; i++) {
    1406:	1c a6       	std	Y+44, r1	; 0x2c
    1408:	1b a6       	std	Y+43, r1	; 0x2b
    140a:	87 c0       	rjmp	.+270    	; 0x151a <Step1+0x16c>
        pass[i] = KEYPAD_getPressedKey();
    140c:	0b a5       	ldd	r16, Y+43	; 0x2b
    140e:	1c a5       	ldd	r17, Y+44	; 0x2c
    1410:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <KEYPAD_getPressedKey>
    1414:	f8 01       	movw	r30, r16
    1416:	e0 5f       	subi	r30, 0xF0	; 240
    1418:	fe 4f       	sbci	r31, 0xFE	; 254
    141a:	80 83       	st	Z, r24
        LCD_displayStringRowColumn(1, i, "*");
    141c:	9b a5       	ldd	r25, Y+43	; 0x2b
    141e:	20 e7       	ldi	r18, 0x70	; 112
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	69 2f       	mov	r22, r25
    1426:	a9 01       	movw	r20, r18
    1428:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_displayStringRowColumn>
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	aa ef       	ldi	r26, 0xFA	; 250
    1432:	b3 e4       	ldi	r27, 0x43	; 67
    1434:	8f a3       	std	Y+39, r24	; 0x27
    1436:	98 a7       	std	Y+40, r25	; 0x28
    1438:	a9 a7       	std	Y+41, r26	; 0x29
    143a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    143c:	6f a1       	ldd	r22, Y+39	; 0x27
    143e:	78 a5       	ldd	r23, Y+40	; 0x28
    1440:	89 a5       	ldd	r24, Y+41	; 0x29
    1442:	9a a5       	ldd	r25, Y+42	; 0x2a
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	4a ef       	ldi	r20, 0xFA	; 250
    144a:	54 e4       	ldi	r21, 0x44	; 68
    144c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	8b a3       	std	Y+35, r24	; 0x23
    1456:	9c a3       	std	Y+36, r25	; 0x24
    1458:	ad a3       	std	Y+37, r26	; 0x25
    145a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    145c:	6b a1       	ldd	r22, Y+35	; 0x23
    145e:	7c a1       	ldd	r23, Y+36	; 0x24
    1460:	8d a1       	ldd	r24, Y+37	; 0x25
    1462:	9e a1       	ldd	r25, Y+38	; 0x26
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	40 e8       	ldi	r20, 0x80	; 128
    146a:	5f e3       	ldi	r21, 0x3F	; 63
    146c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1470:	88 23       	and	r24, r24
    1472:	2c f4       	brge	.+10     	; 0x147e <Step1+0xd0>
		__ticks = 1;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	9a a3       	std	Y+34, r25	; 0x22
    147a:	89 a3       	std	Y+33, r24	; 0x21
    147c:	3f c0       	rjmp	.+126    	; 0x14fc <Step1+0x14e>
	else if (__tmp > 65535)
    147e:	6b a1       	ldd	r22, Y+35	; 0x23
    1480:	7c a1       	ldd	r23, Y+36	; 0x24
    1482:	8d a1       	ldd	r24, Y+37	; 0x25
    1484:	9e a1       	ldd	r25, Y+38	; 0x26
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	3f ef       	ldi	r19, 0xFF	; 255
    148a:	4f e7       	ldi	r20, 0x7F	; 127
    148c:	57 e4       	ldi	r21, 0x47	; 71
    148e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1492:	18 16       	cp	r1, r24
    1494:	4c f5       	brge	.+82     	; 0x14e8 <Step1+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1496:	6f a1       	ldd	r22, Y+39	; 0x27
    1498:	78 a5       	ldd	r23, Y+40	; 0x28
    149a:	89 a5       	ldd	r24, Y+41	; 0x29
    149c:	9a a5       	ldd	r25, Y+42	; 0x2a
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	40 e2       	ldi	r20, 0x20	; 32
    14a4:	51 e4       	ldi	r21, 0x41	; 65
    14a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14aa:	dc 01       	movw	r26, r24
    14ac:	cb 01       	movw	r24, r22
    14ae:	bc 01       	movw	r22, r24
    14b0:	cd 01       	movw	r24, r26
    14b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	9a a3       	std	Y+34, r25	; 0x22
    14bc:	89 a3       	std	Y+33, r24	; 0x21
    14be:	0f c0       	rjmp	.+30     	; 0x14de <Step1+0x130>
    14c0:	88 ec       	ldi	r24, 0xC8	; 200
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	98 a3       	std	Y+32, r25	; 0x20
    14c6:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14ca:	98 a1       	ldd	r25, Y+32	; 0x20
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	f1 f7       	brne	.-4      	; 0x14cc <Step1+0x11e>
    14d0:	98 a3       	std	Y+32, r25	; 0x20
    14d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d4:	89 a1       	ldd	r24, Y+33	; 0x21
    14d6:	9a a1       	ldd	r25, Y+34	; 0x22
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	9a a3       	std	Y+34, r25	; 0x22
    14dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14de:	89 a1       	ldd	r24, Y+33	; 0x21
    14e0:	9a a1       	ldd	r25, Y+34	; 0x22
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	69 f7       	brne	.-38     	; 0x14c0 <Step1+0x112>
    14e6:	14 c0       	rjmp	.+40     	; 0x1510 <Step1+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e8:	6b a1       	ldd	r22, Y+35	; 0x23
    14ea:	7c a1       	ldd	r23, Y+36	; 0x24
    14ec:	8d a1       	ldd	r24, Y+37	; 0x25
    14ee:	9e a1       	ldd	r25, Y+38	; 0x26
    14f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	9a a3       	std	Y+34, r25	; 0x22
    14fa:	89 a3       	std	Y+33, r24	; 0x21
    14fc:	89 a1       	ldd	r24, Y+33	; 0x21
    14fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1500:	9e 8f       	std	Y+30, r25	; 0x1e
    1502:	8d 8f       	std	Y+29, r24	; 0x1d
    1504:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1506:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	f1 f7       	brne	.-4      	; 0x1508 <Step1+0x15a>
    150c:	9e 8f       	std	Y+30, r25	; 0x1e
    150e:	8d 8f       	std	Y+29, r24	; 0x1d

    int i = 0;
    pass[5] = '\0';

    /* Read and display the password with '*' masking */
    for (i = 0; i < 5; i++) {
    1510:	8b a5       	ldd	r24, Y+43	; 0x2b
    1512:	9c a5       	ldd	r25, Y+44	; 0x2c
    1514:	01 96       	adiw	r24, 0x01	; 1
    1516:	9c a7       	std	Y+44, r25	; 0x2c
    1518:	8b a7       	std	Y+43, r24	; 0x2b
    151a:	8b a5       	ldd	r24, Y+43	; 0x2b
    151c:	9c a5       	ldd	r25, Y+44	; 0x2c
    151e:	85 30       	cpi	r24, 0x05	; 5
    1520:	91 05       	cpc	r25, r1
    1522:	0c f4       	brge	.+2      	; 0x1526 <Step1+0x178>
    1524:	73 cf       	rjmp	.-282    	; 0x140c <Step1+0x5e>
        pass[i] = KEYPAD_getPressedKey();
        LCD_displayStringRowColumn(1, i, "*");
        _delay_ms(500);
    }
    pass[5] = '#';
    1526:	83 e2       	ldi	r24, 0x23	; 35
    1528:	80 93 15 01 	sts	0x0115, r24

    /* Wait until the '=' key is pressed */
    while (KEYPAD_getPressedKey() != '=');
    152c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <KEYPAD_getPressedKey>
    1530:	8d 33       	cpi	r24, 0x3D	; 61
    1532:	e1 f7       	brne	.-8      	; 0x152c <Step1+0x17e>

    /* Clear the LCD screen */
    LCD_clearScreen();
    1534:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <LCD_clearScreen>

    /* Display message for user to re-enter the same password */
    LCD_displayString("Please re-enter the same Pass");
    1538:	82 e7       	ldi	r24, 0x72	; 114
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_displayString>
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	aa ef       	ldi	r26, 0xFA	; 250
    1546:	b3 e4       	ldi	r27, 0x43	; 67
    1548:	89 8f       	std	Y+25, r24	; 0x19
    154a:	9a 8f       	std	Y+26, r25	; 0x1a
    154c:	ab 8f       	std	Y+27, r26	; 0x1b
    154e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1550:	69 8d       	ldd	r22, Y+25	; 0x19
    1552:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1554:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1556:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	4a ef       	ldi	r20, 0xFA	; 250
    155e:	54 e4       	ldi	r21, 0x44	; 68
    1560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	8d 8b       	std	Y+21, r24	; 0x15
    156a:	9e 8b       	std	Y+22, r25	; 0x16
    156c:	af 8b       	std	Y+23, r26	; 0x17
    156e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1570:	6d 89       	ldd	r22, Y+21	; 0x15
    1572:	7e 89       	ldd	r23, Y+22	; 0x16
    1574:	8f 89       	ldd	r24, Y+23	; 0x17
    1576:	98 8d       	ldd	r25, Y+24	; 0x18
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e8       	ldi	r20, 0x80	; 128
    157e:	5f e3       	ldi	r21, 0x3F	; 63
    1580:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1584:	88 23       	and	r24, r24
    1586:	2c f4       	brge	.+10     	; 0x1592 <Step1+0x1e4>
		__ticks = 1;
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	9c 8b       	std	Y+20, r25	; 0x14
    158e:	8b 8b       	std	Y+19, r24	; 0x13
    1590:	3f c0       	rjmp	.+126    	; 0x1610 <Step1+0x262>
	else if (__tmp > 65535)
    1592:	6d 89       	ldd	r22, Y+21	; 0x15
    1594:	7e 89       	ldd	r23, Y+22	; 0x16
    1596:	8f 89       	ldd	r24, Y+23	; 0x17
    1598:	98 8d       	ldd	r25, Y+24	; 0x18
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	3f ef       	ldi	r19, 0xFF	; 255
    159e:	4f e7       	ldi	r20, 0x7F	; 127
    15a0:	57 e4       	ldi	r21, 0x47	; 71
    15a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15a6:	18 16       	cp	r1, r24
    15a8:	4c f5       	brge	.+82     	; 0x15fc <Step1+0x24e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15aa:	69 8d       	ldd	r22, Y+25	; 0x19
    15ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e2       	ldi	r20, 0x20	; 32
    15b8:	51 e4       	ldi	r21, 0x41	; 65
    15ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	bc 01       	movw	r22, r24
    15c4:	cd 01       	movw	r24, r26
    15c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	9c 8b       	std	Y+20, r25	; 0x14
    15d0:	8b 8b       	std	Y+19, r24	; 0x13
    15d2:	0f c0       	rjmp	.+30     	; 0x15f2 <Step1+0x244>
    15d4:	88 ec       	ldi	r24, 0xC8	; 200
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	9a 8b       	std	Y+18, r25	; 0x12
    15da:	89 8b       	std	Y+17, r24	; 0x11
    15dc:	89 89       	ldd	r24, Y+17	; 0x11
    15de:	9a 89       	ldd	r25, Y+18	; 0x12
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	f1 f7       	brne	.-4      	; 0x15e0 <Step1+0x232>
    15e4:	9a 8b       	std	Y+18, r25	; 0x12
    15e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e8:	8b 89       	ldd	r24, Y+19	; 0x13
    15ea:	9c 89       	ldd	r25, Y+20	; 0x14
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	9c 8b       	std	Y+20, r25	; 0x14
    15f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f2:	8b 89       	ldd	r24, Y+19	; 0x13
    15f4:	9c 89       	ldd	r25, Y+20	; 0x14
    15f6:	00 97       	sbiw	r24, 0x00	; 0
    15f8:	69 f7       	brne	.-38     	; 0x15d4 <Step1+0x226>
    15fa:	14 c0       	rjmp	.+40     	; 0x1624 <Step1+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15fc:	6d 89       	ldd	r22, Y+21	; 0x15
    15fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1600:	8f 89       	ldd	r24, Y+23	; 0x17
    1602:	98 8d       	ldd	r25, Y+24	; 0x18
    1604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	9c 8b       	std	Y+20, r25	; 0x14
    160e:	8b 8b       	std	Y+19, r24	; 0x13
    1610:	8b 89       	ldd	r24, Y+19	; 0x13
    1612:	9c 89       	ldd	r25, Y+20	; 0x14
    1614:	98 8b       	std	Y+16, r25	; 0x10
    1616:	8f 87       	std	Y+15, r24	; 0x0f
    1618:	8f 85       	ldd	r24, Y+15	; 0x0f
    161a:	98 89       	ldd	r25, Y+16	; 0x10
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	f1 f7       	brne	.-4      	; 0x161c <Step1+0x26e>
    1620:	98 8b       	std	Y+16, r25	; 0x10
    1622:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(500);

    /* Read and display the second password entry with '*' masking */
    for (i = 0; i < 5; i++) {
    1624:	1c a6       	std	Y+44, r1	; 0x2c
    1626:	1b a6       	std	Y+43, r1	; 0x2b
    1628:	87 c0       	rjmp	.+270    	; 0x1738 <Step1+0x38a>
        pass2[i] = KEYPAD_getPressedKey();
    162a:	0b a5       	ldd	r16, Y+43	; 0x2b
    162c:	1c a5       	ldd	r17, Y+44	; 0x2c
    162e:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <KEYPAD_getPressedKey>
    1632:	f8 01       	movw	r30, r16
    1634:	e4 5e       	subi	r30, 0xE4	; 228
    1636:	fe 4f       	sbci	r31, 0xFE	; 254
    1638:	80 83       	st	Z, r24
        LCD_displayStringRowColumn(1, i, "*");
    163a:	9b a5       	ldd	r25, Y+43	; 0x2b
    163c:	20 e7       	ldi	r18, 0x70	; 112
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	69 2f       	mov	r22, r25
    1644:	a9 01       	movw	r20, r18
    1646:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_displayStringRowColumn>
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	aa ef       	ldi	r26, 0xFA	; 250
    1650:	b3 e4       	ldi	r27, 0x43	; 67
    1652:	8b 87       	std	Y+11, r24	; 0x0b
    1654:	9c 87       	std	Y+12, r25	; 0x0c
    1656:	ad 87       	std	Y+13, r26	; 0x0d
    1658:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    165a:	6b 85       	ldd	r22, Y+11	; 0x0b
    165c:	7c 85       	ldd	r23, Y+12	; 0x0c
    165e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1660:	9e 85       	ldd	r25, Y+14	; 0x0e
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	4a ef       	ldi	r20, 0xFA	; 250
    1668:	54 e4       	ldi	r21, 0x44	; 68
    166a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	8f 83       	std	Y+7, r24	; 0x07
    1674:	98 87       	std	Y+8, r25	; 0x08
    1676:	a9 87       	std	Y+9, r26	; 0x09
    1678:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    167a:	6f 81       	ldd	r22, Y+7	; 0x07
    167c:	78 85       	ldd	r23, Y+8	; 0x08
    167e:	89 85       	ldd	r24, Y+9	; 0x09
    1680:	9a 85       	ldd	r25, Y+10	; 0x0a
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e8       	ldi	r20, 0x80	; 128
    1688:	5f e3       	ldi	r21, 0x3F	; 63
    168a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    168e:	88 23       	and	r24, r24
    1690:	2c f4       	brge	.+10     	; 0x169c <Step1+0x2ee>
		__ticks = 1;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	9e 83       	std	Y+6, r25	; 0x06
    1698:	8d 83       	std	Y+5, r24	; 0x05
    169a:	3f c0       	rjmp	.+126    	; 0x171a <Step1+0x36c>
	else if (__tmp > 65535)
    169c:	6f 81       	ldd	r22, Y+7	; 0x07
    169e:	78 85       	ldd	r23, Y+8	; 0x08
    16a0:	89 85       	ldd	r24, Y+9	; 0x09
    16a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	3f ef       	ldi	r19, 0xFF	; 255
    16a8:	4f e7       	ldi	r20, 0x7F	; 127
    16aa:	57 e4       	ldi	r21, 0x47	; 71
    16ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16b0:	18 16       	cp	r1, r24
    16b2:	4c f5       	brge	.+82     	; 0x1706 <Step1+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e2       	ldi	r20, 0x20	; 32
    16c2:	51 e4       	ldi	r21, 0x41	; 65
    16c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	bc 01       	movw	r22, r24
    16ce:	cd 01       	movw	r24, r26
    16d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	9e 83       	std	Y+6, r25	; 0x06
    16da:	8d 83       	std	Y+5, r24	; 0x05
    16dc:	0f c0       	rjmp	.+30     	; 0x16fc <Step1+0x34e>
    16de:	88 ec       	ldi	r24, 0xC8	; 200
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	9c 83       	std	Y+4, r25	; 0x04
    16e4:	8b 83       	std	Y+3, r24	; 0x03
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	f1 f7       	brne	.-4      	; 0x16ea <Step1+0x33c>
    16ee:	9c 83       	std	Y+4, r25	; 0x04
    16f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f2:	8d 81       	ldd	r24, Y+5	; 0x05
    16f4:	9e 81       	ldd	r25, Y+6	; 0x06
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	9e 83       	std	Y+6, r25	; 0x06
    16fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16fc:	8d 81       	ldd	r24, Y+5	; 0x05
    16fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1700:	00 97       	sbiw	r24, 0x00	; 0
    1702:	69 f7       	brne	.-38     	; 0x16de <Step1+0x330>
    1704:	14 c0       	rjmp	.+40     	; 0x172e <Step1+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1706:	6f 81       	ldd	r22, Y+7	; 0x07
    1708:	78 85       	ldd	r23, Y+8	; 0x08
    170a:	89 85       	ldd	r24, Y+9	; 0x09
    170c:	9a 85       	ldd	r25, Y+10	; 0x0a
    170e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	9e 83       	std	Y+6, r25	; 0x06
    1718:	8d 83       	std	Y+5, r24	; 0x05
    171a:	8d 81       	ldd	r24, Y+5	; 0x05
    171c:	9e 81       	ldd	r25, Y+6	; 0x06
    171e:	9a 83       	std	Y+2, r25	; 0x02
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	9a 81       	ldd	r25, Y+2	; 0x02
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <Step1+0x378>
    172a:	9a 83       	std	Y+2, r25	; 0x02
    172c:	89 83       	std	Y+1, r24	; 0x01
    /* Display message for user to re-enter the same password */
    LCD_displayString("Please re-enter the same Pass");
    _delay_ms(500);

    /* Read and display the second password entry with '*' masking */
    for (i = 0; i < 5; i++) {
    172e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1730:	9c a5       	ldd	r25, Y+44	; 0x2c
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	9c a7       	std	Y+44, r25	; 0x2c
    1736:	8b a7       	std	Y+43, r24	; 0x2b
    1738:	8b a5       	ldd	r24, Y+43	; 0x2b
    173a:	9c a5       	ldd	r25, Y+44	; 0x2c
    173c:	85 30       	cpi	r24, 0x05	; 5
    173e:	91 05       	cpc	r25, r1
    1740:	0c f4       	brge	.+2      	; 0x1744 <Step1+0x396>
    1742:	73 cf       	rjmp	.-282    	; 0x162a <Step1+0x27c>
        pass2[i] = KEYPAD_getPressedKey();
        LCD_displayStringRowColumn(1, i, "*");
        _delay_ms(500);
    }
    pass2[5] = '#';
    1744:	83 e2       	ldi	r24, 0x23	; 35
    1746:	80 93 21 01 	sts	0x0121, r24

    /* Wait until the '=' key is pressed */
    while (KEYPAD_getPressedKey() != '=');
    174a:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <KEYPAD_getPressedKey>
    174e:	8d 33       	cpi	r24, 0x3D	; 61
    1750:	e1 f7       	brne	.-8      	; 0x174a <Step1+0x39c>

    /* Send the first password to the receiver (CONTROL ECU) */
    sendPassword1();
    1752:	0e 94 b6 0b 	call	0x176c	; 0x176c <sendPassword1>
}
    1756:	ae 96       	adiw	r28, 0x2e	; 46
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	08 95       	ret

0000176c <sendPassword1>:

/* Function to send the first password to the receiver */
void sendPassword1(void) {
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    /* Send CHANGE_PASSWORD_COMMAND to receiver */
    UART_sendByte(CHANGE_PASSWORD_COMMAND);
    1774:	81 e1       	ldi	r24, 0x11	; 17
    1776:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <UART_sendByte>

    /* Wait until the receiver is ready */
    while (UART_recieveByte() != ready);
    177a:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <UART_recieveByte>
    177e:	8a 3a       	cpi	r24, 0xAA	; 170
    1780:	e1 f7       	brne	.-8      	; 0x177a <sendPassword1+0xe>

    /* Send the second password to receiver */
    UART_sendString(pass2);
    1782:	8c e1       	ldi	r24, 0x1C	; 28
    1784:	91 e0       	ldi	r25, 0x01	; 1
    1786:	0e 94 da 16 	call	0x2db4	; 0x2db4 <UART_sendString>

    /* Proceed to send the second part of the password */
    sendPassword2();
    178a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <sendPassword2>
}
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <sendPassword2>:

/* Function to send the second part of the password and compare */
void sendPassword2(void) {
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	6d 97       	sbiw	r28, 0x1d	; 29
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	cd bf       	out	0x3d, r28	; 61
    uint8 received_compare_result;

    /* Wait until the receiver is ready */
    while (UART_recieveByte() != ready);
    17a8:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <UART_recieveByte>
    17ac:	8a 3a       	cpi	r24, 0xAA	; 170
    17ae:	e1 f7       	brne	.-8      	; 0x17a8 <sendPassword2+0x14>

    /* Send the first password to compare */
    UART_sendString(pass);
    17b0:	80 e1       	ldi	r24, 0x10	; 16
    17b2:	91 e0       	ldi	r25, 0x01	; 1
    17b4:	0e 94 da 16 	call	0x2db4	; 0x2db4 <UART_sendString>

    /* Get the received password compare result from UART */
    received_compare_result = UART_recieveByte();
    17b8:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <UART_recieveByte>
    17bc:	8d 8f       	std	Y+29, r24	; 0x1d

    /* If the two entered passwords do not match */
    if (received_compare_result == not_match) {
    17be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17c0:	88 23       	and	r24, r24
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <sendPassword2+0x32>
    17c4:	7b c0       	rjmp	.+246    	; 0x18bc <sendPassword2+0x128>
        /* Display error message and retry Step1 */
        LCD_clearScreen();
    17c6:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <LCD_clearScreen>
        LCD_displayString("not match");
    17ca:	80 e9       	ldi	r24, 0x90	; 144
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_displayString>
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	aa e7       	ldi	r26, 0x7A	; 122
    17d8:	b4 e4       	ldi	r27, 0x44	; 68
    17da:	89 8f       	std	Y+25, r24	; 0x19
    17dc:	9a 8f       	std	Y+26, r25	; 0x1a
    17de:	ab 8f       	std	Y+27, r26	; 0x1b
    17e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e2:	69 8d       	ldd	r22, Y+25	; 0x19
    17e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	4a ef       	ldi	r20, 0xFA	; 250
    17f0:	54 e4       	ldi	r21, 0x44	; 68
    17f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	8d 8b       	std	Y+21, r24	; 0x15
    17fc:	9e 8b       	std	Y+22, r25	; 0x16
    17fe:	af 8b       	std	Y+23, r26	; 0x17
    1800:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1802:	6d 89       	ldd	r22, Y+21	; 0x15
    1804:	7e 89       	ldd	r23, Y+22	; 0x16
    1806:	8f 89       	ldd	r24, Y+23	; 0x17
    1808:	98 8d       	ldd	r25, Y+24	; 0x18
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	40 e8       	ldi	r20, 0x80	; 128
    1810:	5f e3       	ldi	r21, 0x3F	; 63
    1812:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1816:	88 23       	and	r24, r24
    1818:	2c f4       	brge	.+10     	; 0x1824 <sendPassword2+0x90>
		__ticks = 1;
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	9c 8b       	std	Y+20, r25	; 0x14
    1820:	8b 8b       	std	Y+19, r24	; 0x13
    1822:	3f c0       	rjmp	.+126    	; 0x18a2 <sendPassword2+0x10e>
	else if (__tmp > 65535)
    1824:	6d 89       	ldd	r22, Y+21	; 0x15
    1826:	7e 89       	ldd	r23, Y+22	; 0x16
    1828:	8f 89       	ldd	r24, Y+23	; 0x17
    182a:	98 8d       	ldd	r25, Y+24	; 0x18
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	3f ef       	ldi	r19, 0xFF	; 255
    1830:	4f e7       	ldi	r20, 0x7F	; 127
    1832:	57 e4       	ldi	r21, 0x47	; 71
    1834:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1838:	18 16       	cp	r1, r24
    183a:	4c f5       	brge	.+82     	; 0x188e <sendPassword2+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183c:	69 8d       	ldd	r22, Y+25	; 0x19
    183e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1840:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1842:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e2       	ldi	r20, 0x20	; 32
    184a:	51 e4       	ldi	r21, 0x41	; 65
    184c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	bc 01       	movw	r22, r24
    1856:	cd 01       	movw	r24, r26
    1858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	9c 8b       	std	Y+20, r25	; 0x14
    1862:	8b 8b       	std	Y+19, r24	; 0x13
    1864:	0f c0       	rjmp	.+30     	; 0x1884 <sendPassword2+0xf0>
    1866:	88 ec       	ldi	r24, 0xC8	; 200
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	9a 8b       	std	Y+18, r25	; 0x12
    186c:	89 8b       	std	Y+17, r24	; 0x11
    186e:	89 89       	ldd	r24, Y+17	; 0x11
    1870:	9a 89       	ldd	r25, Y+18	; 0x12
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	f1 f7       	brne	.-4      	; 0x1872 <sendPassword2+0xde>
    1876:	9a 8b       	std	Y+18, r25	; 0x12
    1878:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187a:	8b 89       	ldd	r24, Y+19	; 0x13
    187c:	9c 89       	ldd	r25, Y+20	; 0x14
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	9c 8b       	std	Y+20, r25	; 0x14
    1882:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1884:	8b 89       	ldd	r24, Y+19	; 0x13
    1886:	9c 89       	ldd	r25, Y+20	; 0x14
    1888:	00 97       	sbiw	r24, 0x00	; 0
    188a:	69 f7       	brne	.-38     	; 0x1866 <sendPassword2+0xd2>
    188c:	14 c0       	rjmp	.+40     	; 0x18b6 <sendPassword2+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188e:	6d 89       	ldd	r22, Y+21	; 0x15
    1890:	7e 89       	ldd	r23, Y+22	; 0x16
    1892:	8f 89       	ldd	r24, Y+23	; 0x17
    1894:	98 8d       	ldd	r25, Y+24	; 0x18
    1896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	9c 8b       	std	Y+20, r25	; 0x14
    18a0:	8b 8b       	std	Y+19, r24	; 0x13
    18a2:	8b 89       	ldd	r24, Y+19	; 0x13
    18a4:	9c 89       	ldd	r25, Y+20	; 0x14
    18a6:	98 8b       	std	Y+16, r25	; 0x10
    18a8:	8f 87       	std	Y+15, r24	; 0x0f
    18aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ac:	98 89       	ldd	r25, Y+16	; 0x10
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	f1 f7       	brne	.-4      	; 0x18ae <sendPassword2+0x11a>
    18b2:	98 8b       	std	Y+16, r25	; 0x10
    18b4:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1000);
        Step1();
    18b6:	0e 94 d7 09 	call	0x13ae	; 0x13ae <Step1>
    18ba:	7c c0       	rjmp	.+248    	; 0x19b4 <sendPassword2+0x220>
    } else if (received_compare_result == match) {
    18bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18be:	81 30       	cpi	r24, 0x01	; 1
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <sendPassword2+0x130>
    18c2:	78 c0       	rjmp	.+240    	; 0x19b4 <sendPassword2+0x220>
        /* Display success message */
        LCD_clearScreen();
    18c4:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <LCD_clearScreen>
        LCD_displayString("match");
    18c8:	8a e9       	ldi	r24, 0x9A	; 154
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_displayString>
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	aa e7       	ldi	r26, 0x7A	; 122
    18d6:	b4 e4       	ldi	r27, 0x44	; 68
    18d8:	8b 87       	std	Y+11, r24	; 0x0b
    18da:	9c 87       	std	Y+12, r25	; 0x0c
    18dc:	ad 87       	std	Y+13, r26	; 0x0d
    18de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    18e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    18e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	4a ef       	ldi	r20, 0xFA	; 250
    18ee:	54 e4       	ldi	r21, 0x44	; 68
    18f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	8f 83       	std	Y+7, r24	; 0x07
    18fa:	98 87       	std	Y+8, r25	; 0x08
    18fc:	a9 87       	std	Y+9, r26	; 0x09
    18fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1900:	6f 81       	ldd	r22, Y+7	; 0x07
    1902:	78 85       	ldd	r23, Y+8	; 0x08
    1904:	89 85       	ldd	r24, Y+9	; 0x09
    1906:	9a 85       	ldd	r25, Y+10	; 0x0a
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e8       	ldi	r20, 0x80	; 128
    190e:	5f e3       	ldi	r21, 0x3F	; 63
    1910:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1914:	88 23       	and	r24, r24
    1916:	2c f4       	brge	.+10     	; 0x1922 <sendPassword2+0x18e>
		__ticks = 1;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	9e 83       	std	Y+6, r25	; 0x06
    191e:	8d 83       	std	Y+5, r24	; 0x05
    1920:	3f c0       	rjmp	.+126    	; 0x19a0 <sendPassword2+0x20c>
	else if (__tmp > 65535)
    1922:	6f 81       	ldd	r22, Y+7	; 0x07
    1924:	78 85       	ldd	r23, Y+8	; 0x08
    1926:	89 85       	ldd	r24, Y+9	; 0x09
    1928:	9a 85       	ldd	r25, Y+10	; 0x0a
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	3f ef       	ldi	r19, 0xFF	; 255
    192e:	4f e7       	ldi	r20, 0x7F	; 127
    1930:	57 e4       	ldi	r21, 0x47	; 71
    1932:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1936:	18 16       	cp	r1, r24
    1938:	4c f5       	brge	.+82     	; 0x198c <sendPassword2+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    193a:	6b 85       	ldd	r22, Y+11	; 0x0b
    193c:	7c 85       	ldd	r23, Y+12	; 0x0c
    193e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1940:	9e 85       	ldd	r25, Y+14	; 0x0e
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	40 e2       	ldi	r20, 0x20	; 32
    1948:	51 e4       	ldi	r21, 0x41	; 65
    194a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	bc 01       	movw	r22, r24
    1954:	cd 01       	movw	r24, r26
    1956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	9e 83       	std	Y+6, r25	; 0x06
    1960:	8d 83       	std	Y+5, r24	; 0x05
    1962:	0f c0       	rjmp	.+30     	; 0x1982 <sendPassword2+0x1ee>
    1964:	88 ec       	ldi	r24, 0xC8	; 200
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	9c 83       	std	Y+4, r25	; 0x04
    196a:	8b 83       	std	Y+3, r24	; 0x03
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	9c 81       	ldd	r25, Y+4	; 0x04
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <sendPassword2+0x1dc>
    1974:	9c 83       	std	Y+4, r25	; 0x04
    1976:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	9e 83       	std	Y+6, r25	; 0x06
    1980:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1982:	8d 81       	ldd	r24, Y+5	; 0x05
    1984:	9e 81       	ldd	r25, Y+6	; 0x06
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	69 f7       	brne	.-38     	; 0x1964 <sendPassword2+0x1d0>
    198a:	14 c0       	rjmp	.+40     	; 0x19b4 <sendPassword2+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    198c:	6f 81       	ldd	r22, Y+7	; 0x07
    198e:	78 85       	ldd	r23, Y+8	; 0x08
    1990:	89 85       	ldd	r24, Y+9	; 0x09
    1992:	9a 85       	ldd	r25, Y+10	; 0x0a
    1994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	9e 83       	std	Y+6, r25	; 0x06
    199e:	8d 83       	std	Y+5, r24	; 0x05
    19a0:	8d 81       	ldd	r24, Y+5	; 0x05
    19a2:	9e 81       	ldd	r25, Y+6	; 0x06
    19a4:	9a 83       	std	Y+2, r25	; 0x02
    19a6:	89 83       	std	Y+1, r24	; 0x01
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	9a 81       	ldd	r25, Y+2	; 0x02
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <sendPassword2+0x218>
    19b0:	9a 83       	std	Y+2, r25	; 0x02
    19b2:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(1000);
        return;
    }
}
    19b4:	6d 96       	adiw	r28, 0x1d	; 29
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	de bf       	out	0x3e, r29	; 62
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	cd bf       	out	0x3d, r28	; 61
    19c0:	cf 91       	pop	r28
    19c2:	df 91       	pop	r29
    19c4:	08 95       	ret

000019c6 <comparepassword>:

/* Function to compare the entered password with the stored password */
void comparepassword(void) {
    19c6:	df 93       	push	r29
    19c8:	cf 93       	push	r28
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    /* Send Compare_Password command to initiate password comparison */
    UART_sendByte(Compare_Password);
    19ce:	8a ea       	ldi	r24, 0xAA	; 170
    19d0:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <UART_sendByte>

    /* Wait until the receiver is ready for password comparison */
    while (UART_recieveByte() != Compare_Password);
    19d4:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <UART_recieveByte>
    19d8:	8a 3a       	cpi	r24, 0xAA	; 170
    19da:	e1 f7       	brne	.-8      	; 0x19d4 <comparepassword+0xe>

    /* Send the third password to compare */
    UART_sendString(pass3);
    19dc:	86 e1       	ldi	r24, 0x16	; 22
    19de:	91 e0       	ldi	r25, 0x01	; 1
    19e0:	0e 94 da 16 	call	0x2db4	; 0x2db4 <UART_sendString>
}
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <step2>:

/* Function to perform matching the password with the saved one */
uint8 step2(void) {
    19ea:	0f 93       	push	r16
    19ec:	1f 93       	push	r17
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	ac 97       	sbiw	r28, 0x2c	; 44
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	de bf       	out	0x3e, r29	; 62
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	cd bf       	out	0x3d, r28	; 61
    uint8 count = 0;
    1a02:	19 a2       	std	Y+33, r1	; 0x21
    1a04:	e6 c0       	rjmp	.+460    	; 0x1bd2 <step2+0x1e8>
    uint8 compare_value;

    /* Loop for a maximum of 3 attempts */
    while (count < 3) {
        LCD_clearScreen();
    1a06:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <LCD_clearScreen>
        LCD_displayString("plz enter pass:");
    1a0a:	80 e6       	ldi	r24, 0x60	; 96
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_displayString>
        int i = 0;
    1a12:	1e 8e       	std	Y+30, r1	; 0x1e
    1a14:	1d 8e       	std	Y+29, r1	; 0x1d

        /* Wait until valid key is pressed (not '+', '-', '=' or 17) */
        while (KEYPAD_getPressedKey() == '+' | KEYPAD_getPressedKey() == '-' | KEYPAD_getPressedKey() == '=' | KEYPAD_getPressedKey() == 17);
    1a16:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <KEYPAD_getPressedKey>
    1a1a:	1c a6       	std	Y+44, r1	; 0x2c
    1a1c:	8b 32       	cpi	r24, 0x2B	; 43
    1a1e:	11 f4       	brne	.+4      	; 0x1a24 <step2+0x3a>
    1a20:	21 e0       	ldi	r18, 0x01	; 1
    1a22:	2c a7       	std	Y+44, r18	; 0x2c
    1a24:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <KEYPAD_getPressedKey>
    1a28:	1b a6       	std	Y+43, r1	; 0x2b
    1a2a:	8d 32       	cpi	r24, 0x2D	; 45
    1a2c:	11 f4       	brne	.+4      	; 0x1a32 <step2+0x48>
    1a2e:	31 e0       	ldi	r19, 0x01	; 1
    1a30:	3b a7       	std	Y+43, r19	; 0x2b
    1a32:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a34:	9b a5       	ldd	r25, Y+43	; 0x2b
    1a36:	89 2b       	or	r24, r25
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	3a a7       	std	Y+42, r19	; 0x2a
    1a3e:	29 a7       	std	Y+41, r18	; 0x29
    1a40:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <KEYPAD_getPressedKey>
    1a44:	18 a6       	std	Y+40, r1	; 0x28
    1a46:	1f a2       	std	Y+39, r1	; 0x27
    1a48:	8d 33       	cpi	r24, 0x3D	; 61
    1a4a:	21 f4       	brne	.+8      	; 0x1a54 <step2+0x6a>
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	98 a7       	std	Y+40, r25	; 0x28
    1a52:	8f a3       	std	Y+39, r24	; 0x27
    1a54:	29 a5       	ldd	r18, Y+41	; 0x29
    1a56:	3a a5       	ldd	r19, Y+42	; 0x2a
    1a58:	8f a1       	ldd	r24, Y+39	; 0x27
    1a5a:	98 a5       	ldd	r25, Y+40	; 0x28
    1a5c:	28 2b       	or	r18, r24
    1a5e:	39 2b       	or	r19, r25
    1a60:	3e a3       	std	Y+38, r19	; 0x26
    1a62:	2d a3       	std	Y+37, r18	; 0x25
    1a64:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <KEYPAD_getPressedKey>
    1a68:	1c a2       	std	Y+36, r1	; 0x24
    1a6a:	1b a2       	std	Y+35, r1	; 0x23
    1a6c:	81 31       	cpi	r24, 0x11	; 17
    1a6e:	21 f4       	brne	.+8      	; 0x1a78 <step2+0x8e>
    1a70:	21 e0       	ldi	r18, 0x01	; 1
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	3c a3       	std	Y+36, r19	; 0x24
    1a76:	2b a3       	std	Y+35, r18	; 0x23
    1a78:	8d a1       	ldd	r24, Y+37	; 0x25
    1a7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a7c:	2b a1       	ldd	r18, Y+35	; 0x23
    1a7e:	3c a1       	ldd	r19, Y+36	; 0x24
    1a80:	82 2b       	or	r24, r18
    1a82:	93 2b       	or	r25, r19
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	39 f6       	brne	.-114    	; 0x1a16 <step2+0x2c>

        /* Read and display the third password entry with '*' masking */
        for (i = 0; i < 5; i++) {
    1a88:	1e 8e       	std	Y+30, r1	; 0x1e
    1a8a:	1d 8e       	std	Y+29, r1	; 0x1d
    1a8c:	87 c0       	rjmp	.+270    	; 0x1b9c <step2+0x1b2>
            pass3[i] = KEYPAD_getPressedKey();
    1a8e:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1a90:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1a92:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <KEYPAD_getPressedKey>
    1a96:	f8 01       	movw	r30, r16
    1a98:	ea 5e       	subi	r30, 0xEA	; 234
    1a9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a9c:	80 83       	st	Z, r24
            LCD_displayStringRowColumn(1, i, "*");
    1a9e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1aa0:	20 e7       	ldi	r18, 0x70	; 112
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	69 2f       	mov	r22, r25
    1aa8:	a9 01       	movw	r20, r18
    1aaa:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_displayStringRowColumn>
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	aa ef       	ldi	r26, 0xFA	; 250
    1ab4:	b3 e4       	ldi	r27, 0x43	; 67
    1ab6:	89 8f       	std	Y+25, r24	; 0x19
    1ab8:	9a 8f       	std	Y+26, r25	; 0x1a
    1aba:	ab 8f       	std	Y+27, r26	; 0x1b
    1abc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1abe:	69 8d       	ldd	r22, Y+25	; 0x19
    1ac0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ac2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	4a ef       	ldi	r20, 0xFA	; 250
    1acc:	54 e4       	ldi	r21, 0x44	; 68
    1ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	8d 8b       	std	Y+21, r24	; 0x15
    1ad8:	9e 8b       	std	Y+22, r25	; 0x16
    1ada:	af 8b       	std	Y+23, r26	; 0x17
    1adc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ade:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e8       	ldi	r20, 0x80	; 128
    1aec:	5f e3       	ldi	r21, 0x3F	; 63
    1aee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1af2:	88 23       	and	r24, r24
    1af4:	2c f4       	brge	.+10     	; 0x1b00 <step2+0x116>
		__ticks = 1;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	9c 8b       	std	Y+20, r25	; 0x14
    1afc:	8b 8b       	std	Y+19, r24	; 0x13
    1afe:	3f c0       	rjmp	.+126    	; 0x1b7e <step2+0x194>
	else if (__tmp > 65535)
    1b00:	6d 89       	ldd	r22, Y+21	; 0x15
    1b02:	7e 89       	ldd	r23, Y+22	; 0x16
    1b04:	8f 89       	ldd	r24, Y+23	; 0x17
    1b06:	98 8d       	ldd	r25, Y+24	; 0x18
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	3f ef       	ldi	r19, 0xFF	; 255
    1b0c:	4f e7       	ldi	r20, 0x7F	; 127
    1b0e:	57 e4       	ldi	r21, 0x47	; 71
    1b10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b14:	18 16       	cp	r1, r24
    1b16:	4c f5       	brge	.+82     	; 0x1b6a <step2+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b18:	69 8d       	ldd	r22, Y+25	; 0x19
    1b1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e2       	ldi	r20, 0x20	; 32
    1b26:	51 e4       	ldi	r21, 0x41	; 65
    1b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	bc 01       	movw	r22, r24
    1b32:	cd 01       	movw	r24, r26
    1b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	9c 8b       	std	Y+20, r25	; 0x14
    1b3e:	8b 8b       	std	Y+19, r24	; 0x13
    1b40:	0f c0       	rjmp	.+30     	; 0x1b60 <step2+0x176>
    1b42:	88 ec       	ldi	r24, 0xC8	; 200
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	9a 8b       	std	Y+18, r25	; 0x12
    1b48:	89 8b       	std	Y+17, r24	; 0x11
    1b4a:	89 89       	ldd	r24, Y+17	; 0x11
    1b4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <step2+0x164>
    1b52:	9a 8b       	std	Y+18, r25	; 0x12
    1b54:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b56:	8b 89       	ldd	r24, Y+19	; 0x13
    1b58:	9c 89       	ldd	r25, Y+20	; 0x14
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	9c 8b       	std	Y+20, r25	; 0x14
    1b5e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b60:	8b 89       	ldd	r24, Y+19	; 0x13
    1b62:	9c 89       	ldd	r25, Y+20	; 0x14
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	69 f7       	brne	.-38     	; 0x1b42 <step2+0x158>
    1b68:	14 c0       	rjmp	.+40     	; 0x1b92 <step2+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b70:	98 8d       	ldd	r25, Y+24	; 0x18
    1b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	9c 8b       	std	Y+20, r25	; 0x14
    1b7c:	8b 8b       	std	Y+19, r24	; 0x13
    1b7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b80:	9c 89       	ldd	r25, Y+20	; 0x14
    1b82:	98 8b       	std	Y+16, r25	; 0x10
    1b84:	8f 87       	std	Y+15, r24	; 0x0f
    1b86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b88:	98 89       	ldd	r25, Y+16	; 0x10
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <step2+0x1a0>
    1b8e:	98 8b       	std	Y+16, r25	; 0x10
    1b90:	8f 87       	std	Y+15, r24	; 0x0f

        /* Wait until valid key is pressed (not '+', '-', '=' or 17) */
        while (KEYPAD_getPressedKey() == '+' | KEYPAD_getPressedKey() == '-' | KEYPAD_getPressedKey() == '=' | KEYPAD_getPressedKey() == 17);

        /* Read and display the third password entry with '*' masking */
        for (i = 0; i < 5; i++) {
    1b92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b94:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b96:	01 96       	adiw	r24, 0x01	; 1
    1b98:	9e 8f       	std	Y+30, r25	; 0x1e
    1b9a:	8d 8f       	std	Y+29, r24	; 0x1d
    1b9c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b9e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ba0:	85 30       	cpi	r24, 0x05	; 5
    1ba2:	91 05       	cpc	r25, r1
    1ba4:	0c f4       	brge	.+2      	; 0x1ba8 <step2+0x1be>
    1ba6:	73 cf       	rjmp	.-282    	; 0x1a8e <step2+0xa4>
            pass3[i] = KEYPAD_getPressedKey();
            LCD_displayStringRowColumn(1, i, "*");
            _delay_ms(500);
        }
        pass3[5] = '#';
    1ba8:	83 e2       	ldi	r24, 0x23	; 35
    1baa:	80 93 1b 01 	sts	0x011B, r24

        /* Wait until the '=' key is pressed */
        while (KEYPAD_getPressedKey() != '=');
    1bae:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <KEYPAD_getPressedKey>
    1bb2:	8d 33       	cpi	r24, 0x3D	; 61
    1bb4:	e1 f7       	brne	.-8      	; 0x1bae <step2+0x1c4>

        /* Compare the entered password with the stored one */
        comparepassword();
    1bb6:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <comparepassword>

        /* Receive the comparison result from UART */
        compare_value = UART_recieveByte();
    1bba:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <UART_recieveByte>
    1bbe:	88 a3       	std	Y+32, r24	; 0x20

        /* If the entered password matches */
        if (compare_value == match) {
    1bc0:	88 a1       	ldd	r24, Y+32	; 0x20
    1bc2:	81 30       	cpi	r24, 0x01	; 1
    1bc4:	19 f4       	brne	.+6      	; 0x1bcc <step2+0x1e2>
            return match;
    1bc6:	31 e0       	ldi	r19, 0x01	; 1
    1bc8:	3a a3       	std	Y+34, r19	; 0x22
    1bca:	8d c0       	rjmp	.+282    	; 0x1ce6 <step2+0x2fc>
        }
        count++;
    1bcc:	89 a1       	ldd	r24, Y+33	; 0x21
    1bce:	8f 5f       	subi	r24, 0xFF	; 255
    1bd0:	89 a3       	std	Y+33, r24	; 0x21
uint8 step2(void) {
    uint8 count = 0;
    uint8 compare_value;

    /* Loop for a maximum of 3 attempts */
    while (count < 3) {
    1bd2:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd4:	83 30       	cpi	r24, 0x03	; 3
    1bd6:	08 f4       	brcc	.+2      	; 0x1bda <step2+0x1f0>
    1bd8:	16 cf       	rjmp	.-468    	; 0x1a06 <step2+0x1c>
        }
        count++;
    }

    /* If the password entries exceeded the limit, send an ALARM_COMMAND */
    UART_sendByte(ALARM_COMMAND);
    1bda:	82 e1       	ldi	r24, 0x12	; 18
    1bdc:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <UART_sendByte>
    LCD_clearScreen();
    1be0:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <LCD_clearScreen>
    LCD_displayString("error");
    1be4:	80 ea       	ldi	r24, 0xA0	; 160
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_displayString>
    /* Delay one min error */
    uint8 i = 0;
    1bec:	1f 8e       	std	Y+31, r1	; 0x1f
    for (i = 0; i < 60; i++) {
    1bee:	1f 8e       	std	Y+31, r1	; 0x1f
    1bf0:	75 c0       	rjmp	.+234    	; 0x1cdc <step2+0x2f2>
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	aa e7       	ldi	r26, 0x7A	; 122
    1bf8:	b4 e4       	ldi	r27, 0x44	; 68
    1bfa:	8b 87       	std	Y+11, r24	; 0x0b
    1bfc:	9c 87       	std	Y+12, r25	; 0x0c
    1bfe:	ad 87       	std	Y+13, r26	; 0x0d
    1c00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	4a ef       	ldi	r20, 0xFA	; 250
    1c10:	54 e4       	ldi	r21, 0x44	; 68
    1c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	8f 83       	std	Y+7, r24	; 0x07
    1c1c:	98 87       	std	Y+8, r25	; 0x08
    1c1e:	a9 87       	std	Y+9, r26	; 0x09
    1c20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c22:	6f 81       	ldd	r22, Y+7	; 0x07
    1c24:	78 85       	ldd	r23, Y+8	; 0x08
    1c26:	89 85       	ldd	r24, Y+9	; 0x09
    1c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	40 e8       	ldi	r20, 0x80	; 128
    1c30:	5f e3       	ldi	r21, 0x3F	; 63
    1c32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c36:	88 23       	and	r24, r24
    1c38:	2c f4       	brge	.+10     	; 0x1c44 <step2+0x25a>
		__ticks = 1;
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	9e 83       	std	Y+6, r25	; 0x06
    1c40:	8d 83       	std	Y+5, r24	; 0x05
    1c42:	3f c0       	rjmp	.+126    	; 0x1cc2 <step2+0x2d8>
	else if (__tmp > 65535)
    1c44:	6f 81       	ldd	r22, Y+7	; 0x07
    1c46:	78 85       	ldd	r23, Y+8	; 0x08
    1c48:	89 85       	ldd	r24, Y+9	; 0x09
    1c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	3f ef       	ldi	r19, 0xFF	; 255
    1c50:	4f e7       	ldi	r20, 0x7F	; 127
    1c52:	57 e4       	ldi	r21, 0x47	; 71
    1c54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c58:	18 16       	cp	r1, r24
    1c5a:	4c f5       	brge	.+82     	; 0x1cae <step2+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e2       	ldi	r20, 0x20	; 32
    1c6a:	51 e4       	ldi	r21, 0x41	; 65
    1c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	bc 01       	movw	r22, r24
    1c76:	cd 01       	movw	r24, r26
    1c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	9e 83       	std	Y+6, r25	; 0x06
    1c82:	8d 83       	std	Y+5, r24	; 0x05
    1c84:	0f c0       	rjmp	.+30     	; 0x1ca4 <step2+0x2ba>
    1c86:	88 ec       	ldi	r24, 0xC8	; 200
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	9c 83       	std	Y+4, r25	; 0x04
    1c8c:	8b 83       	std	Y+3, r24	; 0x03
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <step2+0x2a8>
    1c96:	9c 83       	std	Y+4, r25	; 0x04
    1c98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	9e 83       	std	Y+6, r25	; 0x06
    1ca2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	69 f7       	brne	.-38     	; 0x1c86 <step2+0x29c>
    1cac:	14 c0       	rjmp	.+40     	; 0x1cd6 <step2+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cae:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb0:	78 85       	ldd	r23, Y+8	; 0x08
    1cb2:	89 85       	ldd	r24, Y+9	; 0x09
    1cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	9e 83       	std	Y+6, r25	; 0x06
    1cc0:	8d 83       	std	Y+5, r24	; 0x05
    1cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc6:	9a 83       	std	Y+2, r25	; 0x02
    1cc8:	89 83       	std	Y+1, r24	; 0x01
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	f1 f7       	brne	.-4      	; 0x1cce <step2+0x2e4>
    1cd2:	9a 83       	std	Y+2, r25	; 0x02
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    1cd6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cd8:	8f 5f       	subi	r24, 0xFF	; 255
    1cda:	8f 8f       	std	Y+31, r24	; 0x1f
    1cdc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cde:	8c 33       	cpi	r24, 0x3C	; 60
    1ce0:	08 f4       	brcc	.+2      	; 0x1ce4 <step2+0x2fa>
    1ce2:	87 cf       	rjmp	.-242    	; 0x1bf2 <step2+0x208>
        _delay_ms(1000);
    }
    return not_match;
    1ce4:	1a a2       	std	Y+34, r1	; 0x22
    1ce6:	8a a1       	ldd	r24, Y+34	; 0x22
}
    1ce8:	ac 96       	adiw	r28, 0x2c	; 44
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	1f 91       	pop	r17
    1cfa:	0f 91       	pop	r16
    1cfc:	08 95       	ret

00001cfe <step3>:

/* Function to Handle the motor open and close state */
void step3(void) {
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62

    if (Tick == 0) {
    1d06:	80 91 23 01 	lds	r24, 0x0123
    1d0a:	88 23       	and	r24, r24
    1d0c:	39 f4       	brne	.+14     	; 0x1d1c <step3+0x1e>
        LCD_clearScreen();
    1d0e:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <LCD_clearScreen>
        LCD_displayString("Door is Unlocking");
    1d12:	86 ea       	ldi	r24, 0xA6	; 166
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_displayString>
    1d1a:	1f c0       	rjmp	.+62     	; 0x1d5a <step3+0x5c>
    } else if (Tick == 5) {
    1d1c:	80 91 23 01 	lds	r24, 0x0123
    1d20:	85 30       	cpi	r24, 0x05	; 5
    1d22:	39 f4       	brne	.+14     	; 0x1d32 <step3+0x34>
        LCD_clearScreen();
    1d24:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <LCD_clearScreen>
        LCD_displayString("Door is Unlocked");
    1d28:	88 eb       	ldi	r24, 0xB8	; 184
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_displayString>
    1d30:	14 c0       	rjmp	.+40     	; 0x1d5a <step3+0x5c>
    } else if (Tick == 6) {
    1d32:	80 91 23 01 	lds	r24, 0x0123
    1d36:	86 30       	cpi	r24, 0x06	; 6
    1d38:	39 f4       	brne	.+14     	; 0x1d48 <step3+0x4a>
        LCD_clearScreen();
    1d3a:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <LCD_clearScreen>
        LCD_displayString("Door is locking");
    1d3e:	89 ec       	ldi	r24, 0xC9	; 201
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_displayString>
    1d46:	09 c0       	rjmp	.+18     	; 0x1d5a <step3+0x5c>
    } else if (Tick == 11) {
    1d48:	80 91 23 01 	lds	r24, 0x0123
    1d4c:	8b 30       	cpi	r24, 0x0B	; 11
    1d4e:	29 f4       	brne	.+10     	; 0x1d5a <step3+0x5c>
        /* Deinitialize Timer1 and reset Tick */
        Timer1_deInit();
    1d50:	0e 94 ff 05 	call	0xbfe	; 0xbfe <Timer1_deInit>
        Tick = -1;
    1d54:	8f ef       	ldi	r24, 0xFF	; 255
    1d56:	80 93 23 01 	sts	0x0123, r24
    }
    Tick++;
    1d5a:	80 91 23 01 	lds	r24, 0x0123
    1d5e:	8f 5f       	subi	r24, 0xFF	; 255
    1d60:	80 93 23 01 	sts	0x0123, r24
}
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	08 95       	ret

00001d6a <main>:
/* Global variables */
extern uint8 comm = 0, Tick;
UART_ConfigType UART_ptr;
Timer1_ConfigType TIMER_ptr;

int main(void) {
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
    1d72:	2e 97       	sbiw	r28, 0x0e	; 14
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    /* Timer1 configuration */
    TIMER_ptr.mode = compare;
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	80 93 2d 01 	sts	0x012D, r24
    TIMER_ptr.compare_value = 23440; // 3 seconds
    1d84:	80 e9       	ldi	r24, 0x90	; 144
    1d86:	9b e5       	ldi	r25, 0x5B	; 91
    1d88:	90 93 2b 01 	sts	0x012B, r25
    1d8c:	80 93 2a 01 	sts	0x012A, r24
    TIMER_ptr.initial_value = 0;
    1d90:	10 92 29 01 	sts	0x0129, r1
    1d94:	10 92 28 01 	sts	0x0128, r1
    TIMER_ptr.prescaler = F_CPU_1024;
    1d98:	85 e0       	ldi	r24, 0x05	; 5
    1d9a:	80 93 2c 01 	sts	0x012C, r24
    Timer1_setCallBack(step3);
    1d9e:	8f e7       	ldi	r24, 0x7F	; 127
    1da0:	9e e0       	ldi	r25, 0x0E	; 14
    1da2:	0e 94 17 06 	call	0xc2e	; 0xc2e <Timer1_setCallBack>

    /* UART configuration */
    UART_ptr.baud_rate = UART_BAUD_9600;
    1da6:	10 92 27 01 	sts	0x0127, r1
    UART_ptr.bit_data = UART_8_BITS;
    1daa:	83 e0       	ldi	r24, 0x03	; 3
    1dac:	80 93 24 01 	sts	0x0124, r24
    UART_ptr.parity = UART_PARITY_NONE;
    1db0:	10 92 25 01 	sts	0x0125, r1
    UART_ptr.stop_bit = UART_STOP_1_BIT;
    1db4:	10 92 26 01 	sts	0x0126, r1
    UART_init(&UART_ptr);
    1db8:	84 e2       	ldi	r24, 0x24	; 36
    1dba:	91 e0       	ldi	r25, 0x01	; 1
    1dbc:	0e 94 44 16 	call	0x2c88	; 0x2c88 <UART_init>

    /* Initialize LCD and execute Step1 */
    LCD_init();
    1dc0:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_init>
    Step1();
    1dc4:	0e 94 d7 09 	call	0x13ae	; 0x13ae <Step1>

    while (1) {
        LCD_clearScreen();
    1dc8:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <LCD_clearScreen>
        LCD_displayString("+ : Open Door");
    1dcc:	89 ed       	ldi	r24, 0xD9	; 217
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_displayString>
        LCD_displayStringRowColumn(1, 0, "- : change pass ");
    1dd4:	27 ee       	ldi	r18, 0xE7	; 231
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	60 e0       	ldi	r22, 0x00	; 0
    1ddc:	a9 01       	movw	r20, r18
    1dde:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_displayStringRowColumn>

        /* Get user's command from the keypad */
        comm = KEYPAD_getPressedKey();
    1de2:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <KEYPAD_getPressedKey>
    1de6:	80 93 22 01 	sts	0x0122, r24

        if (comm == '+') {
    1dea:	80 91 22 01 	lds	r24, 0x0122
    1dee:	8b 32       	cpi	r24, 0x2B	; 43
    1df0:	91 f4       	brne	.+36     	; 0x1e16 <main+0xac>
            if (step2() == match) {
    1df2:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <step2>
    1df6:	81 30       	cpi	r24, 0x01	; 1
    1df8:	39 f7       	brne	.-50     	; 0x1dc8 <main+0x5e>
                /* Send OPEN_DOOR_COMMAND to control ECU */
                UART_sendByte(OPEN_DOOR_COMMAND);
    1dfa:	80 e1       	ldi	r24, 0x10	; 16
    1dfc:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <UART_sendByte>
                Timer1_init(&TIMER_ptr);
    1e00:	88 e2       	ldi	r24, 0x28	; 40
    1e02:	91 e0       	ldi	r25, 0x01	; 1
    1e04:	0e 94 a3 05 	call	0xb46	; 0xb46 <Timer1_init>
                step3();
    1e08:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <step3>

                /* Wait until Tick is reset */
                while (Tick != 0);
    1e0c:	80 91 23 01 	lds	r24, 0x0123
    1e10:	88 23       	and	r24, r24
    1e12:	e1 f7       	brne	.-8      	; 0x1e0c <main+0xa2>
    1e14:	d9 cf       	rjmp	.-78     	; 0x1dc8 <main+0x5e>
            }
        } else if (comm == '-') {
    1e16:	80 91 22 01 	lds	r24, 0x0122
    1e1a:	8d 32       	cpi	r24, 0x2D	; 45
    1e1c:	a9 f6       	brne	.-86     	; 0x1dc8 <main+0x5e>
            if (step2() == match) {
    1e1e:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <step2>
    1e22:	81 30       	cpi	r24, 0x01	; 1
    1e24:	89 f6       	brne	.-94     	; 0x1dc8 <main+0x5e>
                LCD_clearScreen();
    1e26:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <LCD_clearScreen>
                LCD_displayString("change pass");
    1e2a:	88 ef       	ldi	r24, 0xF8	; 248
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_displayString>
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	aa e7       	ldi	r26, 0x7A	; 122
    1e38:	b4 e4       	ldi	r27, 0x44	; 68
    1e3a:	8b 87       	std	Y+11, r24	; 0x0b
    1e3c:	9c 87       	std	Y+12, r25	; 0x0c
    1e3e:	ad 87       	std	Y+13, r26	; 0x0d
    1e40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	4a ef       	ldi	r20, 0xFA	; 250
    1e50:	54 e4       	ldi	r21, 0x44	; 68
    1e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	8f 83       	std	Y+7, r24	; 0x07
    1e5c:	98 87       	std	Y+8, r25	; 0x08
    1e5e:	a9 87       	std	Y+9, r26	; 0x09
    1e60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e62:	6f 81       	ldd	r22, Y+7	; 0x07
    1e64:	78 85       	ldd	r23, Y+8	; 0x08
    1e66:	89 85       	ldd	r24, Y+9	; 0x09
    1e68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	40 e8       	ldi	r20, 0x80	; 128
    1e70:	5f e3       	ldi	r21, 0x3F	; 63
    1e72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e76:	88 23       	and	r24, r24
    1e78:	2c f4       	brge	.+10     	; 0x1e84 <main+0x11a>
		__ticks = 1;
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	9e 83       	std	Y+6, r25	; 0x06
    1e80:	8d 83       	std	Y+5, r24	; 0x05
    1e82:	3f c0       	rjmp	.+126    	; 0x1f02 <main+0x198>
	else if (__tmp > 65535)
    1e84:	6f 81       	ldd	r22, Y+7	; 0x07
    1e86:	78 85       	ldd	r23, Y+8	; 0x08
    1e88:	89 85       	ldd	r24, Y+9	; 0x09
    1e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	3f ef       	ldi	r19, 0xFF	; 255
    1e90:	4f e7       	ldi	r20, 0x7F	; 127
    1e92:	57 e4       	ldi	r21, 0x47	; 71
    1e94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e98:	18 16       	cp	r1, r24
    1e9a:	4c f5       	brge	.+82     	; 0x1eee <main+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	40 e2       	ldi	r20, 0x20	; 32
    1eaa:	51 e4       	ldi	r21, 0x41	; 65
    1eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	bc 01       	movw	r22, r24
    1eb6:	cd 01       	movw	r24, r26
    1eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	9e 83       	std	Y+6, r25	; 0x06
    1ec2:	8d 83       	std	Y+5, r24	; 0x05
    1ec4:	0f c0       	rjmp	.+30     	; 0x1ee4 <main+0x17a>
    1ec6:	88 ec       	ldi	r24, 0xC8	; 200
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	9c 83       	std	Y+4, r25	; 0x04
    1ecc:	8b 83       	std	Y+3, r24	; 0x03
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	f1 f7       	brne	.-4      	; 0x1ed2 <main+0x168>
    1ed6:	9c 83       	std	Y+4, r25	; 0x04
    1ed8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eda:	8d 81       	ldd	r24, Y+5	; 0x05
    1edc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	9e 83       	std	Y+6, r25	; 0x06
    1ee2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee8:	00 97       	sbiw	r24, 0x00	; 0
    1eea:	69 f7       	brne	.-38     	; 0x1ec6 <main+0x15c>
    1eec:	14 c0       	rjmp	.+40     	; 0x1f16 <main+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eee:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef0:	78 85       	ldd	r23, Y+8	; 0x08
    1ef2:	89 85       	ldd	r24, Y+9	; 0x09
    1ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	9e 83       	std	Y+6, r25	; 0x06
    1f00:	8d 83       	std	Y+5, r24	; 0x05
    1f02:	8d 81       	ldd	r24, Y+5	; 0x05
    1f04:	9e 81       	ldd	r25, Y+6	; 0x06
    1f06:	9a 83       	std	Y+2, r25	; 0x02
    1f08:	89 83       	std	Y+1, r24	; 0x01
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	f1 f7       	brne	.-4      	; 0x1f0e <main+0x1a4>
    1f12:	9a 83       	std	Y+2, r25	; 0x02
    1f14:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(1000);
                Step1();
    1f16:	0e 94 d7 09 	call	0x13ae	; 0x13ae <Step1>
    1f1a:	56 cf       	rjmp	.-340    	; 0x1dc8 <main+0x5e>

00001f1c <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	60 97       	sbiw	r28, 0x10	; 16
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	60 e0       	ldi	r22, 0x00	; 0
    1f34:	40 e0       	ldi	r20, 0x00	; 0
    1f36:	0e 94 99 06 	call	0xd32	; 0xd32 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	61 e0       	ldi	r22, 0x01	; 1
    1f3e:	40 e0       	ldi	r20, 0x00	; 0
    1f40:	0e 94 99 06 	call	0xd32	; 0xd32 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	62 e0       	ldi	r22, 0x02	; 2
    1f48:	40 e0       	ldi	r20, 0x00	; 0
    1f4a:	0e 94 99 06 	call	0xd32	; 0xd32 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	63 e0       	ldi	r22, 0x03	; 3
    1f52:	40 e0       	ldi	r20, 0x00	; 0
    1f54:	0e 94 99 06 	call	0xd32	; 0xd32 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	64 e0       	ldi	r22, 0x04	; 4
    1f5c:	40 e0       	ldi	r20, 0x00	; 0
    1f5e:	0e 94 99 06 	call	0xd32	; 0xd32 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	65 e0       	ldi	r22, 0x05	; 5
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	0e 94 99 06 	call	0xd32	; 0xd32 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	66 e0       	ldi	r22, 0x06	; 6
    1f70:	40 e0       	ldi	r20, 0x00	; 0
    1f72:	0e 94 99 06 	call	0xd32	; 0xd32 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	67 e0       	ldi	r22, 0x07	; 7
    1f7a:	40 e0       	ldi	r20, 0x00	; 0
    1f7c:	0e 94 99 06 	call	0xd32	; 0xd32 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1f80:	1f 86       	std	Y+15, r1	; 0x0f
    1f82:	ab c0       	rjmp	.+342    	; 0x20da <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f88:	41 e0       	ldi	r20, 0x01	; 1
    1f8a:	0e 94 99 06 	call	0xd32	; 0xd32 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f92:	40 e0       	ldi	r20, 0x00	; 0
    1f94:	0e 94 84 07 	call	0xf08	; 0xf08 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1f98:	18 8a       	std	Y+16, r1	; 0x10
    1f9a:	22 c0       	rjmp	.+68     	; 0x1fe0 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1f9c:	88 89       	ldd	r24, Y+16	; 0x10
    1f9e:	98 2f       	mov	r25, r24
    1fa0:	9c 5f       	subi	r25, 0xFC	; 252
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	69 2f       	mov	r22, r25
    1fa6:	0e 94 6f 08 	call	0x10de	; 0x10de <GPIO_readPin>
    1faa:	88 23       	and	r24, r24
    1fac:	b1 f4       	brne	.+44     	; 0x1fda <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1fae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb0:	88 2f       	mov	r24, r24
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	88 0f       	add	r24, r24
    1fba:	99 1f       	adc	r25, r25
    1fbc:	98 2f       	mov	r25, r24
    1fbe:	88 89       	ldd	r24, Y+16	; 0x10
    1fc0:	89 0f       	add	r24, r25
    1fc2:	8f 5f       	subi	r24, 0xFF	; 255
    1fc4:	0e 94 72 10 	call	0x20e4	; 0x20e4 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1fc8:	60 96       	adiw	r28, 0x10	; 16
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	f8 94       	cli
    1fce:	de bf       	out	0x3e, r29	; 62
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	cd bf       	out	0x3d, r28	; 61
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1fda:	88 89       	ldd	r24, Y+16	; 0x10
    1fdc:	8f 5f       	subi	r24, 0xFF	; 255
    1fde:	88 8b       	std	Y+16, r24	; 0x10
    1fe0:	88 89       	ldd	r24, Y+16	; 0x10
    1fe2:	84 30       	cpi	r24, 0x04	; 4
    1fe4:	d8 f2       	brcs	.-74     	; 0x1f9c <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1fea:	40 e0       	ldi	r20, 0x00	; 0
    1fec:	0e 94 99 06 	call	0xd32	; 0xd32 <GPIO_setupPinDirection>
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	a0 ea       	ldi	r26, 0xA0	; 160
    1ff6:	b0 e4       	ldi	r27, 0x40	; 64
    1ff8:	8b 87       	std	Y+11, r24	; 0x0b
    1ffa:	9c 87       	std	Y+12, r25	; 0x0c
    1ffc:	ad 87       	std	Y+13, r26	; 0x0d
    1ffe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2000:	6b 85       	ldd	r22, Y+11	; 0x0b
    2002:	7c 85       	ldd	r23, Y+12	; 0x0c
    2004:	8d 85       	ldd	r24, Y+13	; 0x0d
    2006:	9e 85       	ldd	r25, Y+14	; 0x0e
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	4a ef       	ldi	r20, 0xFA	; 250
    200e:	54 e4       	ldi	r21, 0x44	; 68
    2010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	8f 83       	std	Y+7, r24	; 0x07
    201a:	98 87       	std	Y+8, r25	; 0x08
    201c:	a9 87       	std	Y+9, r26	; 0x09
    201e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2020:	6f 81       	ldd	r22, Y+7	; 0x07
    2022:	78 85       	ldd	r23, Y+8	; 0x08
    2024:	89 85       	ldd	r24, Y+9	; 0x09
    2026:	9a 85       	ldd	r25, Y+10	; 0x0a
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e8       	ldi	r20, 0x80	; 128
    202e:	5f e3       	ldi	r21, 0x3F	; 63
    2030:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2034:	88 23       	and	r24, r24
    2036:	2c f4       	brge	.+10     	; 0x2042 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9e 83       	std	Y+6, r25	; 0x06
    203e:	8d 83       	std	Y+5, r24	; 0x05
    2040:	3f c0       	rjmp	.+126    	; 0x20c0 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    2042:	6f 81       	ldd	r22, Y+7	; 0x07
    2044:	78 85       	ldd	r23, Y+8	; 0x08
    2046:	89 85       	ldd	r24, Y+9	; 0x09
    2048:	9a 85       	ldd	r25, Y+10	; 0x0a
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	3f ef       	ldi	r19, 0xFF	; 255
    204e:	4f e7       	ldi	r20, 0x7F	; 127
    2050:	57 e4       	ldi	r21, 0x47	; 71
    2052:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2056:	18 16       	cp	r1, r24
    2058:	4c f5       	brge	.+82     	; 0x20ac <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205a:	6b 85       	ldd	r22, Y+11	; 0x0b
    205c:	7c 85       	ldd	r23, Y+12	; 0x0c
    205e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2060:	9e 85       	ldd	r25, Y+14	; 0x0e
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e2       	ldi	r20, 0x20	; 32
    2068:	51 e4       	ldi	r21, 0x41	; 65
    206a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	bc 01       	movw	r22, r24
    2074:	cd 01       	movw	r24, r26
    2076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	9e 83       	std	Y+6, r25	; 0x06
    2080:	8d 83       	std	Y+5, r24	; 0x05
    2082:	0f c0       	rjmp	.+30     	; 0x20a2 <KEYPAD_getPressedKey+0x186>
    2084:	88 ec       	ldi	r24, 0xC8	; 200
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	9c 83       	std	Y+4, r25	; 0x04
    208a:	8b 83       	std	Y+3, r24	; 0x03
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <KEYPAD_getPressedKey+0x174>
    2094:	9c 83       	std	Y+4, r25	; 0x04
    2096:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2098:	8d 81       	ldd	r24, Y+5	; 0x05
    209a:	9e 81       	ldd	r25, Y+6	; 0x06
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	9e 83       	std	Y+6, r25	; 0x06
    20a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a2:	8d 81       	ldd	r24, Y+5	; 0x05
    20a4:	9e 81       	ldd	r25, Y+6	; 0x06
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	69 f7       	brne	.-38     	; 0x2084 <KEYPAD_getPressedKey+0x168>
    20aa:	14 c0       	rjmp	.+40     	; 0x20d4 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ac:	6f 81       	ldd	r22, Y+7	; 0x07
    20ae:	78 85       	ldd	r23, Y+8	; 0x08
    20b0:	89 85       	ldd	r24, Y+9	; 0x09
    20b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	9e 83       	std	Y+6, r25	; 0x06
    20be:	8d 83       	std	Y+5, r24	; 0x05
    20c0:	8d 81       	ldd	r24, Y+5	; 0x05
    20c2:	9e 81       	ldd	r25, Y+6	; 0x06
    20c4:	9a 83       	std	Y+2, r25	; 0x02
    20c6:	89 83       	std	Y+1, r24	; 0x01
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	9a 81       	ldd	r25, Y+2	; 0x02
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <KEYPAD_getPressedKey+0x1b0>
    20d0:	9a 83       	std	Y+2, r25	; 0x02
    20d2:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    20d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d6:	8f 5f       	subi	r24, 0xFF	; 255
    20d8:	8f 87       	std	Y+15, r24	; 0x0f
    20da:	8f 85       	ldd	r24, Y+15	; 0x0f
    20dc:	84 30       	cpi	r24, 0x04	; 4
    20de:	08 f4       	brcc	.+2      	; 0x20e2 <KEYPAD_getPressedKey+0x1c6>
    20e0:	51 cf       	rjmp	.-350    	; 0x1f84 <KEYPAD_getPressedKey+0x68>
    20e2:	4e cf       	rjmp	.-356    	; 0x1f80 <KEYPAD_getPressedKey+0x64>

000020e4 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <KEYPAD_4x4_adjustKeyNumber+0x6>
    20ea:	00 d0       	rcall	.+0      	; 0x20ec <KEYPAD_4x4_adjustKeyNumber+0x8>
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    20f2:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	28 2f       	mov	r18, r24
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	3c 83       	std	Y+4, r19	; 0x04
    20fc:	2b 83       	std	Y+3, r18	; 0x03
    20fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2100:	9c 81       	ldd	r25, Y+4	; 0x04
    2102:	88 30       	cpi	r24, 0x08	; 8
    2104:	91 05       	cpc	r25, r1
    2106:	09 f4       	brne	.+2      	; 0x210a <KEYPAD_4x4_adjustKeyNumber+0x26>
    2108:	70 c0       	rjmp	.+224    	; 0x21ea <KEYPAD_4x4_adjustKeyNumber+0x106>
    210a:	2b 81       	ldd	r18, Y+3	; 0x03
    210c:	3c 81       	ldd	r19, Y+4	; 0x04
    210e:	29 30       	cpi	r18, 0x09	; 9
    2110:	31 05       	cpc	r19, r1
    2112:	5c f5       	brge	.+86     	; 0x216a <KEYPAD_4x4_adjustKeyNumber+0x86>
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	9c 81       	ldd	r25, Y+4	; 0x04
    2118:	84 30       	cpi	r24, 0x04	; 4
    211a:	91 05       	cpc	r25, r1
    211c:	09 f4       	brne	.+2      	; 0x2120 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    211e:	59 c0       	rjmp	.+178    	; 0x21d2 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2120:	2b 81       	ldd	r18, Y+3	; 0x03
    2122:	3c 81       	ldd	r19, Y+4	; 0x04
    2124:	25 30       	cpi	r18, 0x05	; 5
    2126:	31 05       	cpc	r19, r1
    2128:	9c f4       	brge	.+38     	; 0x2150 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	9c 81       	ldd	r25, Y+4	; 0x04
    212e:	82 30       	cpi	r24, 0x02	; 2
    2130:	91 05       	cpc	r25, r1
    2132:	09 f4       	brne	.+2      	; 0x2136 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2134:	48 c0       	rjmp	.+144    	; 0x21c6 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2136:	2b 81       	ldd	r18, Y+3	; 0x03
    2138:	3c 81       	ldd	r19, Y+4	; 0x04
    213a:	23 30       	cpi	r18, 0x03	; 3
    213c:	31 05       	cpc	r19, r1
    213e:	0c f0       	brlt	.+2      	; 0x2142 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2140:	45 c0       	rjmp	.+138    	; 0x21cc <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	9c 81       	ldd	r25, Y+4	; 0x04
    2146:	81 30       	cpi	r24, 0x01	; 1
    2148:	91 05       	cpc	r25, r1
    214a:	09 f4       	brne	.+2      	; 0x214e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    214c:	39 c0       	rjmp	.+114    	; 0x21c0 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    214e:	67 c0       	rjmp	.+206    	; 0x221e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2150:	2b 81       	ldd	r18, Y+3	; 0x03
    2152:	3c 81       	ldd	r19, Y+4	; 0x04
    2154:	26 30       	cpi	r18, 0x06	; 6
    2156:	31 05       	cpc	r19, r1
    2158:	09 f4       	brne	.+2      	; 0x215c <KEYPAD_4x4_adjustKeyNumber+0x78>
    215a:	41 c0       	rjmp	.+130    	; 0x21de <KEYPAD_4x4_adjustKeyNumber+0xfa>
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	9c 81       	ldd	r25, Y+4	; 0x04
    2160:	87 30       	cpi	r24, 0x07	; 7
    2162:	91 05       	cpc	r25, r1
    2164:	0c f0       	brlt	.+2      	; 0x2168 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2166:	3e c0       	rjmp	.+124    	; 0x21e4 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2168:	37 c0       	rjmp	.+110    	; 0x21d8 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    216a:	2b 81       	ldd	r18, Y+3	; 0x03
    216c:	3c 81       	ldd	r19, Y+4	; 0x04
    216e:	2c 30       	cpi	r18, 0x0C	; 12
    2170:	31 05       	cpc	r19, r1
    2172:	09 f4       	brne	.+2      	; 0x2176 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2174:	46 c0       	rjmp	.+140    	; 0x2202 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	9c 81       	ldd	r25, Y+4	; 0x04
    217a:	8d 30       	cpi	r24, 0x0D	; 13
    217c:	91 05       	cpc	r25, r1
    217e:	5c f4       	brge	.+22     	; 0x2196 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2180:	2b 81       	ldd	r18, Y+3	; 0x03
    2182:	3c 81       	ldd	r19, Y+4	; 0x04
    2184:	2a 30       	cpi	r18, 0x0A	; 10
    2186:	31 05       	cpc	r19, r1
    2188:	b1 f1       	breq	.+108    	; 0x21f6 <KEYPAD_4x4_adjustKeyNumber+0x112>
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	9c 81       	ldd	r25, Y+4	; 0x04
    218e:	8b 30       	cpi	r24, 0x0B	; 11
    2190:	91 05       	cpc	r25, r1
    2192:	a4 f5       	brge	.+104    	; 0x21fc <KEYPAD_4x4_adjustKeyNumber+0x118>
    2194:	2d c0       	rjmp	.+90     	; 0x21f0 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2196:	2b 81       	ldd	r18, Y+3	; 0x03
    2198:	3c 81       	ldd	r19, Y+4	; 0x04
    219a:	2e 30       	cpi	r18, 0x0E	; 14
    219c:	31 05       	cpc	r19, r1
    219e:	b9 f1       	breq	.+110    	; 0x220e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    21a0:	8b 81       	ldd	r24, Y+3	; 0x03
    21a2:	9c 81       	ldd	r25, Y+4	; 0x04
    21a4:	8e 30       	cpi	r24, 0x0E	; 14
    21a6:	91 05       	cpc	r25, r1
    21a8:	7c f1       	brlt	.+94     	; 0x2208 <KEYPAD_4x4_adjustKeyNumber+0x124>
    21aa:	2b 81       	ldd	r18, Y+3	; 0x03
    21ac:	3c 81       	ldd	r19, Y+4	; 0x04
    21ae:	2f 30       	cpi	r18, 0x0F	; 15
    21b0:	31 05       	cpc	r19, r1
    21b2:	79 f1       	breq	.+94     	; 0x2212 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	9c 81       	ldd	r25, Y+4	; 0x04
    21b8:	80 31       	cpi	r24, 0x10	; 16
    21ba:	91 05       	cpc	r25, r1
    21bc:	69 f1       	breq	.+90     	; 0x2218 <KEYPAD_4x4_adjustKeyNumber+0x134>
    21be:	2f c0       	rjmp	.+94     	; 0x221e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    21c0:	87 e0       	ldi	r24, 0x07	; 7
    21c2:	89 83       	std	Y+1, r24	; 0x01
    21c4:	2e c0       	rjmp	.+92     	; 0x2222 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    21c6:	88 e0       	ldi	r24, 0x08	; 8
    21c8:	89 83       	std	Y+1, r24	; 0x01
    21ca:	2b c0       	rjmp	.+86     	; 0x2222 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    21cc:	89 e0       	ldi	r24, 0x09	; 9
    21ce:	89 83       	std	Y+1, r24	; 0x01
    21d0:	28 c0       	rjmp	.+80     	; 0x2222 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    21d2:	85 e2       	ldi	r24, 0x25	; 37
    21d4:	89 83       	std	Y+1, r24	; 0x01
    21d6:	25 c0       	rjmp	.+74     	; 0x2222 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    21d8:	84 e0       	ldi	r24, 0x04	; 4
    21da:	89 83       	std	Y+1, r24	; 0x01
    21dc:	22 c0       	rjmp	.+68     	; 0x2222 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    21de:	85 e0       	ldi	r24, 0x05	; 5
    21e0:	89 83       	std	Y+1, r24	; 0x01
    21e2:	1f c0       	rjmp	.+62     	; 0x2222 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    21e4:	86 e0       	ldi	r24, 0x06	; 6
    21e6:	89 83       	std	Y+1, r24	; 0x01
    21e8:	1c c0       	rjmp	.+56     	; 0x2222 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    21ea:	8a e2       	ldi	r24, 0x2A	; 42
    21ec:	89 83       	std	Y+1, r24	; 0x01
    21ee:	19 c0       	rjmp	.+50     	; 0x2222 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	89 83       	std	Y+1, r24	; 0x01
    21f4:	16 c0       	rjmp	.+44     	; 0x2222 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    21f6:	82 e0       	ldi	r24, 0x02	; 2
    21f8:	89 83       	std	Y+1, r24	; 0x01
    21fa:	13 c0       	rjmp	.+38     	; 0x2222 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    21fc:	83 e0       	ldi	r24, 0x03	; 3
    21fe:	89 83       	std	Y+1, r24	; 0x01
    2200:	10 c0       	rjmp	.+32     	; 0x2222 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2202:	8d e2       	ldi	r24, 0x2D	; 45
    2204:	89 83       	std	Y+1, r24	; 0x01
    2206:	0d c0       	rjmp	.+26     	; 0x2222 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2208:	8d e0       	ldi	r24, 0x0D	; 13
    220a:	89 83       	std	Y+1, r24	; 0x01
    220c:	0a c0       	rjmp	.+20     	; 0x2222 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    220e:	19 82       	std	Y+1, r1	; 0x01
    2210:	08 c0       	rjmp	.+16     	; 0x2222 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2212:	8d e3       	ldi	r24, 0x3D	; 61
    2214:	89 83       	std	Y+1, r24	; 0x01
    2216:	05 c0       	rjmp	.+10     	; 0x2222 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2218:	8b e2       	ldi	r24, 0x2B	; 43
    221a:	89 83       	std	Y+1, r24	; 0x01
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    221e:	8a 81       	ldd	r24, Y+2	; 0x02
    2220:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2222:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	2e 97       	sbiw	r28, 0x0e	; 14
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	f8 94       	cli
    2240:	de bf       	out	0x3e, r29	; 62
    2242:	0f be       	out	0x3f, r0	; 63
    2244:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2246:	83 e0       	ldi	r24, 0x03	; 3
    2248:	64 e0       	ldi	r22, 0x04	; 4
    224a:	41 e0       	ldi	r20, 0x01	; 1
    224c:	0e 94 99 06 	call	0xd32	; 0xd32 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2250:	83 e0       	ldi	r24, 0x03	; 3
    2252:	65 e0       	ldi	r22, 0x05	; 5
    2254:	41 e0       	ldi	r20, 0x01	; 1
    2256:	0e 94 99 06 	call	0xd32	; 0xd32 <GPIO_setupPinDirection>
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	a0 ea       	ldi	r26, 0xA0	; 160
    2260:	b1 e4       	ldi	r27, 0x41	; 65
    2262:	8b 87       	std	Y+11, r24	; 0x0b
    2264:	9c 87       	std	Y+12, r25	; 0x0c
    2266:	ad 87       	std	Y+13, r26	; 0x0d
    2268:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226a:	6b 85       	ldd	r22, Y+11	; 0x0b
    226c:	7c 85       	ldd	r23, Y+12	; 0x0c
    226e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2270:	9e 85       	ldd	r25, Y+14	; 0x0e
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	4a ef       	ldi	r20, 0xFA	; 250
    2278:	54 e4       	ldi	r21, 0x44	; 68
    227a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	8f 83       	std	Y+7, r24	; 0x07
    2284:	98 87       	std	Y+8, r25	; 0x08
    2286:	a9 87       	std	Y+9, r26	; 0x09
    2288:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    228a:	6f 81       	ldd	r22, Y+7	; 0x07
    228c:	78 85       	ldd	r23, Y+8	; 0x08
    228e:	89 85       	ldd	r24, Y+9	; 0x09
    2290:	9a 85       	ldd	r25, Y+10	; 0x0a
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e8       	ldi	r20, 0x80	; 128
    2298:	5f e3       	ldi	r21, 0x3F	; 63
    229a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    229e:	88 23       	and	r24, r24
    22a0:	2c f4       	brge	.+10     	; 0x22ac <LCD_init+0x7a>
		__ticks = 1;
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	9e 83       	std	Y+6, r25	; 0x06
    22a8:	8d 83       	std	Y+5, r24	; 0x05
    22aa:	3f c0       	rjmp	.+126    	; 0x232a <LCD_init+0xf8>
	else if (__tmp > 65535)
    22ac:	6f 81       	ldd	r22, Y+7	; 0x07
    22ae:	78 85       	ldd	r23, Y+8	; 0x08
    22b0:	89 85       	ldd	r24, Y+9	; 0x09
    22b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	3f ef       	ldi	r19, 0xFF	; 255
    22b8:	4f e7       	ldi	r20, 0x7F	; 127
    22ba:	57 e4       	ldi	r21, 0x47	; 71
    22bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c0:	18 16       	cp	r1, r24
    22c2:	4c f5       	brge	.+82     	; 0x2316 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	40 e2       	ldi	r20, 0x20	; 32
    22d2:	51 e4       	ldi	r21, 0x41	; 65
    22d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	bc 01       	movw	r22, r24
    22de:	cd 01       	movw	r24, r26
    22e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	9e 83       	std	Y+6, r25	; 0x06
    22ea:	8d 83       	std	Y+5, r24	; 0x05
    22ec:	0f c0       	rjmp	.+30     	; 0x230c <LCD_init+0xda>
    22ee:	88 ec       	ldi	r24, 0xC8	; 200
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	9c 83       	std	Y+4, r25	; 0x04
    22f4:	8b 83       	std	Y+3, r24	; 0x03
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	9c 81       	ldd	r25, Y+4	; 0x04
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <LCD_init+0xc8>
    22fe:	9c 83       	std	Y+4, r25	; 0x04
    2300:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2302:	8d 81       	ldd	r24, Y+5	; 0x05
    2304:	9e 81       	ldd	r25, Y+6	; 0x06
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	9e 83       	std	Y+6, r25	; 0x06
    230a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230c:	8d 81       	ldd	r24, Y+5	; 0x05
    230e:	9e 81       	ldd	r25, Y+6	; 0x06
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	69 f7       	brne	.-38     	; 0x22ee <LCD_init+0xbc>
    2314:	14 c0       	rjmp	.+40     	; 0x233e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2316:	6f 81       	ldd	r22, Y+7	; 0x07
    2318:	78 85       	ldd	r23, Y+8	; 0x08
    231a:	89 85       	ldd	r24, Y+9	; 0x09
    231c:	9a 85       	ldd	r25, Y+10	; 0x0a
    231e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	9e 83       	std	Y+6, r25	; 0x06
    2328:	8d 83       	std	Y+5, r24	; 0x05
    232a:	8d 81       	ldd	r24, Y+5	; 0x05
    232c:	9e 81       	ldd	r25, Y+6	; 0x06
    232e:	9a 83       	std	Y+2, r25	; 0x02
    2330:	89 83       	std	Y+1, r24	; 0x01
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	9a 81       	ldd	r25, Y+2	; 0x02
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	f1 f7       	brne	.-4      	; 0x2336 <LCD_init+0x104>
    233a:	9a 83       	std	Y+2, r25	; 0x02
    233c:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    233e:	82 e0       	ldi	r24, 0x02	; 2
    2340:	6f ef       	ldi	r22, 0xFF	; 255
    2342:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2346:	88 e3       	ldi	r24, 0x38	; 56
    2348:	0e 94 b5 11 	call	0x236a	; 0x236a <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    234c:	8c e0       	ldi	r24, 0x0C	; 12
    234e:	0e 94 b5 11 	call	0x236a	; 0x236a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	0e 94 b5 11 	call	0x236a	; 0x236a <LCD_sendCommand>
}
    2358:	2e 96       	adiw	r28, 0x0e	; 14
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	e9 97       	sbiw	r28, 0x39	; 57
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2380:	83 e0       	ldi	r24, 0x03	; 3
    2382:	64 e0       	ldi	r22, 0x04	; 4
    2384:	40 e0       	ldi	r20, 0x00	; 0
    2386:	0e 94 84 07 	call	0xf08	; 0xf08 <GPIO_writePin>
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	a0 e8       	ldi	r26, 0x80	; 128
    2390:	bf e3       	ldi	r27, 0x3F	; 63
    2392:	8d ab       	std	Y+53, r24	; 0x35
    2394:	9e ab       	std	Y+54, r25	; 0x36
    2396:	af ab       	std	Y+55, r26	; 0x37
    2398:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239a:	6d a9       	ldd	r22, Y+53	; 0x35
    239c:	7e a9       	ldd	r23, Y+54	; 0x36
    239e:	8f a9       	ldd	r24, Y+55	; 0x37
    23a0:	98 ad       	ldd	r25, Y+56	; 0x38
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	4a ef       	ldi	r20, 0xFA	; 250
    23a8:	54 e4       	ldi	r21, 0x44	; 68
    23aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	89 ab       	std	Y+49, r24	; 0x31
    23b4:	9a ab       	std	Y+50, r25	; 0x32
    23b6:	ab ab       	std	Y+51, r26	; 0x33
    23b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23ba:	69 a9       	ldd	r22, Y+49	; 0x31
    23bc:	7a a9       	ldd	r23, Y+50	; 0x32
    23be:	8b a9       	ldd	r24, Y+51	; 0x33
    23c0:	9c a9       	ldd	r25, Y+52	; 0x34
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e8       	ldi	r20, 0x80	; 128
    23c8:	5f e3       	ldi	r21, 0x3F	; 63
    23ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ce:	88 23       	and	r24, r24
    23d0:	2c f4       	brge	.+10     	; 0x23dc <LCD_sendCommand+0x72>
		__ticks = 1;
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	98 ab       	std	Y+48, r25	; 0x30
    23d8:	8f a7       	std	Y+47, r24	; 0x2f
    23da:	3f c0       	rjmp	.+126    	; 0x245a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    23dc:	69 a9       	ldd	r22, Y+49	; 0x31
    23de:	7a a9       	ldd	r23, Y+50	; 0x32
    23e0:	8b a9       	ldd	r24, Y+51	; 0x33
    23e2:	9c a9       	ldd	r25, Y+52	; 0x34
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	3f ef       	ldi	r19, 0xFF	; 255
    23e8:	4f e7       	ldi	r20, 0x7F	; 127
    23ea:	57 e4       	ldi	r21, 0x47	; 71
    23ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23f0:	18 16       	cp	r1, r24
    23f2:	4c f5       	brge	.+82     	; 0x2446 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f4:	6d a9       	ldd	r22, Y+53	; 0x35
    23f6:	7e a9       	ldd	r23, Y+54	; 0x36
    23f8:	8f a9       	ldd	r24, Y+55	; 0x37
    23fa:	98 ad       	ldd	r25, Y+56	; 0x38
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e2       	ldi	r20, 0x20	; 32
    2402:	51 e4       	ldi	r21, 0x41	; 65
    2404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	bc 01       	movw	r22, r24
    240e:	cd 01       	movw	r24, r26
    2410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	98 ab       	std	Y+48, r25	; 0x30
    241a:	8f a7       	std	Y+47, r24	; 0x2f
    241c:	0f c0       	rjmp	.+30     	; 0x243c <LCD_sendCommand+0xd2>
    241e:	88 ec       	ldi	r24, 0xC8	; 200
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	9e a7       	std	Y+46, r25	; 0x2e
    2424:	8d a7       	std	Y+45, r24	; 0x2d
    2426:	8d a5       	ldd	r24, Y+45	; 0x2d
    2428:	9e a5       	ldd	r25, Y+46	; 0x2e
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	f1 f7       	brne	.-4      	; 0x242a <LCD_sendCommand+0xc0>
    242e:	9e a7       	std	Y+46, r25	; 0x2e
    2430:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2432:	8f a5       	ldd	r24, Y+47	; 0x2f
    2434:	98 a9       	ldd	r25, Y+48	; 0x30
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	98 ab       	std	Y+48, r25	; 0x30
    243a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243c:	8f a5       	ldd	r24, Y+47	; 0x2f
    243e:	98 a9       	ldd	r25, Y+48	; 0x30
    2440:	00 97       	sbiw	r24, 0x00	; 0
    2442:	69 f7       	brne	.-38     	; 0x241e <LCD_sendCommand+0xb4>
    2444:	14 c0       	rjmp	.+40     	; 0x246e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2446:	69 a9       	ldd	r22, Y+49	; 0x31
    2448:	7a a9       	ldd	r23, Y+50	; 0x32
    244a:	8b a9       	ldd	r24, Y+51	; 0x33
    244c:	9c a9       	ldd	r25, Y+52	; 0x34
    244e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	98 ab       	std	Y+48, r25	; 0x30
    2458:	8f a7       	std	Y+47, r24	; 0x2f
    245a:	8f a5       	ldd	r24, Y+47	; 0x2f
    245c:	98 a9       	ldd	r25, Y+48	; 0x30
    245e:	9c a7       	std	Y+44, r25	; 0x2c
    2460:	8b a7       	std	Y+43, r24	; 0x2b
    2462:	8b a5       	ldd	r24, Y+43	; 0x2b
    2464:	9c a5       	ldd	r25, Y+44	; 0x2c
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	f1 f7       	brne	.-4      	; 0x2466 <LCD_sendCommand+0xfc>
    246a:	9c a7       	std	Y+44, r25	; 0x2c
    246c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    246e:	83 e0       	ldi	r24, 0x03	; 3
    2470:	65 e0       	ldi	r22, 0x05	; 5
    2472:	41 e0       	ldi	r20, 0x01	; 1
    2474:	0e 94 84 07 	call	0xf08	; 0xf08 <GPIO_writePin>
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	a0 e8       	ldi	r26, 0x80	; 128
    247e:	bf e3       	ldi	r27, 0x3F	; 63
    2480:	8f a3       	std	Y+39, r24	; 0x27
    2482:	98 a7       	std	Y+40, r25	; 0x28
    2484:	a9 a7       	std	Y+41, r26	; 0x29
    2486:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2488:	6f a1       	ldd	r22, Y+39	; 0x27
    248a:	78 a5       	ldd	r23, Y+40	; 0x28
    248c:	89 a5       	ldd	r24, Y+41	; 0x29
    248e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	4a ef       	ldi	r20, 0xFA	; 250
    2496:	54 e4       	ldi	r21, 0x44	; 68
    2498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	8b a3       	std	Y+35, r24	; 0x23
    24a2:	9c a3       	std	Y+36, r25	; 0x24
    24a4:	ad a3       	std	Y+37, r26	; 0x25
    24a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24a8:	6b a1       	ldd	r22, Y+35	; 0x23
    24aa:	7c a1       	ldd	r23, Y+36	; 0x24
    24ac:	8d a1       	ldd	r24, Y+37	; 0x25
    24ae:	9e a1       	ldd	r25, Y+38	; 0x26
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e8       	ldi	r20, 0x80	; 128
    24b6:	5f e3       	ldi	r21, 0x3F	; 63
    24b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24bc:	88 23       	and	r24, r24
    24be:	2c f4       	brge	.+10     	; 0x24ca <LCD_sendCommand+0x160>
		__ticks = 1;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	9a a3       	std	Y+34, r25	; 0x22
    24c6:	89 a3       	std	Y+33, r24	; 0x21
    24c8:	3f c0       	rjmp	.+126    	; 0x2548 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    24ca:	6b a1       	ldd	r22, Y+35	; 0x23
    24cc:	7c a1       	ldd	r23, Y+36	; 0x24
    24ce:	8d a1       	ldd	r24, Y+37	; 0x25
    24d0:	9e a1       	ldd	r25, Y+38	; 0x26
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	3f ef       	ldi	r19, 0xFF	; 255
    24d6:	4f e7       	ldi	r20, 0x7F	; 127
    24d8:	57 e4       	ldi	r21, 0x47	; 71
    24da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24de:	18 16       	cp	r1, r24
    24e0:	4c f5       	brge	.+82     	; 0x2534 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e2:	6f a1       	ldd	r22, Y+39	; 0x27
    24e4:	78 a5       	ldd	r23, Y+40	; 0x28
    24e6:	89 a5       	ldd	r24, Y+41	; 0x29
    24e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	40 e2       	ldi	r20, 0x20	; 32
    24f0:	51 e4       	ldi	r21, 0x41	; 65
    24f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	bc 01       	movw	r22, r24
    24fc:	cd 01       	movw	r24, r26
    24fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	9a a3       	std	Y+34, r25	; 0x22
    2508:	89 a3       	std	Y+33, r24	; 0x21
    250a:	0f c0       	rjmp	.+30     	; 0x252a <LCD_sendCommand+0x1c0>
    250c:	88 ec       	ldi	r24, 0xC8	; 200
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	98 a3       	std	Y+32, r25	; 0x20
    2512:	8f 8f       	std	Y+31, r24	; 0x1f
    2514:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2516:	98 a1       	ldd	r25, Y+32	; 0x20
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <LCD_sendCommand+0x1ae>
    251c:	98 a3       	std	Y+32, r25	; 0x20
    251e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2520:	89 a1       	ldd	r24, Y+33	; 0x21
    2522:	9a a1       	ldd	r25, Y+34	; 0x22
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	9a a3       	std	Y+34, r25	; 0x22
    2528:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252a:	89 a1       	ldd	r24, Y+33	; 0x21
    252c:	9a a1       	ldd	r25, Y+34	; 0x22
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	69 f7       	brne	.-38     	; 0x250c <LCD_sendCommand+0x1a2>
    2532:	14 c0       	rjmp	.+40     	; 0x255c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2534:	6b a1       	ldd	r22, Y+35	; 0x23
    2536:	7c a1       	ldd	r23, Y+36	; 0x24
    2538:	8d a1       	ldd	r24, Y+37	; 0x25
    253a:	9e a1       	ldd	r25, Y+38	; 0x26
    253c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	9a a3       	std	Y+34, r25	; 0x22
    2546:	89 a3       	std	Y+33, r24	; 0x21
    2548:	89 a1       	ldd	r24, Y+33	; 0x21
    254a:	9a a1       	ldd	r25, Y+34	; 0x22
    254c:	9e 8f       	std	Y+30, r25	; 0x1e
    254e:	8d 8f       	std	Y+29, r24	; 0x1d
    2550:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2552:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	f1 f7       	brne	.-4      	; 0x2554 <LCD_sendCommand+0x1ea>
    2558:	9e 8f       	std	Y+30, r25	; 0x1e
    255a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    255c:	82 e0       	ldi	r24, 0x02	; 2
    255e:	69 ad       	ldd	r22, Y+57	; 0x39
    2560:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePort>
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	a0 e8       	ldi	r26, 0x80	; 128
    256a:	bf e3       	ldi	r27, 0x3F	; 63
    256c:	89 8f       	std	Y+25, r24	; 0x19
    256e:	9a 8f       	std	Y+26, r25	; 0x1a
    2570:	ab 8f       	std	Y+27, r26	; 0x1b
    2572:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2574:	69 8d       	ldd	r22, Y+25	; 0x19
    2576:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2578:	8b 8d       	ldd	r24, Y+27	; 0x1b
    257a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	4a ef       	ldi	r20, 0xFA	; 250
    2582:	54 e4       	ldi	r21, 0x44	; 68
    2584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	8d 8b       	std	Y+21, r24	; 0x15
    258e:	9e 8b       	std	Y+22, r25	; 0x16
    2590:	af 8b       	std	Y+23, r26	; 0x17
    2592:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2594:	6d 89       	ldd	r22, Y+21	; 0x15
    2596:	7e 89       	ldd	r23, Y+22	; 0x16
    2598:	8f 89       	ldd	r24, Y+23	; 0x17
    259a:	98 8d       	ldd	r25, Y+24	; 0x18
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	40 e8       	ldi	r20, 0x80	; 128
    25a2:	5f e3       	ldi	r21, 0x3F	; 63
    25a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a8:	88 23       	and	r24, r24
    25aa:	2c f4       	brge	.+10     	; 0x25b6 <LCD_sendCommand+0x24c>
		__ticks = 1;
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	9c 8b       	std	Y+20, r25	; 0x14
    25b2:	8b 8b       	std	Y+19, r24	; 0x13
    25b4:	3f c0       	rjmp	.+126    	; 0x2634 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    25b6:	6d 89       	ldd	r22, Y+21	; 0x15
    25b8:	7e 89       	ldd	r23, Y+22	; 0x16
    25ba:	8f 89       	ldd	r24, Y+23	; 0x17
    25bc:	98 8d       	ldd	r25, Y+24	; 0x18
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	3f ef       	ldi	r19, 0xFF	; 255
    25c2:	4f e7       	ldi	r20, 0x7F	; 127
    25c4:	57 e4       	ldi	r21, 0x47	; 71
    25c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ca:	18 16       	cp	r1, r24
    25cc:	4c f5       	brge	.+82     	; 0x2620 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ce:	69 8d       	ldd	r22, Y+25	; 0x19
    25d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e2       	ldi	r20, 0x20	; 32
    25dc:	51 e4       	ldi	r21, 0x41	; 65
    25de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	bc 01       	movw	r22, r24
    25e8:	cd 01       	movw	r24, r26
    25ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	9c 8b       	std	Y+20, r25	; 0x14
    25f4:	8b 8b       	std	Y+19, r24	; 0x13
    25f6:	0f c0       	rjmp	.+30     	; 0x2616 <LCD_sendCommand+0x2ac>
    25f8:	88 ec       	ldi	r24, 0xC8	; 200
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	9a 8b       	std	Y+18, r25	; 0x12
    25fe:	89 8b       	std	Y+17, r24	; 0x11
    2600:	89 89       	ldd	r24, Y+17	; 0x11
    2602:	9a 89       	ldd	r25, Y+18	; 0x12
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <LCD_sendCommand+0x29a>
    2608:	9a 8b       	std	Y+18, r25	; 0x12
    260a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260c:	8b 89       	ldd	r24, Y+19	; 0x13
    260e:	9c 89       	ldd	r25, Y+20	; 0x14
    2610:	01 97       	sbiw	r24, 0x01	; 1
    2612:	9c 8b       	std	Y+20, r25	; 0x14
    2614:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2616:	8b 89       	ldd	r24, Y+19	; 0x13
    2618:	9c 89       	ldd	r25, Y+20	; 0x14
    261a:	00 97       	sbiw	r24, 0x00	; 0
    261c:	69 f7       	brne	.-38     	; 0x25f8 <LCD_sendCommand+0x28e>
    261e:	14 c0       	rjmp	.+40     	; 0x2648 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2620:	6d 89       	ldd	r22, Y+21	; 0x15
    2622:	7e 89       	ldd	r23, Y+22	; 0x16
    2624:	8f 89       	ldd	r24, Y+23	; 0x17
    2626:	98 8d       	ldd	r25, Y+24	; 0x18
    2628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	9c 8b       	std	Y+20, r25	; 0x14
    2632:	8b 8b       	std	Y+19, r24	; 0x13
    2634:	8b 89       	ldd	r24, Y+19	; 0x13
    2636:	9c 89       	ldd	r25, Y+20	; 0x14
    2638:	98 8b       	std	Y+16, r25	; 0x10
    263a:	8f 87       	std	Y+15, r24	; 0x0f
    263c:	8f 85       	ldd	r24, Y+15	; 0x0f
    263e:	98 89       	ldd	r25, Y+16	; 0x10
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	f1 f7       	brne	.-4      	; 0x2640 <LCD_sendCommand+0x2d6>
    2644:	98 8b       	std	Y+16, r25	; 0x10
    2646:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2648:	83 e0       	ldi	r24, 0x03	; 3
    264a:	65 e0       	ldi	r22, 0x05	; 5
    264c:	40 e0       	ldi	r20, 0x00	; 0
    264e:	0e 94 84 07 	call	0xf08	; 0xf08 <GPIO_writePin>
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	a0 e8       	ldi	r26, 0x80	; 128
    2658:	bf e3       	ldi	r27, 0x3F	; 63
    265a:	8b 87       	std	Y+11, r24	; 0x0b
    265c:	9c 87       	std	Y+12, r25	; 0x0c
    265e:	ad 87       	std	Y+13, r26	; 0x0d
    2660:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2662:	6b 85       	ldd	r22, Y+11	; 0x0b
    2664:	7c 85       	ldd	r23, Y+12	; 0x0c
    2666:	8d 85       	ldd	r24, Y+13	; 0x0d
    2668:	9e 85       	ldd	r25, Y+14	; 0x0e
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	4a ef       	ldi	r20, 0xFA	; 250
    2670:	54 e4       	ldi	r21, 0x44	; 68
    2672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	8f 83       	std	Y+7, r24	; 0x07
    267c:	98 87       	std	Y+8, r25	; 0x08
    267e:	a9 87       	std	Y+9, r26	; 0x09
    2680:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2682:	6f 81       	ldd	r22, Y+7	; 0x07
    2684:	78 85       	ldd	r23, Y+8	; 0x08
    2686:	89 85       	ldd	r24, Y+9	; 0x09
    2688:	9a 85       	ldd	r25, Y+10	; 0x0a
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	40 e8       	ldi	r20, 0x80	; 128
    2690:	5f e3       	ldi	r21, 0x3F	; 63
    2692:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2696:	88 23       	and	r24, r24
    2698:	2c f4       	brge	.+10     	; 0x26a4 <LCD_sendCommand+0x33a>
		__ticks = 1;
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	9e 83       	std	Y+6, r25	; 0x06
    26a0:	8d 83       	std	Y+5, r24	; 0x05
    26a2:	3f c0       	rjmp	.+126    	; 0x2722 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    26a4:	6f 81       	ldd	r22, Y+7	; 0x07
    26a6:	78 85       	ldd	r23, Y+8	; 0x08
    26a8:	89 85       	ldd	r24, Y+9	; 0x09
    26aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	3f ef       	ldi	r19, 0xFF	; 255
    26b0:	4f e7       	ldi	r20, 0x7F	; 127
    26b2:	57 e4       	ldi	r21, 0x47	; 71
    26b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b8:	18 16       	cp	r1, r24
    26ba:	4c f5       	brge	.+82     	; 0x270e <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    26be:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e2       	ldi	r20, 0x20	; 32
    26ca:	51 e4       	ldi	r21, 0x41	; 65
    26cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	bc 01       	movw	r22, r24
    26d6:	cd 01       	movw	r24, r26
    26d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	9e 83       	std	Y+6, r25	; 0x06
    26e2:	8d 83       	std	Y+5, r24	; 0x05
    26e4:	0f c0       	rjmp	.+30     	; 0x2704 <LCD_sendCommand+0x39a>
    26e6:	88 ec       	ldi	r24, 0xC8	; 200
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	9c 83       	std	Y+4, r25	; 0x04
    26ec:	8b 83       	std	Y+3, r24	; 0x03
    26ee:	8b 81       	ldd	r24, Y+3	; 0x03
    26f0:	9c 81       	ldd	r25, Y+4	; 0x04
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	f1 f7       	brne	.-4      	; 0x26f2 <LCD_sendCommand+0x388>
    26f6:	9c 83       	std	Y+4, r25	; 0x04
    26f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fa:	8d 81       	ldd	r24, Y+5	; 0x05
    26fc:	9e 81       	ldd	r25, Y+6	; 0x06
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	9e 83       	std	Y+6, r25	; 0x06
    2702:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2704:	8d 81       	ldd	r24, Y+5	; 0x05
    2706:	9e 81       	ldd	r25, Y+6	; 0x06
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	69 f7       	brne	.-38     	; 0x26e6 <LCD_sendCommand+0x37c>
    270c:	14 c0       	rjmp	.+40     	; 0x2736 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270e:	6f 81       	ldd	r22, Y+7	; 0x07
    2710:	78 85       	ldd	r23, Y+8	; 0x08
    2712:	89 85       	ldd	r24, Y+9	; 0x09
    2714:	9a 85       	ldd	r25, Y+10	; 0x0a
    2716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	9e 83       	std	Y+6, r25	; 0x06
    2720:	8d 83       	std	Y+5, r24	; 0x05
    2722:	8d 81       	ldd	r24, Y+5	; 0x05
    2724:	9e 81       	ldd	r25, Y+6	; 0x06
    2726:	9a 83       	std	Y+2, r25	; 0x02
    2728:	89 83       	std	Y+1, r24	; 0x01
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	9a 81       	ldd	r25, Y+2	; 0x02
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	f1 f7       	brne	.-4      	; 0x272e <LCD_sendCommand+0x3c4>
    2732:	9a 83       	std	Y+2, r25	; 0x02
    2734:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2736:	e9 96       	adiw	r28, 0x39	; 57
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	de bf       	out	0x3e, r29	; 62
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	cd bf       	out	0x3d, r28	; 61
    2742:	cf 91       	pop	r28
    2744:	df 91       	pop	r29
    2746:	08 95       	ret

00002748 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2748:	df 93       	push	r29
    274a:	cf 93       	push	r28
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
    2750:	e9 97       	sbiw	r28, 0x39	; 57
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	de bf       	out	0x3e, r29	; 62
    2758:	0f be       	out	0x3f, r0	; 63
    275a:	cd bf       	out	0x3d, r28	; 61
    275c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    275e:	83 e0       	ldi	r24, 0x03	; 3
    2760:	64 e0       	ldi	r22, 0x04	; 4
    2762:	41 e0       	ldi	r20, 0x01	; 1
    2764:	0e 94 84 07 	call	0xf08	; 0xf08 <GPIO_writePin>
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	a0 e8       	ldi	r26, 0x80	; 128
    276e:	bf e3       	ldi	r27, 0x3F	; 63
    2770:	8d ab       	std	Y+53, r24	; 0x35
    2772:	9e ab       	std	Y+54, r25	; 0x36
    2774:	af ab       	std	Y+55, r26	; 0x37
    2776:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2778:	6d a9       	ldd	r22, Y+53	; 0x35
    277a:	7e a9       	ldd	r23, Y+54	; 0x36
    277c:	8f a9       	ldd	r24, Y+55	; 0x37
    277e:	98 ad       	ldd	r25, Y+56	; 0x38
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	4a ef       	ldi	r20, 0xFA	; 250
    2786:	54 e4       	ldi	r21, 0x44	; 68
    2788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	89 ab       	std	Y+49, r24	; 0x31
    2792:	9a ab       	std	Y+50, r25	; 0x32
    2794:	ab ab       	std	Y+51, r26	; 0x33
    2796:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2798:	69 a9       	ldd	r22, Y+49	; 0x31
    279a:	7a a9       	ldd	r23, Y+50	; 0x32
    279c:	8b a9       	ldd	r24, Y+51	; 0x33
    279e:	9c a9       	ldd	r25, Y+52	; 0x34
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e8       	ldi	r20, 0x80	; 128
    27a6:	5f e3       	ldi	r21, 0x3F	; 63
    27a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ac:	88 23       	and	r24, r24
    27ae:	2c f4       	brge	.+10     	; 0x27ba <LCD_displayCharacter+0x72>
		__ticks = 1;
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	98 ab       	std	Y+48, r25	; 0x30
    27b6:	8f a7       	std	Y+47, r24	; 0x2f
    27b8:	3f c0       	rjmp	.+126    	; 0x2838 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    27ba:	69 a9       	ldd	r22, Y+49	; 0x31
    27bc:	7a a9       	ldd	r23, Y+50	; 0x32
    27be:	8b a9       	ldd	r24, Y+51	; 0x33
    27c0:	9c a9       	ldd	r25, Y+52	; 0x34
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	3f ef       	ldi	r19, 0xFF	; 255
    27c6:	4f e7       	ldi	r20, 0x7F	; 127
    27c8:	57 e4       	ldi	r21, 0x47	; 71
    27ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ce:	18 16       	cp	r1, r24
    27d0:	4c f5       	brge	.+82     	; 0x2824 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d2:	6d a9       	ldd	r22, Y+53	; 0x35
    27d4:	7e a9       	ldd	r23, Y+54	; 0x36
    27d6:	8f a9       	ldd	r24, Y+55	; 0x37
    27d8:	98 ad       	ldd	r25, Y+56	; 0x38
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	40 e2       	ldi	r20, 0x20	; 32
    27e0:	51 e4       	ldi	r21, 0x41	; 65
    27e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	bc 01       	movw	r22, r24
    27ec:	cd 01       	movw	r24, r26
    27ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	98 ab       	std	Y+48, r25	; 0x30
    27f8:	8f a7       	std	Y+47, r24	; 0x2f
    27fa:	0f c0       	rjmp	.+30     	; 0x281a <LCD_displayCharacter+0xd2>
    27fc:	88 ec       	ldi	r24, 0xC8	; 200
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	9e a7       	std	Y+46, r25	; 0x2e
    2802:	8d a7       	std	Y+45, r24	; 0x2d
    2804:	8d a5       	ldd	r24, Y+45	; 0x2d
    2806:	9e a5       	ldd	r25, Y+46	; 0x2e
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	f1 f7       	brne	.-4      	; 0x2808 <LCD_displayCharacter+0xc0>
    280c:	9e a7       	std	Y+46, r25	; 0x2e
    280e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2810:	8f a5       	ldd	r24, Y+47	; 0x2f
    2812:	98 a9       	ldd	r25, Y+48	; 0x30
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	98 ab       	std	Y+48, r25	; 0x30
    2818:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281a:	8f a5       	ldd	r24, Y+47	; 0x2f
    281c:	98 a9       	ldd	r25, Y+48	; 0x30
    281e:	00 97       	sbiw	r24, 0x00	; 0
    2820:	69 f7       	brne	.-38     	; 0x27fc <LCD_displayCharacter+0xb4>
    2822:	14 c0       	rjmp	.+40     	; 0x284c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2824:	69 a9       	ldd	r22, Y+49	; 0x31
    2826:	7a a9       	ldd	r23, Y+50	; 0x32
    2828:	8b a9       	ldd	r24, Y+51	; 0x33
    282a:	9c a9       	ldd	r25, Y+52	; 0x34
    282c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	98 ab       	std	Y+48, r25	; 0x30
    2836:	8f a7       	std	Y+47, r24	; 0x2f
    2838:	8f a5       	ldd	r24, Y+47	; 0x2f
    283a:	98 a9       	ldd	r25, Y+48	; 0x30
    283c:	9c a7       	std	Y+44, r25	; 0x2c
    283e:	8b a7       	std	Y+43, r24	; 0x2b
    2840:	8b a5       	ldd	r24, Y+43	; 0x2b
    2842:	9c a5       	ldd	r25, Y+44	; 0x2c
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	f1 f7       	brne	.-4      	; 0x2844 <LCD_displayCharacter+0xfc>
    2848:	9c a7       	std	Y+44, r25	; 0x2c
    284a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    284c:	83 e0       	ldi	r24, 0x03	; 3
    284e:	65 e0       	ldi	r22, 0x05	; 5
    2850:	41 e0       	ldi	r20, 0x01	; 1
    2852:	0e 94 84 07 	call	0xf08	; 0xf08 <GPIO_writePin>
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	a0 e8       	ldi	r26, 0x80	; 128
    285c:	bf e3       	ldi	r27, 0x3F	; 63
    285e:	8f a3       	std	Y+39, r24	; 0x27
    2860:	98 a7       	std	Y+40, r25	; 0x28
    2862:	a9 a7       	std	Y+41, r26	; 0x29
    2864:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2866:	6f a1       	ldd	r22, Y+39	; 0x27
    2868:	78 a5       	ldd	r23, Y+40	; 0x28
    286a:	89 a5       	ldd	r24, Y+41	; 0x29
    286c:	9a a5       	ldd	r25, Y+42	; 0x2a
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	4a ef       	ldi	r20, 0xFA	; 250
    2874:	54 e4       	ldi	r21, 0x44	; 68
    2876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	8b a3       	std	Y+35, r24	; 0x23
    2880:	9c a3       	std	Y+36, r25	; 0x24
    2882:	ad a3       	std	Y+37, r26	; 0x25
    2884:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2886:	6b a1       	ldd	r22, Y+35	; 0x23
    2888:	7c a1       	ldd	r23, Y+36	; 0x24
    288a:	8d a1       	ldd	r24, Y+37	; 0x25
    288c:	9e a1       	ldd	r25, Y+38	; 0x26
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e8       	ldi	r20, 0x80	; 128
    2894:	5f e3       	ldi	r21, 0x3F	; 63
    2896:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    289a:	88 23       	and	r24, r24
    289c:	2c f4       	brge	.+10     	; 0x28a8 <LCD_displayCharacter+0x160>
		__ticks = 1;
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	9a a3       	std	Y+34, r25	; 0x22
    28a4:	89 a3       	std	Y+33, r24	; 0x21
    28a6:	3f c0       	rjmp	.+126    	; 0x2926 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    28a8:	6b a1       	ldd	r22, Y+35	; 0x23
    28aa:	7c a1       	ldd	r23, Y+36	; 0x24
    28ac:	8d a1       	ldd	r24, Y+37	; 0x25
    28ae:	9e a1       	ldd	r25, Y+38	; 0x26
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	3f ef       	ldi	r19, 0xFF	; 255
    28b4:	4f e7       	ldi	r20, 0x7F	; 127
    28b6:	57 e4       	ldi	r21, 0x47	; 71
    28b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28bc:	18 16       	cp	r1, r24
    28be:	4c f5       	brge	.+82     	; 0x2912 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c0:	6f a1       	ldd	r22, Y+39	; 0x27
    28c2:	78 a5       	ldd	r23, Y+40	; 0x28
    28c4:	89 a5       	ldd	r24, Y+41	; 0x29
    28c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e2       	ldi	r20, 0x20	; 32
    28ce:	51 e4       	ldi	r21, 0x41	; 65
    28d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	bc 01       	movw	r22, r24
    28da:	cd 01       	movw	r24, r26
    28dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	9a a3       	std	Y+34, r25	; 0x22
    28e6:	89 a3       	std	Y+33, r24	; 0x21
    28e8:	0f c0       	rjmp	.+30     	; 0x2908 <LCD_displayCharacter+0x1c0>
    28ea:	88 ec       	ldi	r24, 0xC8	; 200
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	98 a3       	std	Y+32, r25	; 0x20
    28f0:	8f 8f       	std	Y+31, r24	; 0x1f
    28f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28f4:	98 a1       	ldd	r25, Y+32	; 0x20
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	f1 f7       	brne	.-4      	; 0x28f6 <LCD_displayCharacter+0x1ae>
    28fa:	98 a3       	std	Y+32, r25	; 0x20
    28fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2900:	9a a1       	ldd	r25, Y+34	; 0x22
    2902:	01 97       	sbiw	r24, 0x01	; 1
    2904:	9a a3       	std	Y+34, r25	; 0x22
    2906:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2908:	89 a1       	ldd	r24, Y+33	; 0x21
    290a:	9a a1       	ldd	r25, Y+34	; 0x22
    290c:	00 97       	sbiw	r24, 0x00	; 0
    290e:	69 f7       	brne	.-38     	; 0x28ea <LCD_displayCharacter+0x1a2>
    2910:	14 c0       	rjmp	.+40     	; 0x293a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2912:	6b a1       	ldd	r22, Y+35	; 0x23
    2914:	7c a1       	ldd	r23, Y+36	; 0x24
    2916:	8d a1       	ldd	r24, Y+37	; 0x25
    2918:	9e a1       	ldd	r25, Y+38	; 0x26
    291a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	9a a3       	std	Y+34, r25	; 0x22
    2924:	89 a3       	std	Y+33, r24	; 0x21
    2926:	89 a1       	ldd	r24, Y+33	; 0x21
    2928:	9a a1       	ldd	r25, Y+34	; 0x22
    292a:	9e 8f       	std	Y+30, r25	; 0x1e
    292c:	8d 8f       	std	Y+29, r24	; 0x1d
    292e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2930:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	f1 f7       	brne	.-4      	; 0x2932 <LCD_displayCharacter+0x1ea>
    2936:	9e 8f       	std	Y+30, r25	; 0x1e
    2938:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    293a:	82 e0       	ldi	r24, 0x02	; 2
    293c:	69 ad       	ldd	r22, Y+57	; 0x39
    293e:	0e 94 4e 09 	call	0x129c	; 0x129c <GPIO_writePort>
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	a0 e8       	ldi	r26, 0x80	; 128
    2948:	bf e3       	ldi	r27, 0x3F	; 63
    294a:	89 8f       	std	Y+25, r24	; 0x19
    294c:	9a 8f       	std	Y+26, r25	; 0x1a
    294e:	ab 8f       	std	Y+27, r26	; 0x1b
    2950:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2952:	69 8d       	ldd	r22, Y+25	; 0x19
    2954:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2956:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2958:	9c 8d       	ldd	r25, Y+28	; 0x1c
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	4a ef       	ldi	r20, 0xFA	; 250
    2960:	54 e4       	ldi	r21, 0x44	; 68
    2962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	8d 8b       	std	Y+21, r24	; 0x15
    296c:	9e 8b       	std	Y+22, r25	; 0x16
    296e:	af 8b       	std	Y+23, r26	; 0x17
    2970:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2972:	6d 89       	ldd	r22, Y+21	; 0x15
    2974:	7e 89       	ldd	r23, Y+22	; 0x16
    2976:	8f 89       	ldd	r24, Y+23	; 0x17
    2978:	98 8d       	ldd	r25, Y+24	; 0x18
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	40 e8       	ldi	r20, 0x80	; 128
    2980:	5f e3       	ldi	r21, 0x3F	; 63
    2982:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2986:	88 23       	and	r24, r24
    2988:	2c f4       	brge	.+10     	; 0x2994 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	9c 8b       	std	Y+20, r25	; 0x14
    2990:	8b 8b       	std	Y+19, r24	; 0x13
    2992:	3f c0       	rjmp	.+126    	; 0x2a12 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2994:	6d 89       	ldd	r22, Y+21	; 0x15
    2996:	7e 89       	ldd	r23, Y+22	; 0x16
    2998:	8f 89       	ldd	r24, Y+23	; 0x17
    299a:	98 8d       	ldd	r25, Y+24	; 0x18
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	3f ef       	ldi	r19, 0xFF	; 255
    29a0:	4f e7       	ldi	r20, 0x7F	; 127
    29a2:	57 e4       	ldi	r21, 0x47	; 71
    29a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29a8:	18 16       	cp	r1, r24
    29aa:	4c f5       	brge	.+82     	; 0x29fe <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ac:	69 8d       	ldd	r22, Y+25	; 0x19
    29ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	40 e2       	ldi	r20, 0x20	; 32
    29ba:	51 e4       	ldi	r21, 0x41	; 65
    29bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	bc 01       	movw	r22, r24
    29c6:	cd 01       	movw	r24, r26
    29c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	9c 8b       	std	Y+20, r25	; 0x14
    29d2:	8b 8b       	std	Y+19, r24	; 0x13
    29d4:	0f c0       	rjmp	.+30     	; 0x29f4 <LCD_displayCharacter+0x2ac>
    29d6:	88 ec       	ldi	r24, 0xC8	; 200
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	9a 8b       	std	Y+18, r25	; 0x12
    29dc:	89 8b       	std	Y+17, r24	; 0x11
    29de:	89 89       	ldd	r24, Y+17	; 0x11
    29e0:	9a 89       	ldd	r25, Y+18	; 0x12
    29e2:	01 97       	sbiw	r24, 0x01	; 1
    29e4:	f1 f7       	brne	.-4      	; 0x29e2 <LCD_displayCharacter+0x29a>
    29e6:	9a 8b       	std	Y+18, r25	; 0x12
    29e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ea:	8b 89       	ldd	r24, Y+19	; 0x13
    29ec:	9c 89       	ldd	r25, Y+20	; 0x14
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	9c 8b       	std	Y+20, r25	; 0x14
    29f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f4:	8b 89       	ldd	r24, Y+19	; 0x13
    29f6:	9c 89       	ldd	r25, Y+20	; 0x14
    29f8:	00 97       	sbiw	r24, 0x00	; 0
    29fa:	69 f7       	brne	.-38     	; 0x29d6 <LCD_displayCharacter+0x28e>
    29fc:	14 c0       	rjmp	.+40     	; 0x2a26 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2a00:	7e 89       	ldd	r23, Y+22	; 0x16
    2a02:	8f 89       	ldd	r24, Y+23	; 0x17
    2a04:	98 8d       	ldd	r25, Y+24	; 0x18
    2a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	9c 8b       	std	Y+20, r25	; 0x14
    2a10:	8b 8b       	std	Y+19, r24	; 0x13
    2a12:	8b 89       	ldd	r24, Y+19	; 0x13
    2a14:	9c 89       	ldd	r25, Y+20	; 0x14
    2a16:	98 8b       	std	Y+16, r25	; 0x10
    2a18:	8f 87       	std	Y+15, r24	; 0x0f
    2a1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a1c:	98 89       	ldd	r25, Y+16	; 0x10
    2a1e:	01 97       	sbiw	r24, 0x01	; 1
    2a20:	f1 f7       	brne	.-4      	; 0x2a1e <LCD_displayCharacter+0x2d6>
    2a22:	98 8b       	std	Y+16, r25	; 0x10
    2a24:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2a26:	83 e0       	ldi	r24, 0x03	; 3
    2a28:	65 e0       	ldi	r22, 0x05	; 5
    2a2a:	40 e0       	ldi	r20, 0x00	; 0
    2a2c:	0e 94 84 07 	call	0xf08	; 0xf08 <GPIO_writePin>
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	a0 e8       	ldi	r26, 0x80	; 128
    2a36:	bf e3       	ldi	r27, 0x3F	; 63
    2a38:	8b 87       	std	Y+11, r24	; 0x0b
    2a3a:	9c 87       	std	Y+12, r25	; 0x0c
    2a3c:	ad 87       	std	Y+13, r26	; 0x0d
    2a3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	4a ef       	ldi	r20, 0xFA	; 250
    2a4e:	54 e4       	ldi	r21, 0x44	; 68
    2a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	8f 83       	std	Y+7, r24	; 0x07
    2a5a:	98 87       	std	Y+8, r25	; 0x08
    2a5c:	a9 87       	std	Y+9, r26	; 0x09
    2a5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a60:	6f 81       	ldd	r22, Y+7	; 0x07
    2a62:	78 85       	ldd	r23, Y+8	; 0x08
    2a64:	89 85       	ldd	r24, Y+9	; 0x09
    2a66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	40 e8       	ldi	r20, 0x80	; 128
    2a6e:	5f e3       	ldi	r21, 0x3F	; 63
    2a70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a74:	88 23       	and	r24, r24
    2a76:	2c f4       	brge	.+10     	; 0x2a82 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	9e 83       	std	Y+6, r25	; 0x06
    2a7e:	8d 83       	std	Y+5, r24	; 0x05
    2a80:	3f c0       	rjmp	.+126    	; 0x2b00 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2a82:	6f 81       	ldd	r22, Y+7	; 0x07
    2a84:	78 85       	ldd	r23, Y+8	; 0x08
    2a86:	89 85       	ldd	r24, Y+9	; 0x09
    2a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	3f ef       	ldi	r19, 0xFF	; 255
    2a8e:	4f e7       	ldi	r20, 0x7F	; 127
    2a90:	57 e4       	ldi	r21, 0x47	; 71
    2a92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a96:	18 16       	cp	r1, r24
    2a98:	4c f5       	brge	.+82     	; 0x2aec <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e2       	ldi	r20, 0x20	; 32
    2aa8:	51 e4       	ldi	r21, 0x41	; 65
    2aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	bc 01       	movw	r22, r24
    2ab4:	cd 01       	movw	r24, r26
    2ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	9e 83       	std	Y+6, r25	; 0x06
    2ac0:	8d 83       	std	Y+5, r24	; 0x05
    2ac2:	0f c0       	rjmp	.+30     	; 0x2ae2 <LCD_displayCharacter+0x39a>
    2ac4:	88 ec       	ldi	r24, 0xC8	; 200
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	9c 83       	std	Y+4, r25	; 0x04
    2aca:	8b 83       	std	Y+3, r24	; 0x03
    2acc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ace:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad0:	01 97       	sbiw	r24, 0x01	; 1
    2ad2:	f1 f7       	brne	.-4      	; 0x2ad0 <LCD_displayCharacter+0x388>
    2ad4:	9c 83       	std	Y+4, r25	; 0x04
    2ad6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    2ada:	9e 81       	ldd	r25, Y+6	; 0x06
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	9e 83       	std	Y+6, r25	; 0x06
    2ae0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae6:	00 97       	sbiw	r24, 0x00	; 0
    2ae8:	69 f7       	brne	.-38     	; 0x2ac4 <LCD_displayCharacter+0x37c>
    2aea:	14 c0       	rjmp	.+40     	; 0x2b14 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aec:	6f 81       	ldd	r22, Y+7	; 0x07
    2aee:	78 85       	ldd	r23, Y+8	; 0x08
    2af0:	89 85       	ldd	r24, Y+9	; 0x09
    2af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	9e 83       	std	Y+6, r25	; 0x06
    2afe:	8d 83       	std	Y+5, r24	; 0x05
    2b00:	8d 81       	ldd	r24, Y+5	; 0x05
    2b02:	9e 81       	ldd	r25, Y+6	; 0x06
    2b04:	9a 83       	std	Y+2, r25	; 0x02
    2b06:	89 83       	std	Y+1, r24	; 0x01
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	f1 f7       	brne	.-4      	; 0x2b0c <LCD_displayCharacter+0x3c4>
    2b10:	9a 83       	std	Y+2, r25	; 0x02
    2b12:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2b14:	e9 96       	adiw	r28, 0x39	; 57
    2b16:	0f b6       	in	r0, 0x3f	; 63
    2b18:	f8 94       	cli
    2b1a:	de bf       	out	0x3e, r29	; 62
    2b1c:	0f be       	out	0x3f, r0	; 63
    2b1e:	cd bf       	out	0x3d, r28	; 61
    2b20:	cf 91       	pop	r28
    2b22:	df 91       	pop	r29
    2b24:	08 95       	ret

00002b26 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2b26:	df 93       	push	r29
    2b28:	cf 93       	push	r28
    2b2a:	00 d0       	rcall	.+0      	; 0x2b2c <LCD_displayString+0x6>
    2b2c:	0f 92       	push	r0
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    2b32:	9b 83       	std	Y+3, r25	; 0x03
    2b34:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b36:	19 82       	std	Y+1, r1	; 0x01
    2b38:	0e c0       	rjmp	.+28     	; 0x2b56 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2b3a:	89 81       	ldd	r24, Y+1	; 0x01
    2b3c:	28 2f       	mov	r18, r24
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	8a 81       	ldd	r24, Y+2	; 0x02
    2b42:	9b 81       	ldd	r25, Y+3	; 0x03
    2b44:	fc 01       	movw	r30, r24
    2b46:	e2 0f       	add	r30, r18
    2b48:	f3 1f       	adc	r31, r19
    2b4a:	80 81       	ld	r24, Z
    2b4c:	0e 94 a4 13 	call	0x2748	; 0x2748 <LCD_displayCharacter>
		i++;
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	8f 5f       	subi	r24, 0xFF	; 255
    2b54:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	28 2f       	mov	r18, r24
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b60:	fc 01       	movw	r30, r24
    2b62:	e2 0f       	add	r30, r18
    2b64:	f3 1f       	adc	r31, r19
    2b66:	80 81       	ld	r24, Z
    2b68:	88 23       	and	r24, r24
    2b6a:	39 f7       	brne	.-50     	; 0x2b3a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2b6c:	0f 90       	pop	r0
    2b6e:	0f 90       	pop	r0
    2b70:	0f 90       	pop	r0
    2b72:	cf 91       	pop	r28
    2b74:	df 91       	pop	r29
    2b76:	08 95       	ret

00002b78 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2b78:	df 93       	push	r29
    2b7a:	cf 93       	push	r28
    2b7c:	00 d0       	rcall	.+0      	; 0x2b7e <LCD_moveCursor+0x6>
    2b7e:	00 d0       	rcall	.+0      	; 0x2b80 <LCD_moveCursor+0x8>
    2b80:	0f 92       	push	r0
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
    2b86:	8a 83       	std	Y+2, r24	; 0x02
    2b88:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8c:	28 2f       	mov	r18, r24
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	3d 83       	std	Y+5, r19	; 0x05
    2b92:	2c 83       	std	Y+4, r18	; 0x04
    2b94:	8c 81       	ldd	r24, Y+4	; 0x04
    2b96:	9d 81       	ldd	r25, Y+5	; 0x05
    2b98:	81 30       	cpi	r24, 0x01	; 1
    2b9a:	91 05       	cpc	r25, r1
    2b9c:	c1 f0       	breq	.+48     	; 0x2bce <LCD_moveCursor+0x56>
    2b9e:	2c 81       	ldd	r18, Y+4	; 0x04
    2ba0:	3d 81       	ldd	r19, Y+5	; 0x05
    2ba2:	22 30       	cpi	r18, 0x02	; 2
    2ba4:	31 05       	cpc	r19, r1
    2ba6:	2c f4       	brge	.+10     	; 0x2bb2 <LCD_moveCursor+0x3a>
    2ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    2baa:	9d 81       	ldd	r25, Y+5	; 0x05
    2bac:	00 97       	sbiw	r24, 0x00	; 0
    2bae:	61 f0       	breq	.+24     	; 0x2bc8 <LCD_moveCursor+0x50>
    2bb0:	19 c0       	rjmp	.+50     	; 0x2be4 <LCD_moveCursor+0x6c>
    2bb2:	2c 81       	ldd	r18, Y+4	; 0x04
    2bb4:	3d 81       	ldd	r19, Y+5	; 0x05
    2bb6:	22 30       	cpi	r18, 0x02	; 2
    2bb8:	31 05       	cpc	r19, r1
    2bba:	69 f0       	breq	.+26     	; 0x2bd6 <LCD_moveCursor+0x5e>
    2bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bbe:	9d 81       	ldd	r25, Y+5	; 0x05
    2bc0:	83 30       	cpi	r24, 0x03	; 3
    2bc2:	91 05       	cpc	r25, r1
    2bc4:	61 f0       	breq	.+24     	; 0x2bde <LCD_moveCursor+0x66>
    2bc6:	0e c0       	rjmp	.+28     	; 0x2be4 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bca:	89 83       	std	Y+1, r24	; 0x01
    2bcc:	0b c0       	rjmp	.+22     	; 0x2be4 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2bce:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd0:	80 5c       	subi	r24, 0xC0	; 192
    2bd2:	89 83       	std	Y+1, r24	; 0x01
    2bd4:	07 c0       	rjmp	.+14     	; 0x2be4 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd8:	80 5f       	subi	r24, 0xF0	; 240
    2bda:	89 83       	std	Y+1, r24	; 0x01
    2bdc:	03 c0       	rjmp	.+6      	; 0x2be4 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2bde:	8b 81       	ldd	r24, Y+3	; 0x03
    2be0:	80 5b       	subi	r24, 0xB0	; 176
    2be2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	80 68       	ori	r24, 0x80	; 128
    2be8:	0e 94 b5 11 	call	0x236a	; 0x236a <LCD_sendCommand>
}
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	0f 90       	pop	r0
    2bf6:	cf 91       	pop	r28
    2bf8:	df 91       	pop	r29
    2bfa:	08 95       	ret

00002bfc <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2bfc:	df 93       	push	r29
    2bfe:	cf 93       	push	r28
    2c00:	00 d0       	rcall	.+0      	; 0x2c02 <LCD_displayStringRowColumn+0x6>
    2c02:	00 d0       	rcall	.+0      	; 0x2c04 <LCD_displayStringRowColumn+0x8>
    2c04:	cd b7       	in	r28, 0x3d	; 61
    2c06:	de b7       	in	r29, 0x3e	; 62
    2c08:	89 83       	std	Y+1, r24	; 0x01
    2c0a:	6a 83       	std	Y+2, r22	; 0x02
    2c0c:	5c 83       	std	Y+4, r21	; 0x04
    2c0e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2c10:	89 81       	ldd	r24, Y+1	; 0x01
    2c12:	6a 81       	ldd	r22, Y+2	; 0x02
    2c14:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2c18:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1c:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_displayString>
}
    2c20:	0f 90       	pop	r0
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	cf 91       	pop	r28
    2c2a:	df 91       	pop	r29
    2c2c:	08 95       	ret

00002c2e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2c2e:	df 93       	push	r29
    2c30:	cf 93       	push	r28
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62
    2c36:	62 97       	sbiw	r28, 0x12	; 18
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	de bf       	out	0x3e, r29	; 62
    2c3e:	0f be       	out	0x3f, r0	; 63
    2c40:	cd bf       	out	0x3d, r28	; 61
    2c42:	9a 8b       	std	Y+18, r25	; 0x12
    2c44:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2c46:	89 89       	ldd	r24, Y+17	; 0x11
    2c48:	9a 89       	ldd	r25, Y+18	; 0x12
    2c4a:	9e 01       	movw	r18, r28
    2c4c:	2f 5f       	subi	r18, 0xFF	; 255
    2c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c50:	b9 01       	movw	r22, r18
    2c52:	4a e0       	ldi	r20, 0x0A	; 10
    2c54:	50 e0       	ldi	r21, 0x00	; 0
    2c56:	0e 94 7d 17 	call	0x2efa	; 0x2efa <itoa>
   LCD_displayString(buff); /* Display the string */
    2c5a:	ce 01       	movw	r24, r28
    2c5c:	01 96       	adiw	r24, 0x01	; 1
    2c5e:	0e 94 93 15 	call	0x2b26	; 0x2b26 <LCD_displayString>
}
    2c62:	62 96       	adiw	r28, 0x12	; 18
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	de bf       	out	0x3e, r29	; 62
    2c6a:	0f be       	out	0x3f, r0	; 63
    2c6c:	cd bf       	out	0x3d, r28	; 61
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	08 95       	ret

00002c74 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2c74:	df 93       	push	r29
    2c76:	cf 93       	push	r28
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	0e 94 b5 11 	call	0x236a	; 0x236a <LCD_sendCommand>
}
    2c82:	cf 91       	pop	r28
    2c84:	df 91       	pop	r29
    2c86:	08 95       	ret

00002c88 <UART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr) {
    2c88:	df 93       	push	r29
    2c8a:	cf 93       	push	r28
    2c8c:	cd b7       	in	r28, 0x3d	; 61
    2c8e:	de b7       	in	r29, 0x3e	; 62
    2c90:	29 97       	sbiw	r28, 0x09	; 9
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	9f 83       	std	Y+7, r25	; 0x07
    2c9e:	8e 83       	std	Y+6, r24	; 0x06
    // Calculate the UBRR value based on the selected baud rate
    uint16_t ubrr_value;
    switch (Config_Ptr->baud_rate) {
    2ca0:	ee 81       	ldd	r30, Y+6	; 0x06
    2ca2:	ff 81       	ldd	r31, Y+7	; 0x07
    2ca4:	83 81       	ldd	r24, Z+3	; 0x03
    2ca6:	28 2f       	mov	r18, r24
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	39 87       	std	Y+9, r19	; 0x09
    2cac:	28 87       	std	Y+8, r18	; 0x08
    2cae:	88 85       	ldd	r24, Y+8	; 0x08
    2cb0:	99 85       	ldd	r25, Y+9	; 0x09
    2cb2:	00 97       	sbiw	r24, 0x00	; 0
    2cb4:	31 f0       	breq	.+12     	; 0x2cc2 <UART_init+0x3a>
    2cb6:	28 85       	ldd	r18, Y+8	; 0x08
    2cb8:	39 85       	ldd	r19, Y+9	; 0x09
    2cba:	21 30       	cpi	r18, 0x01	; 1
    2cbc:	31 05       	cpc	r19, r1
    2cbe:	31 f0       	breq	.+12     	; 0x2ccc <UART_init+0x44>
    2cc0:	4a c0       	rjmp	.+148    	; 0x2d56 <UART_init+0xce>
        case UART_BAUD_9600:
            ubrr_value = F_CPU / ((uint32)16 * 9600) - 1;
    2cc2:	83 e3       	ldi	r24, 0x33	; 51
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	9d 83       	std	Y+5, r25	; 0x05
    2cc8:	8c 83       	std	Y+4, r24	; 0x04
    2cca:	04 c0       	rjmp	.+8      	; 0x2cd4 <UART_init+0x4c>
            break;
        case UART_BAUD_115200:
            ubrr_value = F_CPU / (uint32)((uint32)16 * 115200) - 1;
    2ccc:	83 e0       	ldi	r24, 0x03	; 3
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	9d 83       	std	Y+5, r25	; 0x05
    2cd2:	8c 83       	std	Y+4, r24	; 0x04
        default:
            // Handle unsupported baud rate
            return;
    }
    // Set the baud rate registers
    UBRRH = (uint8)(ubrr_value >> 8);
    2cd4:	e0 e4       	ldi	r30, 0x40	; 64
    2cd6:	f0 e0       	ldi	r31, 0x00	; 0
    2cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cda:	9d 81       	ldd	r25, Y+5	; 0x05
    2cdc:	89 2f       	mov	r24, r25
    2cde:	99 27       	eor	r25, r25
    2ce0:	80 83       	st	Z, r24
    UBRRL = (uint8)ubrr_value;
    2ce2:	e9 e2       	ldi	r30, 0x29	; 41
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce8:	80 83       	st	Z, r24

    // Configure data frame format: bit data, parity, and stop bits
    uint8_t data_bits = (Config_Ptr->bit_data);
    2cea:	ee 81       	ldd	r30, Y+6	; 0x06
    2cec:	ff 81       	ldd	r31, Y+7	; 0x07
    2cee:	80 81       	ld	r24, Z
    2cf0:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t parity_bit = (Config_Ptr->parity) << UPM0;
    2cf2:	ee 81       	ldd	r30, Y+6	; 0x06
    2cf4:	ff 81       	ldd	r31, Y+7	; 0x07
    2cf6:	81 81       	ldd	r24, Z+1	; 0x01
    2cf8:	82 95       	swap	r24
    2cfa:	80 7f       	andi	r24, 0xF0	; 240
    2cfc:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t stop_bits = (Config_Ptr->stop_bit) << USBS;
    2cfe:	ee 81       	ldd	r30, Y+6	; 0x06
    2d00:	ff 81       	ldd	r31, Y+7	; 0x07
    2d02:	82 81       	ldd	r24, Z+2	; 0x02
    2d04:	88 0f       	add	r24, r24
    2d06:	88 0f       	add	r24, r24
    2d08:	88 0f       	add	r24, r24
    2d0a:	89 83       	std	Y+1, r24	; 0x01

    UCSRC = (1 << URSEL) | (parity_bit) | (stop_bits) | (data_bits << UCSZ0);
    2d0c:	e0 e4       	ldi	r30, 0x40	; 64
    2d0e:	f0 e0       	ldi	r31, 0x00	; 0
    2d10:	9a 81       	ldd	r25, Y+2	; 0x02
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	89 2b       	or	r24, r25
    2d16:	80 68       	ori	r24, 0x80	; 128
    2d18:	28 2f       	mov	r18, r24
    2d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1c:	88 2f       	mov	r24, r24
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	88 0f       	add	r24, r24
    2d22:	99 1f       	adc	r25, r25
    2d24:	82 2b       	or	r24, r18
    2d26:	80 83       	st	Z, r24

    // Enable the transmitter and receiver
    UCSRB = (1 << TXEN) | (1 << RXEN);
    2d28:	ea e2       	ldi	r30, 0x2A	; 42
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	88 e1       	ldi	r24, 0x18	; 24
    2d2e:	80 83       	st	Z, r24
    if(Config_Ptr->bit_data==UART_9_BITS)
    2d30:	ee 81       	ldd	r30, Y+6	; 0x06
    2d32:	ff 81       	ldd	r31, Y+7	; 0x07
    2d34:	80 81       	ld	r24, Z
    2d36:	84 30       	cpi	r24, 0x04	; 4
    2d38:	71 f4       	brne	.+28     	; 0x2d56 <UART_init+0xce>
    {
    	UCSRB|=(1<<UCSZ2);
    2d3a:	aa e2       	ldi	r26, 0x2A	; 42
    2d3c:	b0 e0       	ldi	r27, 0x00	; 0
    2d3e:	ea e2       	ldi	r30, 0x2A	; 42
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	80 81       	ld	r24, Z
    2d44:	84 60       	ori	r24, 0x04	; 4
    2d46:	8c 93       	st	X, r24
    	UCSRC|=(3<< UCSZ0);
    2d48:	a0 e4       	ldi	r26, 0x40	; 64
    2d4a:	b0 e0       	ldi	r27, 0x00	; 0
    2d4c:	e0 e4       	ldi	r30, 0x40	; 64
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	80 81       	ld	r24, Z
    2d52:	86 60       	ori	r24, 0x06	; 6
    2d54:	8c 93       	st	X, r24
    }
}
    2d56:	29 96       	adiw	r28, 0x09	; 9
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	f8 94       	cli
    2d5c:	de bf       	out	0x3e, r29	; 62
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	cd bf       	out	0x3d, r28	; 61
    2d62:	cf 91       	pop	r28
    2d64:	df 91       	pop	r29
    2d66:	08 95       	ret

00002d68 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2d68:	df 93       	push	r29
    2d6a:	cf 93       	push	r28
    2d6c:	0f 92       	push	r0
    2d6e:	cd b7       	in	r28, 0x3d	; 61
    2d70:	de b7       	in	r29, 0x3e	; 62
    2d72:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2d74:	eb e2       	ldi	r30, 0x2B	; 43
    2d76:	f0 e0       	ldi	r31, 0x00	; 0
    2d78:	80 81       	ld	r24, Z
    2d7a:	88 2f       	mov	r24, r24
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	80 72       	andi	r24, 0x20	; 32
    2d80:	90 70       	andi	r25, 0x00	; 0
    2d82:	00 97       	sbiw	r24, 0x00	; 0
    2d84:	b9 f3       	breq	.-18     	; 0x2d74 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2d86:	ec e2       	ldi	r30, 0x2C	; 44
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	89 81       	ldd	r24, Y+1	; 0x01
    2d8c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2d8e:	0f 90       	pop	r0
    2d90:	cf 91       	pop	r28
    2d92:	df 91       	pop	r29
    2d94:	08 95       	ret

00002d96 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2d96:	df 93       	push	r29
    2d98:	cf 93       	push	r28
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2d9e:	eb e2       	ldi	r30, 0x2B	; 43
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	88 23       	and	r24, r24
    2da6:	dc f7       	brge	.-10     	; 0x2d9e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2da8:	ec e2       	ldi	r30, 0x2C	; 44
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	80 81       	ld	r24, Z
}
    2dae:	cf 91       	pop	r28
    2db0:	df 91       	pop	r29
    2db2:	08 95       	ret

00002db4 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2db4:	df 93       	push	r29
    2db6:	cf 93       	push	r28
    2db8:	00 d0       	rcall	.+0      	; 0x2dba <UART_sendString+0x6>
    2dba:	0f 92       	push	r0
    2dbc:	cd b7       	in	r28, 0x3d	; 61
    2dbe:	de b7       	in	r29, 0x3e	; 62
    2dc0:	9b 83       	std	Y+3, r25	; 0x03
    2dc2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2dc4:	19 82       	std	Y+1, r1	; 0x01
    2dc6:	0e c0       	rjmp	.+28     	; 0x2de4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	28 2f       	mov	r18, r24
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	e2 0f       	add	r30, r18
    2dd6:	f3 1f       	adc	r31, r19
    2dd8:	80 81       	ld	r24, Z
    2dda:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <UART_sendByte>
		i++;
    2dde:	89 81       	ldd	r24, Y+1	; 0x01
    2de0:	8f 5f       	subi	r24, 0xFF	; 255
    2de2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	28 2f       	mov	r18, r24
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	9b 81       	ldd	r25, Y+3	; 0x03
    2dee:	fc 01       	movw	r30, r24
    2df0:	e2 0f       	add	r30, r18
    2df2:	f3 1f       	adc	r31, r19
    2df4:	80 81       	ld	r24, Z
    2df6:	88 23       	and	r24, r24
    2df8:	39 f7       	brne	.-50     	; 0x2dc8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2dfa:	0f 90       	pop	r0
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	cf 91       	pop	r28
    2e02:	df 91       	pop	r29
    2e04:	08 95       	ret

00002e06 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2e06:	0f 93       	push	r16
    2e08:	1f 93       	push	r17
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	00 d0       	rcall	.+0      	; 0x2e10 <UART_receiveString+0xa>
    2e10:	0f 92       	push	r0
    2e12:	cd b7       	in	r28, 0x3d	; 61
    2e14:	de b7       	in	r29, 0x3e	; 62
    2e16:	9b 83       	std	Y+3, r25	; 0x03
    2e18:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e1a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	28 2f       	mov	r18, r24
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	8a 81       	ldd	r24, Y+2	; 0x02
    2e24:	9b 81       	ldd	r25, Y+3	; 0x03
    2e26:	8c 01       	movw	r16, r24
    2e28:	02 0f       	add	r16, r18
    2e2a:	13 1f       	adc	r17, r19
    2e2c:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <UART_recieveByte>
    2e30:	f8 01       	movw	r30, r16
    2e32:	80 83       	st	Z, r24
    2e34:	0f c0       	rjmp	.+30     	; 0x2e54 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	8f 5f       	subi	r24, 0xFF	; 255
    2e3a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
    2e3e:	28 2f       	mov	r18, r24
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	8a 81       	ldd	r24, Y+2	; 0x02
    2e44:	9b 81       	ldd	r25, Y+3	; 0x03
    2e46:	8c 01       	movw	r16, r24
    2e48:	02 0f       	add	r16, r18
    2e4a:	13 1f       	adc	r17, r19
    2e4c:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <UART_recieveByte>
    2e50:	f8 01       	movw	r30, r16
    2e52:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
    2e56:	28 2f       	mov	r18, r24
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e5e:	fc 01       	movw	r30, r24
    2e60:	e2 0f       	add	r30, r18
    2e62:	f3 1f       	adc	r31, r19
    2e64:	80 81       	ld	r24, Z
    2e66:	83 32       	cpi	r24, 0x23	; 35
    2e68:	31 f7       	brne	.-52     	; 0x2e36 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2e6a:	89 81       	ldd	r24, Y+1	; 0x01
    2e6c:	28 2f       	mov	r18, r24
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	8a 81       	ldd	r24, Y+2	; 0x02
    2e72:	9b 81       	ldd	r25, Y+3	; 0x03
    2e74:	fc 01       	movw	r30, r24
    2e76:	e2 0f       	add	r30, r18
    2e78:	f3 1f       	adc	r31, r19
    2e7a:	10 82       	st	Z, r1
}
    2e7c:	0f 90       	pop	r0
    2e7e:	0f 90       	pop	r0
    2e80:	0f 90       	pop	r0
    2e82:	cf 91       	pop	r28
    2e84:	df 91       	pop	r29
    2e86:	1f 91       	pop	r17
    2e88:	0f 91       	pop	r16
    2e8a:	08 95       	ret

00002e8c <__prologue_saves__>:
    2e8c:	2f 92       	push	r2
    2e8e:	3f 92       	push	r3
    2e90:	4f 92       	push	r4
    2e92:	5f 92       	push	r5
    2e94:	6f 92       	push	r6
    2e96:	7f 92       	push	r7
    2e98:	8f 92       	push	r8
    2e9a:	9f 92       	push	r9
    2e9c:	af 92       	push	r10
    2e9e:	bf 92       	push	r11
    2ea0:	cf 92       	push	r12
    2ea2:	df 92       	push	r13
    2ea4:	ef 92       	push	r14
    2ea6:	ff 92       	push	r15
    2ea8:	0f 93       	push	r16
    2eaa:	1f 93       	push	r17
    2eac:	cf 93       	push	r28
    2eae:	df 93       	push	r29
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
    2eb4:	ca 1b       	sub	r28, r26
    2eb6:	db 0b       	sbc	r29, r27
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	f8 94       	cli
    2ebc:	de bf       	out	0x3e, r29	; 62
    2ebe:	0f be       	out	0x3f, r0	; 63
    2ec0:	cd bf       	out	0x3d, r28	; 61
    2ec2:	09 94       	ijmp

00002ec4 <__epilogue_restores__>:
    2ec4:	2a 88       	ldd	r2, Y+18	; 0x12
    2ec6:	39 88       	ldd	r3, Y+17	; 0x11
    2ec8:	48 88       	ldd	r4, Y+16	; 0x10
    2eca:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ecc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ece:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ed0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ed2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ed4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ed6:	b9 84       	ldd	r11, Y+9	; 0x09
    2ed8:	c8 84       	ldd	r12, Y+8	; 0x08
    2eda:	df 80       	ldd	r13, Y+7	; 0x07
    2edc:	ee 80       	ldd	r14, Y+6	; 0x06
    2ede:	fd 80       	ldd	r15, Y+5	; 0x05
    2ee0:	0c 81       	ldd	r16, Y+4	; 0x04
    2ee2:	1b 81       	ldd	r17, Y+3	; 0x03
    2ee4:	aa 81       	ldd	r26, Y+2	; 0x02
    2ee6:	b9 81       	ldd	r27, Y+1	; 0x01
    2ee8:	ce 0f       	add	r28, r30
    2eea:	d1 1d       	adc	r29, r1
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	cd bf       	out	0x3d, r28	; 61
    2ef6:	ed 01       	movw	r28, r26
    2ef8:	08 95       	ret

00002efa <itoa>:
    2efa:	fb 01       	movw	r30, r22
    2efc:	9f 01       	movw	r18, r30
    2efe:	e8 94       	clt
    2f00:	42 30       	cpi	r20, 0x02	; 2
    2f02:	c4 f0       	brlt	.+48     	; 0x2f34 <itoa+0x3a>
    2f04:	45 32       	cpi	r20, 0x25	; 37
    2f06:	b4 f4       	brge	.+44     	; 0x2f34 <itoa+0x3a>
    2f08:	4a 30       	cpi	r20, 0x0A	; 10
    2f0a:	29 f4       	brne	.+10     	; 0x2f16 <itoa+0x1c>
    2f0c:	97 fb       	bst	r25, 7
    2f0e:	1e f4       	brtc	.+6      	; 0x2f16 <itoa+0x1c>
    2f10:	90 95       	com	r25
    2f12:	81 95       	neg	r24
    2f14:	9f 4f       	sbci	r25, 0xFF	; 255
    2f16:	64 2f       	mov	r22, r20
    2f18:	77 27       	eor	r23, r23
    2f1a:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <__udivmodhi4>
    2f1e:	80 5d       	subi	r24, 0xD0	; 208
    2f20:	8a 33       	cpi	r24, 0x3A	; 58
    2f22:	0c f0       	brlt	.+2      	; 0x2f26 <itoa+0x2c>
    2f24:	89 5d       	subi	r24, 0xD9	; 217
    2f26:	81 93       	st	Z+, r24
    2f28:	cb 01       	movw	r24, r22
    2f2a:	00 97       	sbiw	r24, 0x00	; 0
    2f2c:	a1 f7       	brne	.-24     	; 0x2f16 <itoa+0x1c>
    2f2e:	16 f4       	brtc	.+4      	; 0x2f34 <itoa+0x3a>
    2f30:	5d e2       	ldi	r21, 0x2D	; 45
    2f32:	51 93       	st	Z+, r21
    2f34:	10 82       	st	Z, r1
    2f36:	c9 01       	movw	r24, r18
    2f38:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <strrev>

00002f3c <strrev>:
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	fc 01       	movw	r30, r24
    2f40:	67 2f       	mov	r22, r23
    2f42:	71 91       	ld	r23, Z+
    2f44:	77 23       	and	r23, r23
    2f46:	e1 f7       	brne	.-8      	; 0x2f40 <strrev+0x4>
    2f48:	32 97       	sbiw	r30, 0x02	; 2
    2f4a:	04 c0       	rjmp	.+8      	; 0x2f54 <strrev+0x18>
    2f4c:	7c 91       	ld	r23, X
    2f4e:	6d 93       	st	X+, r22
    2f50:	70 83       	st	Z, r23
    2f52:	62 91       	ld	r22, -Z
    2f54:	ae 17       	cp	r26, r30
    2f56:	bf 07       	cpc	r27, r31
    2f58:	c8 f3       	brcs	.-14     	; 0x2f4c <strrev+0x10>
    2f5a:	08 95       	ret

00002f5c <__udivmodhi4>:
    2f5c:	aa 1b       	sub	r26, r26
    2f5e:	bb 1b       	sub	r27, r27
    2f60:	51 e1       	ldi	r21, 0x11	; 17
    2f62:	07 c0       	rjmp	.+14     	; 0x2f72 <__udivmodhi4_ep>

00002f64 <__udivmodhi4_loop>:
    2f64:	aa 1f       	adc	r26, r26
    2f66:	bb 1f       	adc	r27, r27
    2f68:	a6 17       	cp	r26, r22
    2f6a:	b7 07       	cpc	r27, r23
    2f6c:	10 f0       	brcs	.+4      	; 0x2f72 <__udivmodhi4_ep>
    2f6e:	a6 1b       	sub	r26, r22
    2f70:	b7 0b       	sbc	r27, r23

00002f72 <__udivmodhi4_ep>:
    2f72:	88 1f       	adc	r24, r24
    2f74:	99 1f       	adc	r25, r25
    2f76:	5a 95       	dec	r21
    2f78:	a9 f7       	brne	.-22     	; 0x2f64 <__udivmodhi4_loop>
    2f7a:	80 95       	com	r24
    2f7c:	90 95       	com	r25
    2f7e:	bc 01       	movw	r22, r24
    2f80:	cd 01       	movw	r24, r26
    2f82:	08 95       	ret

00002f84 <_exit>:
    2f84:	f8 94       	cli

00002f86 <__stop_program>:
    2f86:	ff cf       	rjmp	.-2      	; 0x2f86 <__stop_program>
