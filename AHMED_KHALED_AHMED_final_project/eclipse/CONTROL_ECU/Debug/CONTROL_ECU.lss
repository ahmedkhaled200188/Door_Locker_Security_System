
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002304  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002304  00002398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800168  00800168  000024a0  2**0
                  ALLOC
  3 .stab         000025f8  00000000  00000000  000024a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001387  00000000  00000000  00004a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00005fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  000061af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  000085bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  00009932  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ab0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000accc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000afbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b98d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a2 38       	cpi	r26, 0x82	; 130
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 e0       	ldi	r30, 0x04	; 4
      78:	f3 e2       	ldi	r31, 0x23	; 35
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 1f 0a 	call	0x143e	; 0x143e <main>
      8a:	0c 94 80 11 	jmp	0x2300	; 0x2300 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 6d 11 	jmp	0x22da	; 0x22da <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 6e 11 	jmp	0x22dc	; 0x22dc <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <Timer1_init>:
#include <avr/io.h>
#include <avr/interrupt.h>
void (*call_back)(void);
Timer1_ConfigType * Timer1_Config_Ptr;
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <Timer1_init+0x6>
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	9a 83       	std	Y+2, r25	; 0x02
     e04:	89 83       	std	Y+1, r24	; 0x01
	SREG|=(1<<7);
     e06:	af e5       	ldi	r26, 0x5F	; 95
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	ef e5       	ldi	r30, 0x5F	; 95
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	80 68       	ori	r24, 0x80	; 128
     e12:	8c 93       	st	X, r24
	Timer1_Config_Ptr=Config_Ptr;
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	9a 81       	ldd	r25, Y+2	; 0x02
     e18:	90 93 6a 01 	sts	0x016A, r25
     e1c:	80 93 69 01 	sts	0x0169, r24
	TCCR1B|=(Config_Ptr->prescaler>>0);
     e20:	ae e4       	ldi	r26, 0x4E	; 78
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	ee e4       	ldi	r30, 0x4E	; 78
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	90 81       	ld	r25, Z
     e2a:	e9 81       	ldd	r30, Y+1	; 0x01
     e2c:	fa 81       	ldd	r31, Y+2	; 0x02
     e2e:	84 81       	ldd	r24, Z+4	; 0x04
     e30:	89 2b       	or	r24, r25
     e32:	8c 93       	st	X, r24
	TCNT1=Config_Ptr->initial_value;
     e34:	ac e4       	ldi	r26, 0x4C	; 76
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e9 81       	ldd	r30, Y+1	; 0x01
     e3a:	fa 81       	ldd	r31, Y+2	; 0x02
     e3c:	80 81       	ld	r24, Z
     e3e:	91 81       	ldd	r25, Z+1	; 0x01
     e40:	11 96       	adiw	r26, 0x01	; 1
     e42:	9c 93       	st	X, r25
     e44:	8e 93       	st	-X, r24
	if(Config_Ptr->mode==normal)
     e46:	e9 81       	ldd	r30, Y+1	; 0x01
     e48:	fa 81       	ldd	r31, Y+2	; 0x02
     e4a:	85 81       	ldd	r24, Z+5	; 0x05
     e4c:	88 23       	and	r24, r24
     e4e:	79 f4       	brne	.+30     	; 0xe6e <Timer1_init+0x76>
	{
		TCCR1B&=~(1<<WGM12);
     e50:	ae e4       	ldi	r26, 0x4E	; 78
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	ee e4       	ldi	r30, 0x4E	; 78
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	87 7f       	andi	r24, 0xF7	; 247
     e5c:	8c 93       	st	X, r24
		TIMSK|=(1<<TOIE1);//Overflow Interrupt Enable
     e5e:	a9 e5       	ldi	r26, 0x59	; 89
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e9 e5       	ldi	r30, 0x59	; 89
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	84 60       	ori	r24, 0x04	; 4
     e6a:	8c 93       	st	X, r24
     e6c:	1c c0       	rjmp	.+56     	; 0xea6 <Timer1_init+0xae>

	}
	else if(Config_Ptr->mode==compare)
     e6e:	e9 81       	ldd	r30, Y+1	; 0x01
     e70:	fa 81       	ldd	r31, Y+2	; 0x02
     e72:	85 81       	ldd	r24, Z+5	; 0x05
     e74:	81 30       	cpi	r24, 0x01	; 1
     e76:	b9 f4       	brne	.+46     	; 0xea6 <Timer1_init+0xae>
	{
		TCCR1B|=(1<<WGM12);
     e78:	ae e4       	ldi	r26, 0x4E	; 78
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	ee e4       	ldi	r30, 0x4E	; 78
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	88 60       	ori	r24, 0x08	; 8
     e84:	8c 93       	st	X, r24
		OCR1A = Config_Ptr->compare_value;
     e86:	aa e4       	ldi	r26, 0x4A	; 74
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e9 81       	ldd	r30, Y+1	; 0x01
     e8c:	fa 81       	ldd	r31, Y+2	; 0x02
     e8e:	82 81       	ldd	r24, Z+2	; 0x02
     e90:	93 81       	ldd	r25, Z+3	; 0x03
     e92:	11 96       	adiw	r26, 0x01	; 1
     e94:	9c 93       	st	X, r25
     e96:	8e 93       	st	-X, r24
		TIMSK |= (1 << OCIE1A);//Output Compare A Match Interrupt Enable
     e98:	a9 e5       	ldi	r26, 0x59	; 89
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e9 e5       	ldi	r30, 0x59	; 89
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	80 61       	ori	r24, 0x10	; 16
     ea4:	8c 93       	st	X, r24
	}

}
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <Timer1_deInit>:
void Timer1_deInit(void)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
	TCCR1B=0;
     eb8:	ee e4       	ldi	r30, 0x4E	; 78
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	10 82       	st	Z, r1
	TIMSK&=~(1<<TOIE1);
     ebe:	a9 e5       	ldi	r26, 0x59	; 89
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e9 e5       	ldi	r30, 0x59	; 89
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	8b 7f       	andi	r24, 0xFB	; 251
     eca:	8c 93       	st	X, r24
	TIMSK&=~(1<<OCIE1A);
     ecc:	a9 e5       	ldi	r26, 0x59	; 89
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e9 e5       	ldi	r30, 0x59	; 89
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	8f 7e       	andi	r24, 0xEF	; 239
     ed8:	8c 93       	st	X, r24

}
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <Timer1_setCallBack+0x6>
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	9a 83       	std	Y+2, r25	; 0x02
     eec:	89 83       	std	Y+1, r24	; 0x01
	call_back=a_ptr;
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	9a 81       	ldd	r25, Y+2	; 0x02
     ef2:	90 93 6c 01 	sts	0x016C, r25
     ef6:	80 93 6b 01 	sts	0x016B, r24
}
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
     f04:	1f 92       	push	r1
     f06:	0f 92       	push	r0
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	0f 92       	push	r0
     f0c:	11 24       	eor	r1, r1
     f0e:	2f 93       	push	r18
     f10:	3f 93       	push	r19
     f12:	4f 93       	push	r20
     f14:	5f 93       	push	r21
     f16:	6f 93       	push	r22
     f18:	7f 93       	push	r23
     f1a:	8f 93       	push	r24
     f1c:	9f 93       	push	r25
     f1e:	af 93       	push	r26
     f20:	bf 93       	push	r27
     f22:	ef 93       	push	r30
     f24:	ff 93       	push	r31
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
	call_back();
     f2e:	e0 91 6b 01 	lds	r30, 0x016B
     f32:	f0 91 6c 01 	lds	r31, 0x016C
     f36:	09 95       	icall
	TCNT1=Timer1_Config_Ptr->initial_value;
     f38:	ac e4       	ldi	r26, 0x4C	; 76
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e0 91 69 01 	lds	r30, 0x0169
     f40:	f0 91 6a 01 	lds	r31, 0x016A
     f44:	80 81       	ld	r24, Z
     f46:	91 81       	ldd	r25, Z+1	; 0x01
     f48:	11 96       	adiw	r26, 0x01	; 1
     f4a:	9c 93       	st	X, r25
     f4c:	8e 93       	st	-X, r24

}
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	ff 91       	pop	r31
     f54:	ef 91       	pop	r30
     f56:	bf 91       	pop	r27
     f58:	af 91       	pop	r26
     f5a:	9f 91       	pop	r25
     f5c:	8f 91       	pop	r24
     f5e:	7f 91       	pop	r23
     f60:	6f 91       	pop	r22
     f62:	5f 91       	pop	r21
     f64:	4f 91       	pop	r20
     f66:	3f 91       	pop	r19
     f68:	2f 91       	pop	r18
     f6a:	0f 90       	pop	r0
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	0f 90       	pop	r0
     f70:	1f 90       	pop	r1
     f72:	18 95       	reti

00000f74 <__vector_9>:
ISR(TIMER1_OVF_vect)
{
     f74:	1f 92       	push	r1
     f76:	0f 92       	push	r0
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	0f 92       	push	r0
     f7c:	11 24       	eor	r1, r1
     f7e:	2f 93       	push	r18
     f80:	3f 93       	push	r19
     f82:	4f 93       	push	r20
     f84:	5f 93       	push	r21
     f86:	6f 93       	push	r22
     f88:	7f 93       	push	r23
     f8a:	8f 93       	push	r24
     f8c:	9f 93       	push	r25
     f8e:	af 93       	push	r26
     f90:	bf 93       	push	r27
     f92:	ef 93       	push	r30
     f94:	ff 93       	push	r31
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
	call_back();
     f9e:	e0 91 6b 01 	lds	r30, 0x016B
     fa2:	f0 91 6c 01 	lds	r31, 0x016C
     fa6:	09 95       	icall
	TCNT1=Timer1_Config_Ptr->initial_value;
     fa8:	ac e4       	ldi	r26, 0x4C	; 76
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e0 91 69 01 	lds	r30, 0x0169
     fb0:	f0 91 6a 01 	lds	r31, 0x016A
     fb4:	80 81       	ld	r24, Z
     fb6:	91 81       	ldd	r25, Z+1	; 0x01
     fb8:	11 96       	adiw	r26, 0x01	; 1
     fba:	9c 93       	st	X, r25
     fbc:	8e 93       	st	-X, r24
}
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	ff 91       	pop	r31
     fc4:	ef 91       	pop	r30
     fc6:	bf 91       	pop	r27
     fc8:	af 91       	pop	r26
     fca:	9f 91       	pop	r25
     fcc:	8f 91       	pop	r24
     fce:	7f 91       	pop	r23
     fd0:	6f 91       	pop	r22
     fd2:	5f 91       	pop	r21
     fd4:	4f 91       	pop	r20
     fd6:	3f 91       	pop	r19
     fd8:	2f 91       	pop	r18
     fda:	0f 90       	pop	r0
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	0f 90       	pop	r0
     fe0:	1f 90       	pop	r1
     fe2:	18 95       	reti

00000fe4 <Buzzer_init>:
 *  Created on: Aug 19, 2023
 *      Author: AHMED KHALED
 */
#include "buzzer.h"
void Buzzer_init(void)
{
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTC_ID, PIN5_ID, PIN_OUTPUT);
     fec:	82 e0       	ldi	r24, 0x02	; 2
     fee:	65 e0       	ldi	r22, 0x05	; 5
     ff0:	41 e0       	ldi	r20, 0x01	; 1
     ff2:	0e 94 2e 0c 	call	0x185c	; 0x185c <GPIO_setupPinDirection>
	GPIO_writePin(PORTC_ID, PIN5_ID, LOGIC_LOW);
     ff6:	82 e0       	ldi	r24, 0x02	; 2
     ff8:	65 e0       	ldi	r22, 0x05	; 5
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <GPIO_writePin>
}
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	08 95       	ret

00001006 <Buzzer_on>:
void Buzzer_on(void)
{
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID, PIN5_ID, LOGIC_HIGH);
    100e:	82 e0       	ldi	r24, 0x02	; 2
    1010:	65 e0       	ldi	r22, 0x05	; 5
    1012:	41 e0       	ldi	r20, 0x01	; 1
    1014:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <GPIO_writePin>

}
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <Buzzer_off>:
void Buzzer_off(void)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID, PIN5_ID, LOGIC_LOW);
    1026:	82 e0       	ldi	r24, 0x02	; 2
    1028:	65 e0       	ldi	r22, 0x05	; 5
    102a:	40 e0       	ldi	r20, 0x00	; 0
    102c:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <GPIO_writePin>
}
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <changePassword>:
/* Global variables */
uint8 Tick = 0;
uint8 resivedpass[6];

/* Function to change the password */
void changePassword(void) {
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	6c 97       	sbiw	r28, 0x1c	; 28
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    uint8 pass[6] = {0, 0, 0, 0, 0};
    104a:	86 e0       	ldi	r24, 0x06	; 6
    104c:	fe 01       	movw	r30, r28
    104e:	71 96       	adiw	r30, 0x11	; 17
    1050:	df 01       	movw	r26, r30
    1052:	98 2f       	mov	r25, r24
    1054:	1d 92       	st	X+, r1
    1056:	9a 95       	dec	r25
    1058:	e9 f7       	brne	.-6      	; 0x1054 <changePassword+0x1e>
    uint8 pass2[6] = {0, 0, 0, 0, 0};
    105a:	86 e0       	ldi	r24, 0x06	; 6
    105c:	fe 01       	movw	r30, r28
    105e:	77 96       	adiw	r30, 0x17	; 23
    1060:	df 01       	movw	r26, r30
    1062:	98 2f       	mov	r25, r24
    1064:	1d 92       	st	X+, r1
    1066:	9a 95       	dec	r25
    1068:	e9 f7       	brne	.-6      	; 0x1064 <changePassword+0x2e>

    /* Send "ready" signal to start receiving password */
    UART_sendByte(ready);
    106a:	8a ea       	ldi	r24, 0xAA	; 170
    106c:	0e 94 95 10 	call	0x212a	; 0x212a <UART_sendByte>
    UART_receiveString(pass);
    1070:	ce 01       	movw	r24, r28
    1072:	41 96       	adiw	r24, 0x11	; 17
    1074:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <UART_receiveString>

    /* Send "ready" signal to start receiving the second password */
    UART_sendByte(ready);
    1078:	8a ea       	ldi	r24, 0xAA	; 170
    107a:	0e 94 95 10 	call	0x212a	; 0x212a <UART_sendByte>
    UART_receiveString(pass2);
    107e:	ce 01       	movw	r24, r28
    1080:	47 96       	adiw	r24, 0x17	; 23
    1082:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <UART_receiveString>

    int i = 0;
    1086:	18 8a       	std	Y+16, r1	; 0x10
    1088:	1f 86       	std	Y+15, r1	; 0x0f
    for (i = 1; i < 5; i++) {
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	98 8b       	std	Y+16, r25	; 0x10
    1090:	8f 87       	std	Y+15, r24	; 0x0f
    1092:	1a c0       	rjmp	.+52     	; 0x10c8 <changePassword+0x92>
        if (pass[i] != pass2[i])
    1094:	2f 85       	ldd	r18, Y+15	; 0x0f
    1096:	38 89       	ldd	r19, Y+16	; 0x10
    1098:	ce 01       	movw	r24, r28
    109a:	41 96       	adiw	r24, 0x11	; 17
    109c:	fc 01       	movw	r30, r24
    109e:	e2 0f       	add	r30, r18
    10a0:	f3 1f       	adc	r31, r19
    10a2:	40 81       	ld	r20, Z
    10a4:	2f 85       	ldd	r18, Y+15	; 0x0f
    10a6:	38 89       	ldd	r19, Y+16	; 0x10
    10a8:	ce 01       	movw	r24, r28
    10aa:	47 96       	adiw	r24, 0x17	; 23
    10ac:	fc 01       	movw	r30, r24
    10ae:	e2 0f       	add	r30, r18
    10b0:	f3 1f       	adc	r31, r19
    10b2:	80 81       	ld	r24, Z
    10b4:	48 17       	cp	r20, r24
    10b6:	19 f0       	breq	.+6      	; 0x10be <changePassword+0x88>
            UART_sendByte(not_match);
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	0e 94 95 10 	call	0x212a	; 0x212a <UART_sendByte>
    /* Send "ready" signal to start receiving the second password */
    UART_sendByte(ready);
    UART_receiveString(pass2);

    int i = 0;
    for (i = 1; i < 5; i++) {
    10be:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c0:	98 89       	ldd	r25, Y+16	; 0x10
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	98 8b       	std	Y+16, r25	; 0x10
    10c6:	8f 87       	std	Y+15, r24	; 0x0f
    10c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ca:	98 89       	ldd	r25, Y+16	; 0x10
    10cc:	85 30       	cpi	r24, 0x05	; 5
    10ce:	91 05       	cpc	r25, r1
    10d0:	0c f3       	brlt	.-62     	; 0x1094 <changePassword+0x5e>
        if (pass[i] != pass2[i])
            UART_sendByte(not_match);
    }
    for (i = 0; i < 5; i++) {
    10d2:	18 8a       	std	Y+16, r1	; 0x10
    10d4:	1f 86       	std	Y+15, r1	; 0x0f
    10d6:	88 c0       	rjmp	.+272    	; 0x11e8 <changePassword+0x1b2>
        /* Write the new password to EEPROM */
        EEPROM_writeByte((100 + i), pass[i]);
    10d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    10da:	98 89       	ldd	r25, Y+16	; 0x10
    10dc:	8c 59       	subi	r24, 0x9C	; 156
    10de:	9f 4f       	sbci	r25, 0xFF	; 255
    10e0:	ac 01       	movw	r20, r24
    10e2:	2f 85       	ldd	r18, Y+15	; 0x0f
    10e4:	38 89       	ldd	r19, Y+16	; 0x10
    10e6:	ce 01       	movw	r24, r28
    10e8:	41 96       	adiw	r24, 0x11	; 17
    10ea:	fc 01       	movw	r30, r24
    10ec:	e2 0f       	add	r30, r18
    10ee:	f3 1f       	adc	r31, r19
    10f0:	20 81       	ld	r18, Z
    10f2:	ca 01       	movw	r24, r20
    10f4:	62 2f       	mov	r22, r18
    10f6:	0e 94 8d 0b 	call	0x171a	; 0x171a <EEPROM_writeByte>
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	a0 e2       	ldi	r26, 0x20	; 32
    1100:	b1 e4       	ldi	r27, 0x41	; 65
    1102:	8b 87       	std	Y+11, r24	; 0x0b
    1104:	9c 87       	std	Y+12, r25	; 0x0c
    1106:	ad 87       	std	Y+13, r26	; 0x0d
    1108:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    110a:	6b 85       	ldd	r22, Y+11	; 0x0b
    110c:	7c 85       	ldd	r23, Y+12	; 0x0c
    110e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1110:	9e 85       	ldd	r25, Y+14	; 0x0e
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	4a ef       	ldi	r20, 0xFA	; 250
    1118:	54 e4       	ldi	r21, 0x44	; 68
    111a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	8f 83       	std	Y+7, r24	; 0x07
    1124:	98 87       	std	Y+8, r25	; 0x08
    1126:	a9 87       	std	Y+9, r26	; 0x09
    1128:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    112a:	6f 81       	ldd	r22, Y+7	; 0x07
    112c:	78 85       	ldd	r23, Y+8	; 0x08
    112e:	89 85       	ldd	r24, Y+9	; 0x09
    1130:	9a 85       	ldd	r25, Y+10	; 0x0a
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	40 e8       	ldi	r20, 0x80	; 128
    1138:	5f e3       	ldi	r21, 0x3F	; 63
    113a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    113e:	88 23       	and	r24, r24
    1140:	2c f4       	brge	.+10     	; 0x114c <changePassword+0x116>
		__ticks = 1;
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 83       	std	Y+5, r24	; 0x05
    114a:	3f c0       	rjmp	.+126    	; 0x11ca <changePassword+0x194>
	else if (__tmp > 65535)
    114c:	6f 81       	ldd	r22, Y+7	; 0x07
    114e:	78 85       	ldd	r23, Y+8	; 0x08
    1150:	89 85       	ldd	r24, Y+9	; 0x09
    1152:	9a 85       	ldd	r25, Y+10	; 0x0a
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	3f ef       	ldi	r19, 0xFF	; 255
    1158:	4f e7       	ldi	r20, 0x7F	; 127
    115a:	57 e4       	ldi	r21, 0x47	; 71
    115c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1160:	18 16       	cp	r1, r24
    1162:	4c f5       	brge	.+82     	; 0x11b6 <changePassword+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1164:	6b 85       	ldd	r22, Y+11	; 0x0b
    1166:	7c 85       	ldd	r23, Y+12	; 0x0c
    1168:	8d 85       	ldd	r24, Y+13	; 0x0d
    116a:	9e 85       	ldd	r25, Y+14	; 0x0e
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	40 e2       	ldi	r20, 0x20	; 32
    1172:	51 e4       	ldi	r21, 0x41	; 65
    1174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1178:	dc 01       	movw	r26, r24
    117a:	cb 01       	movw	r24, r22
    117c:	bc 01       	movw	r22, r24
    117e:	cd 01       	movw	r24, r26
    1180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	9e 83       	std	Y+6, r25	; 0x06
    118a:	8d 83       	std	Y+5, r24	; 0x05
    118c:	0f c0       	rjmp	.+30     	; 0x11ac <changePassword+0x176>
    118e:	88 ec       	ldi	r24, 0xC8	; 200
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	9c 83       	std	Y+4, r25	; 0x04
    1194:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	f1 f7       	brne	.-4      	; 0x119a <changePassword+0x164>
    119e:	9c 83       	std	Y+4, r25	; 0x04
    11a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a2:	8d 81       	ldd	r24, Y+5	; 0x05
    11a4:	9e 81       	ldd	r25, Y+6	; 0x06
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	9e 83       	std	Y+6, r25	; 0x06
    11aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ac:	8d 81       	ldd	r24, Y+5	; 0x05
    11ae:	9e 81       	ldd	r25, Y+6	; 0x06
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	69 f7       	brne	.-38     	; 0x118e <changePassword+0x158>
    11b4:	14 c0       	rjmp	.+40     	; 0x11de <changePassword+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b6:	6f 81       	ldd	r22, Y+7	; 0x07
    11b8:	78 85       	ldd	r23, Y+8	; 0x08
    11ba:	89 85       	ldd	r24, Y+9	; 0x09
    11bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	9e 83       	std	Y+6, r25	; 0x06
    11c8:	8d 83       	std	Y+5, r24	; 0x05
    11ca:	8d 81       	ldd	r24, Y+5	; 0x05
    11cc:	9e 81       	ldd	r25, Y+6	; 0x06
    11ce:	9a 83       	std	Y+2, r25	; 0x02
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <changePassword+0x1a0>
    11da:	9a 83       	std	Y+2, r25	; 0x02
    11dc:	89 83       	std	Y+1, r24	; 0x01
    int i = 0;
    for (i = 1; i < 5; i++) {
        if (pass[i] != pass2[i])
            UART_sendByte(not_match);
    }
    for (i = 0; i < 5; i++) {
    11de:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e0:	98 89       	ldd	r25, Y+16	; 0x10
    11e2:	01 96       	adiw	r24, 0x01	; 1
    11e4:	98 8b       	std	Y+16, r25	; 0x10
    11e6:	8f 87       	std	Y+15, r24	; 0x0f
    11e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ea:	98 89       	ldd	r25, Y+16	; 0x10
    11ec:	85 30       	cpi	r24, 0x05	; 5
    11ee:	91 05       	cpc	r25, r1
    11f0:	0c f4       	brge	.+2      	; 0x11f4 <changePassword+0x1be>
    11f2:	72 cf       	rjmp	.-284    	; 0x10d8 <changePassword+0xa2>
        EEPROM_writeByte((100 + i), pass[i]);
        _delay_ms(10);
    }

    /* Send success match signal */
    UART_sendByte(match);
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	0e 94 95 10 	call	0x212a	; 0x212a <UART_sendByte>
}
    11fa:	6c 96       	adiw	r28, 0x1c	; 28
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <ComparePassword>:

/* Function to compare the entered password with the stored password */
void ComparePassword(void) {
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	66 97       	sbiw	r28, 0x16	; 22
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    uint8 EEPROM_pass[6] = {1, 2, 3, 4, 5};
    1220:	86 e0       	ldi	r24, 0x06	; 6
    1222:	fe 01       	movw	r30, r28
    1224:	71 96       	adiw	r30, 0x11	; 17
    1226:	df 01       	movw	r26, r30
    1228:	98 2f       	mov	r25, r24
    122a:	1d 92       	st	X+, r1
    122c:	9a 95       	dec	r25
    122e:	e9 f7       	brne	.-6      	; 0x122a <ComparePassword+0x1e>
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	89 8b       	std	Y+17, r24	; 0x11
    1234:	82 e0       	ldi	r24, 0x02	; 2
    1236:	8a 8b       	std	Y+18, r24	; 0x12
    1238:	83 e0       	ldi	r24, 0x03	; 3
    123a:	8b 8b       	std	Y+19, r24	; 0x13
    123c:	84 e0       	ldi	r24, 0x04	; 4
    123e:	8c 8b       	std	Y+20, r24	; 0x14
    1240:	85 e0       	ldi	r24, 0x05	; 5
    1242:	8d 8b       	std	Y+21, r24	; 0x15

    /* Send Compare_Password command */
    UART_sendByte(Compare_Password);
    1244:	8a ea       	ldi	r24, 0xAA	; 170
    1246:	0e 94 95 10 	call	0x212a	; 0x212a <UART_sendByte>

    /* Receive the entered password */
    UART_receiveString(resivedpass);
    124a:	8d e6       	ldi	r24, 0x6D	; 109
    124c:	91 e0       	ldi	r25, 0x01	; 1
    124e:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <UART_receiveString>

    int i = 0;
    1252:	18 8a       	std	Y+16, r1	; 0x10
    1254:	1f 86       	std	Y+15, r1	; 0x0f
    for (i = 1; i < 5; i++) {
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	98 8b       	std	Y+16, r25	; 0x10
    125c:	8f 87       	std	Y+15, r24	; 0x0f
    125e:	87 c0       	rjmp	.+270    	; 0x136e <ComparePassword+0x162>
        /* Read the stored password from EEPROM */
        EEPROM_readByte((100 + i), &EEPROM_pass[i]);
    1260:	8f 85       	ldd	r24, Y+15	; 0x0f
    1262:	98 89       	ldd	r25, Y+16	; 0x10
    1264:	8c 59       	subi	r24, 0x9C	; 156
    1266:	9f 4f       	sbci	r25, 0xFF	; 255
    1268:	ac 01       	movw	r20, r24
    126a:	8f 85       	ldd	r24, Y+15	; 0x0f
    126c:	98 89       	ldd	r25, Y+16	; 0x10
    126e:	9e 01       	movw	r18, r28
    1270:	2f 5e       	subi	r18, 0xEF	; 239
    1272:	3f 4f       	sbci	r19, 0xFF	; 255
    1274:	28 0f       	add	r18, r24
    1276:	39 1f       	adc	r19, r25
    1278:	ca 01       	movw	r24, r20
    127a:	b9 01       	movw	r22, r18
    127c:	0e 94 ce 0b 	call	0x179c	; 0x179c <EEPROM_readByte>
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	a0 e2       	ldi	r26, 0x20	; 32
    1286:	b1 e4       	ldi	r27, 0x41	; 65
    1288:	8b 87       	std	Y+11, r24	; 0x0b
    128a:	9c 87       	std	Y+12, r25	; 0x0c
    128c:	ad 87       	std	Y+13, r26	; 0x0d
    128e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1290:	6b 85       	ldd	r22, Y+11	; 0x0b
    1292:	7c 85       	ldd	r23, Y+12	; 0x0c
    1294:	8d 85       	ldd	r24, Y+13	; 0x0d
    1296:	9e 85       	ldd	r25, Y+14	; 0x0e
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	4a ef       	ldi	r20, 0xFA	; 250
    129e:	54 e4       	ldi	r21, 0x44	; 68
    12a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	8f 83       	std	Y+7, r24	; 0x07
    12aa:	98 87       	std	Y+8, r25	; 0x08
    12ac:	a9 87       	std	Y+9, r26	; 0x09
    12ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12b0:	6f 81       	ldd	r22, Y+7	; 0x07
    12b2:	78 85       	ldd	r23, Y+8	; 0x08
    12b4:	89 85       	ldd	r24, Y+9	; 0x09
    12b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	40 e8       	ldi	r20, 0x80	; 128
    12be:	5f e3       	ldi	r21, 0x3F	; 63
    12c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12c4:	88 23       	and	r24, r24
    12c6:	2c f4       	brge	.+10     	; 0x12d2 <ComparePassword+0xc6>
		__ticks = 1;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	9e 83       	std	Y+6, r25	; 0x06
    12ce:	8d 83       	std	Y+5, r24	; 0x05
    12d0:	3f c0       	rjmp	.+126    	; 0x1350 <ComparePassword+0x144>
	else if (__tmp > 65535)
    12d2:	6f 81       	ldd	r22, Y+7	; 0x07
    12d4:	78 85       	ldd	r23, Y+8	; 0x08
    12d6:	89 85       	ldd	r24, Y+9	; 0x09
    12d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	3f ef       	ldi	r19, 0xFF	; 255
    12de:	4f e7       	ldi	r20, 0x7F	; 127
    12e0:	57 e4       	ldi	r21, 0x47	; 71
    12e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12e6:	18 16       	cp	r1, r24
    12e8:	4c f5       	brge	.+82     	; 0x133c <ComparePassword+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	40 e2       	ldi	r20, 0x20	; 32
    12f8:	51 e4       	ldi	r21, 0x41	; 65
    12fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	bc 01       	movw	r22, r24
    1304:	cd 01       	movw	r24, r26
    1306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	9e 83       	std	Y+6, r25	; 0x06
    1310:	8d 83       	std	Y+5, r24	; 0x05
    1312:	0f c0       	rjmp	.+30     	; 0x1332 <ComparePassword+0x126>
    1314:	88 ec       	ldi	r24, 0xC8	; 200
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	9c 83       	std	Y+4, r25	; 0x04
    131a:	8b 83       	std	Y+3, r24	; 0x03
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	9c 81       	ldd	r25, Y+4	; 0x04
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	f1 f7       	brne	.-4      	; 0x1320 <ComparePassword+0x114>
    1324:	9c 83       	std	Y+4, r25	; 0x04
    1326:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1328:	8d 81       	ldd	r24, Y+5	; 0x05
    132a:	9e 81       	ldd	r25, Y+6	; 0x06
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	9e 83       	std	Y+6, r25	; 0x06
    1330:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1332:	8d 81       	ldd	r24, Y+5	; 0x05
    1334:	9e 81       	ldd	r25, Y+6	; 0x06
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	69 f7       	brne	.-38     	; 0x1314 <ComparePassword+0x108>
    133a:	14 c0       	rjmp	.+40     	; 0x1364 <ComparePassword+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    133c:	6f 81       	ldd	r22, Y+7	; 0x07
    133e:	78 85       	ldd	r23, Y+8	; 0x08
    1340:	89 85       	ldd	r24, Y+9	; 0x09
    1342:	9a 85       	ldd	r25, Y+10	; 0x0a
    1344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	9e 83       	std	Y+6, r25	; 0x06
    134e:	8d 83       	std	Y+5, r24	; 0x05
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	9a 83       	std	Y+2, r25	; 0x02
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	9a 81       	ldd	r25, Y+2	; 0x02
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	f1 f7       	brne	.-4      	; 0x135c <ComparePassword+0x150>
    1360:	9a 83       	std	Y+2, r25	; 0x02
    1362:	89 83       	std	Y+1, r24	; 0x01

    /* Receive the entered password */
    UART_receiveString(resivedpass);

    int i = 0;
    for (i = 1; i < 5; i++) {
    1364:	8f 85       	ldd	r24, Y+15	; 0x0f
    1366:	98 89       	ldd	r25, Y+16	; 0x10
    1368:	01 96       	adiw	r24, 0x01	; 1
    136a:	98 8b       	std	Y+16, r25	; 0x10
    136c:	8f 87       	std	Y+15, r24	; 0x0f
    136e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1370:	98 89       	ldd	r25, Y+16	; 0x10
    1372:	85 30       	cpi	r24, 0x05	; 5
    1374:	91 05       	cpc	r25, r1
    1376:	0c f4       	brge	.+2      	; 0x137a <ComparePassword+0x16e>
    1378:	73 cf       	rjmp	.-282    	; 0x1260 <ComparePassword+0x54>
        /* Read the stored password from EEPROM */
        EEPROM_readByte((100 + i), &EEPROM_pass[i]);
        _delay_ms(10);
    }

    for (i = 1; i < 5; i++) {
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	98 8b       	std	Y+16, r25	; 0x10
    1380:	8f 87       	std	Y+15, r24	; 0x0f
    1382:	18 c0       	rjmp	.+48     	; 0x13b4 <ComparePassword+0x1a8>
        if (EEPROM_pass[i] != resivedpass[i]) {
    1384:	2f 85       	ldd	r18, Y+15	; 0x0f
    1386:	38 89       	ldd	r19, Y+16	; 0x10
    1388:	ce 01       	movw	r24, r28
    138a:	41 96       	adiw	r24, 0x11	; 17
    138c:	fc 01       	movw	r30, r24
    138e:	e2 0f       	add	r30, r18
    1390:	f3 1f       	adc	r31, r19
    1392:	20 81       	ld	r18, Z
    1394:	8f 85       	ldd	r24, Y+15	; 0x0f
    1396:	98 89       	ldd	r25, Y+16	; 0x10
    1398:	fc 01       	movw	r30, r24
    139a:	e3 59       	subi	r30, 0x93	; 147
    139c:	fe 4f       	sbci	r31, 0xFE	; 254
    139e:	80 81       	ld	r24, Z
    13a0:	28 17       	cp	r18, r24
    13a2:	19 f0       	breq	.+6      	; 0x13aa <ComparePassword+0x19e>
            /* Send not match signal */
            UART_sendByte(not_match);
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	0e 94 95 10 	call	0x212a	; 0x212a <UART_sendByte>
        /* Read the stored password from EEPROM */
        EEPROM_readByte((100 + i), &EEPROM_pass[i]);
        _delay_ms(10);
    }

    for (i = 1; i < 5; i++) {
    13aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ac:	98 89       	ldd	r25, Y+16	; 0x10
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	98 8b       	std	Y+16, r25	; 0x10
    13b2:	8f 87       	std	Y+15, r24	; 0x0f
    13b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    13b6:	98 89       	ldd	r25, Y+16	; 0x10
    13b8:	85 30       	cpi	r24, 0x05	; 5
    13ba:	91 05       	cpc	r25, r1
    13bc:	1c f3       	brlt	.-58     	; 0x1384 <ComparePassword+0x178>
            UART_sendByte(not_match);
        }
    }

    /* Send match signal */
    UART_sendByte(match);
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	0e 94 95 10 	call	0x212a	; 0x212a <UART_sendByte>
}
    13c4:	66 96       	adiw	r28, 0x16	; 22
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <OpenDoor>:

/* Function to control the door opening process */
void OpenDoor(void) {
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    if (Tick == 0) {
    13de:	80 91 68 01 	lds	r24, 0x0168
    13e2:	88 23       	and	r24, r24
    13e4:	29 f4       	brne	.+10     	; 0x13f0 <OpenDoor+0x1a>
        /* Rotate the motor in clockwise direction */
        DcMotor_Rotate(CW, 100);
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	64 e6       	ldi	r22, 0x64	; 100
    13ea:	0e 94 2b 0b 	call	0x1656	; 0x1656 <DcMotor_Rotate>
    13ee:	1f c0       	rjmp	.+62     	; 0x142e <OpenDoor+0x58>
    } else if (Tick == 5) {
    13f0:	80 91 68 01 	lds	r24, 0x0168
    13f4:	85 30       	cpi	r24, 0x05	; 5
    13f6:	29 f4       	brne	.+10     	; 0x1402 <OpenDoor+0x2c>
        /* Stop the motor */
        DcMotor_Rotate(STOP, 0);
    13f8:	82 e0       	ldi	r24, 0x02	; 2
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	0e 94 2b 0b 	call	0x1656	; 0x1656 <DcMotor_Rotate>
    1400:	16 c0       	rjmp	.+44     	; 0x142e <OpenDoor+0x58>
    } else if (Tick == 6) {
    1402:	80 91 68 01 	lds	r24, 0x0168
    1406:	86 30       	cpi	r24, 0x06	; 6
    1408:	29 f4       	brne	.+10     	; 0x1414 <OpenDoor+0x3e>
        /* Rotate the motor in anti-clockwise direction */
        DcMotor_Rotate(A_CW, 100);
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	64 e6       	ldi	r22, 0x64	; 100
    140e:	0e 94 2b 0b 	call	0x1656	; 0x1656 <DcMotor_Rotate>
    1412:	0d c0       	rjmp	.+26     	; 0x142e <OpenDoor+0x58>
    } else if (Tick == 11) {
    1414:	80 91 68 01 	lds	r24, 0x0168
    1418:	8b 30       	cpi	r24, 0x0B	; 11
    141a:	49 f4       	brne	.+18     	; 0x142e <OpenDoor+0x58>
        /* Stop the motor and deinitialize Timer1 */
        DcMotor_Rotate(STOP, 0);
    141c:	82 e0       	ldi	r24, 0x02	; 2
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	0e 94 2b 0b 	call	0x1656	; 0x1656 <DcMotor_Rotate>
        Timer1_deInit();
    1424:	0e 94 58 07 	call	0xeb0	; 0xeb0 <Timer1_deInit>
        Tick = -1;
    1428:	8f ef       	ldi	r24, 0xFF	; 255
    142a:	80 93 68 01 	sts	0x0168, r24
    }
    Tick++;
    142e:	80 91 68 01 	lds	r24, 0x0168
    1432:	8f 5f       	subi	r24, 0xFF	; 255
    1434:	80 93 68 01 	sts	0x0168, r24
}
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <main>:
TWI_ConfigType twi_ptr;

/* Global variable for command */
uint8 command;

int main(void) {
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	61 97       	sbiw	r28, 0x11	; 17
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
    /* UART configuration */
    UART_ptr.baud_rate = UART_BAUD_9600;
    1452:	10 92 76 01 	sts	0x0176, r1
    UART_ptr.bit_data = UART_8_BITS;
    1456:	83 e0       	ldi	r24, 0x03	; 3
    1458:	80 93 73 01 	sts	0x0173, r24
    UART_ptr.parity = UART_PARITY_NONE;
    145c:	10 92 74 01 	sts	0x0174, r1
    UART_ptr.stop_bit = UART_STOP_1_BIT;
    1460:	10 92 75 01 	sts	0x0175, r1
    UART_init(&UART_ptr);
    1464:	83 e7       	ldi	r24, 0x73	; 115
    1466:	91 e0       	ldi	r25, 0x01	; 1
    1468:	0e 94 25 10 	call	0x204a	; 0x204a <UART_init>

    /* Timer1 configuration */
    TIMER_ptr.mode = compare;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	80 93 81 01 	sts	0x0181, r24
    TIMER_ptr.compare_value = 23440; // 3 seconds
    1472:	80 e9       	ldi	r24, 0x90	; 144
    1474:	9b e5       	ldi	r25, 0x5B	; 91
    1476:	90 93 7f 01 	sts	0x017F, r25
    147a:	80 93 7e 01 	sts	0x017E, r24
    TIMER_ptr.initial_value = 0;
    147e:	10 92 7d 01 	sts	0x017D, r1
    1482:	10 92 7c 01 	sts	0x017C, r1
    TIMER_ptr.prescaler = F_CPU_1024;
    1486:	85 e0       	ldi	r24, 0x05	; 5
    1488:	80 93 80 01 	sts	0x0180, r24
    Timer1_setCallBack(OpenDoor);
    148c:	8b ee       	ldi	r24, 0xEB	; 235
    148e:	99 e0       	ldi	r25, 0x09	; 9
    1490:	0e 94 70 07 	call	0xee0	; 0xee0 <Timer1_setCallBack>

    /* TWI (I2C) configuration */
    twi_ptr.address = 0x01;
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	90 93 79 01 	sts	0x0179, r25
    149c:	80 93 78 01 	sts	0x0178, r24
    twi_ptr.bit_rate = 400000;
    14a0:	80 e8       	ldi	r24, 0x80	; 128
    14a2:	9a e1       	ldi	r25, 0x1A	; 26
    14a4:	90 93 7b 01 	sts	0x017B, r25
    14a8:	80 93 7a 01 	sts	0x017A, r24
    TWI_init(&twi_ptr);
    14ac:	88 e7       	ldi	r24, 0x78	; 120
    14ae:	91 e0       	ldi	r25, 0x01	; 1
    14b0:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <TWI_init>

    /* Initialize DC motor and buzzer */
    DcMotor_Init();
    14b4:	0e 94 10 0b 	call	0x1620	; 0x1620 <DcMotor_Init>
    Buzzer_init();
    14b8:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <Buzzer_init>

    while (1) {
        /* Receive command from HMI ECU */
        command = UART_recieveByte();
    14bc:	0e 94 ac 10 	call	0x2158	; 0x2158 <UART_recieveByte>
    14c0:	80 93 77 01 	sts	0x0177, r24

        /* Execute the received command from HMI ECU */
        switch (command) {
    14c4:	80 91 77 01 	lds	r24, 0x0177
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	39 8b       	std	Y+17, r19	; 0x11
    14ce:	28 8b       	std	Y+16, r18	; 0x10
    14d0:	88 89       	ldd	r24, Y+16	; 0x10
    14d2:	99 89       	ldd	r25, Y+17	; 0x11
    14d4:	81 31       	cpi	r24, 0x11	; 17
    14d6:	91 05       	cpc	r25, r1
    14d8:	f9 f0       	breq	.+62     	; 0x1518 <main+0xda>
    14da:	28 89       	ldd	r18, Y+16	; 0x10
    14dc:	39 89       	ldd	r19, Y+17	; 0x11
    14de:	22 31       	cpi	r18, 0x12	; 18
    14e0:	31 05       	cpc	r19, r1
    14e2:	34 f4       	brge	.+12     	; 0x14f0 <main+0xb2>
    14e4:	88 89       	ldd	r24, Y+16	; 0x10
    14e6:	99 89       	ldd	r25, Y+17	; 0x11
    14e8:	80 31       	cpi	r24, 0x10	; 16
    14ea:	91 05       	cpc	r25, r1
    14ec:	71 f0       	breq	.+28     	; 0x150a <main+0xcc>
    14ee:	e6 cf       	rjmp	.-52     	; 0x14bc <main+0x7e>
    14f0:	28 89       	ldd	r18, Y+16	; 0x10
    14f2:	39 89       	ldd	r19, Y+17	; 0x11
    14f4:	22 31       	cpi	r18, 0x12	; 18
    14f6:	31 05       	cpc	r19, r1
    14f8:	91 f0       	breq	.+36     	; 0x151e <main+0xe0>
    14fa:	88 89       	ldd	r24, Y+16	; 0x10
    14fc:	99 89       	ldd	r25, Y+17	; 0x11
    14fe:	8a 3a       	cpi	r24, 0xAA	; 170
    1500:	91 05       	cpc	r25, r1
    1502:	e1 f6       	brne	.-72     	; 0x14bc <main+0x7e>
            case Compare_Password:
                ComparePassword();
    1504:	0e 94 06 09 	call	0x120c	; 0x120c <ComparePassword>
    1508:	d9 cf       	rjmp	.-78     	; 0x14bc <main+0x7e>
                break;
            case OPEN_DOOR_COMMAND:
                Timer1_init(&TIMER_ptr);
    150a:	8c e7       	ldi	r24, 0x7C	; 124
    150c:	91 e0       	ldi	r25, 0x01	; 1
    150e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Timer1_init>
                OpenDoor(); // to open the door for the first time
    1512:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <OpenDoor>
    1516:	d2 cf       	rjmp	.-92     	; 0x14bc <main+0x7e>
                break;
            case CHANGE_PASSWORD_COMMAND:
                changePassword();
    1518:	0e 94 1b 08 	call	0x1036	; 0x1036 <changePassword>
    151c:	cf cf       	rjmp	.-98     	; 0x14bc <main+0x7e>
                break;
            case ALARM_COMMAND: {
                Buzzer_on();
    151e:	0e 94 03 08 	call	0x1006	; 0x1006 <Buzzer_on>
                uint8 i = 0;
    1522:	1f 86       	std	Y+15, r1	; 0x0f
                for (i = 0; i < 60; i++) {
    1524:	1f 86       	std	Y+15, r1	; 0x0f
    1526:	75 c0       	rjmp	.+234    	; 0x1612 <main+0x1d4>
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	aa e7       	ldi	r26, 0x7A	; 122
    152e:	b4 e4       	ldi	r27, 0x44	; 68
    1530:	8b 87       	std	Y+11, r24	; 0x0b
    1532:	9c 87       	std	Y+12, r25	; 0x0c
    1534:	ad 87       	std	Y+13, r26	; 0x0d
    1536:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1538:	6b 85       	ldd	r22, Y+11	; 0x0b
    153a:	7c 85       	ldd	r23, Y+12	; 0x0c
    153c:	8d 85       	ldd	r24, Y+13	; 0x0d
    153e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	4a ef       	ldi	r20, 0xFA	; 250
    1546:	54 e4       	ldi	r21, 0x44	; 68
    1548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	8f 83       	std	Y+7, r24	; 0x07
    1552:	98 87       	std	Y+8, r25	; 0x08
    1554:	a9 87       	std	Y+9, r26	; 0x09
    1556:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1558:	6f 81       	ldd	r22, Y+7	; 0x07
    155a:	78 85       	ldd	r23, Y+8	; 0x08
    155c:	89 85       	ldd	r24, Y+9	; 0x09
    155e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e8       	ldi	r20, 0x80	; 128
    1566:	5f e3       	ldi	r21, 0x3F	; 63
    1568:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    156c:	88 23       	and	r24, r24
    156e:	2c f4       	brge	.+10     	; 0x157a <main+0x13c>
		__ticks = 1;
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	9e 83       	std	Y+6, r25	; 0x06
    1576:	8d 83       	std	Y+5, r24	; 0x05
    1578:	3f c0       	rjmp	.+126    	; 0x15f8 <main+0x1ba>
	else if (__tmp > 65535)
    157a:	6f 81       	ldd	r22, Y+7	; 0x07
    157c:	78 85       	ldd	r23, Y+8	; 0x08
    157e:	89 85       	ldd	r24, Y+9	; 0x09
    1580:	9a 85       	ldd	r25, Y+10	; 0x0a
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	3f ef       	ldi	r19, 0xFF	; 255
    1586:	4f e7       	ldi	r20, 0x7F	; 127
    1588:	57 e4       	ldi	r21, 0x47	; 71
    158a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    158e:	18 16       	cp	r1, r24
    1590:	4c f5       	brge	.+82     	; 0x15e4 <main+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1592:	6b 85       	ldd	r22, Y+11	; 0x0b
    1594:	7c 85       	ldd	r23, Y+12	; 0x0c
    1596:	8d 85       	ldd	r24, Y+13	; 0x0d
    1598:	9e 85       	ldd	r25, Y+14	; 0x0e
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e2       	ldi	r20, 0x20	; 32
    15a0:	51 e4       	ldi	r21, 0x41	; 65
    15a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	bc 01       	movw	r22, r24
    15ac:	cd 01       	movw	r24, r26
    15ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	8d 83       	std	Y+5, r24	; 0x05
    15ba:	0f c0       	rjmp	.+30     	; 0x15da <main+0x19c>
    15bc:	88 ec       	ldi	r24, 0xC8	; 200
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	9c 83       	std	Y+4, r25	; 0x04
    15c2:	8b 83       	std	Y+3, r24	; 0x03
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	9c 81       	ldd	r25, Y+4	; 0x04
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <main+0x18a>
    15cc:	9c 83       	std	Y+4, r25	; 0x04
    15ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d0:	8d 81       	ldd	r24, Y+5	; 0x05
    15d2:	9e 81       	ldd	r25, Y+6	; 0x06
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	9e 83       	std	Y+6, r25	; 0x06
    15d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15da:	8d 81       	ldd	r24, Y+5	; 0x05
    15dc:	9e 81       	ldd	r25, Y+6	; 0x06
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	69 f7       	brne	.-38     	; 0x15bc <main+0x17e>
    15e2:	14 c0       	rjmp	.+40     	; 0x160c <main+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e4:	6f 81       	ldd	r22, Y+7	; 0x07
    15e6:	78 85       	ldd	r23, Y+8	; 0x08
    15e8:	89 85       	ldd	r24, Y+9	; 0x09
    15ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	9e 83       	std	Y+6, r25	; 0x06
    15f6:	8d 83       	std	Y+5, r24	; 0x05
    15f8:	8d 81       	ldd	r24, Y+5	; 0x05
    15fa:	9e 81       	ldd	r25, Y+6	; 0x06
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	9a 81       	ldd	r25, Y+2	; 0x02
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	f1 f7       	brne	.-4      	; 0x1604 <main+0x1c6>
    1608:	9a 83       	std	Y+2, r25	; 0x02
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	8f 85       	ldd	r24, Y+15	; 0x0f
    160e:	8f 5f       	subi	r24, 0xFF	; 255
    1610:	8f 87       	std	Y+15, r24	; 0x0f
    1612:	8f 85       	ldd	r24, Y+15	; 0x0f
    1614:	8c 33       	cpi	r24, 0x3C	; 60
    1616:	08 f4       	brcc	.+2      	; 0x161a <main+0x1dc>
    1618:	87 cf       	rjmp	.-242    	; 0x1528 <main+0xea>
                    _delay_ms(1000);
                }
                Buzzer_off();
    161a:	0e 94 0f 08 	call	0x101e	; 0x101e <Buzzer_off>
    161e:	4e cf       	rjmp	.-356    	; 0x14bc <main+0x7e>

00001620 <DcMotor_Init>:

#include "gpio.h"
#include "pwm.h"
#include "dc.h"
void DcMotor_Init(void)
{
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
GPIO_setupPinDirection(PORTB_ID, PIN0_ID,PIN_OUTPUT);
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	41 e0       	ldi	r20, 0x01	; 1
    162e:	0e 94 2e 0c 	call	0x185c	; 0x185c <GPIO_setupPinDirection>
GPIO_setupPinDirection(PORTB_ID, PIN1_ID,PIN_OUTPUT);
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	61 e0       	ldi	r22, 0x01	; 1
    1636:	41 e0       	ldi	r20, 0x01	; 1
    1638:	0e 94 2e 0c 	call	0x185c	; 0x185c <GPIO_setupPinDirection>
/* Motor Pins direction output */
GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	40 e0       	ldi	r20, 0x00	; 0
    1642:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <GPIO_writePin>
GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_LOW);
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	61 e0       	ldi	r22, 0x01	; 1
    164a:	40 e0       	ldi	r20, 0x00	; 0
    164c:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <GPIO_writePin>
/* Motor is stop at the beginning */

}
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	08 95       	ret

00001656 <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	00 d0       	rcall	.+0      	; 0x165c <DcMotor_Rotate+0x6>
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	6a 83       	std	Y+2, r22	; 0x02
	PWM_Timer0_Start((uint8)((float32)(speed*255)/100));
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	48 2f       	mov	r20, r24
    1668:	50 e0       	ldi	r21, 0x00	; 0
    166a:	ca 01       	movw	r24, r20
    166c:	9c 01       	movw	r18, r24
    166e:	22 0f       	add	r18, r18
    1670:	33 1f       	adc	r19, r19
    1672:	c9 01       	movw	r24, r18
    1674:	96 95       	lsr	r25
    1676:	98 2f       	mov	r25, r24
    1678:	88 27       	eor	r24, r24
    167a:	97 95       	ror	r25
    167c:	87 95       	ror	r24
    167e:	82 1b       	sub	r24, r18
    1680:	93 0b       	sbc	r25, r19
    1682:	84 0f       	add	r24, r20
    1684:	95 1f       	adc	r25, r21
    1686:	aa 27       	eor	r26, r26
    1688:	97 fd       	sbrc	r25, 7
    168a:	a0 95       	com	r26
    168c:	ba 2f       	mov	r27, r26
    168e:	bc 01       	movw	r22, r24
    1690:	cd 01       	movw	r24, r26
    1692:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	bc 01       	movw	r22, r24
    169c:	cd 01       	movw	r24, r26
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	48 ec       	ldi	r20, 0xC8	; 200
    16a4:	52 e4       	ldi	r21, 0x42	; 66
    16a6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	bc 01       	movw	r22, r24
    16b0:	cd 01       	movw	r24, r26
    16b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <PWM_Timer0_Start>
if(state==CW)
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	88 23       	and	r24, r24
    16c2:	59 f4       	brne	.+22     	; 0x16da <DcMotor_Rotate+0x84>
{
	/* Motor rotate clockwise*/
	GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <GPIO_writePin>
	GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_HIGH);
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	61 e0       	ldi	r22, 0x01	; 1
    16d2:	41 e0       	ldi	r20, 0x01	; 1
    16d4:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <GPIO_writePin>
    16d8:	1b c0       	rjmp	.+54     	; 0x1710 <DcMotor_Rotate+0xba>
}
else if(state==A_CW)
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	81 30       	cpi	r24, 0x01	; 1
    16de:	59 f4       	brne	.+22     	; 0x16f6 <DcMotor_Rotate+0xa0>
{
	/* Motor rotate counter clockwise*/
	GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_LOW);
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	61 e0       	ldi	r22, 0x01	; 1
    16e4:	40 e0       	ldi	r20, 0x00	; 0
    16e6:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <GPIO_writePin>
	GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_HIGH);
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	41 e0       	ldi	r20, 0x01	; 1
    16f0:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <GPIO_writePin>
    16f4:	0d c0       	rjmp	.+26     	; 0x1710 <DcMotor_Rotate+0xba>
}
else if( state==STOP){
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	82 30       	cpi	r24, 0x02	; 2
    16fa:	51 f4       	brne	.+20     	; 0x1710 <DcMotor_Rotate+0xba>

	GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_LOW);
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	61 e0       	ldi	r22, 0x01	; 1
    1700:	40 e0       	ldi	r20, 0x00	; 0
    1702:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <GPIO_writePin>
	GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	40 e0       	ldi	r20, 0x00	; 0
    170c:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <GPIO_writePin>
}


}
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	00 d0       	rcall	.+0      	; 0x1720 <EEPROM_writeByte+0x6>
    1720:	00 d0       	rcall	.+0      	; 0x1722 <EEPROM_writeByte+0x8>
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	9a 83       	std	Y+2, r25	; 0x02
    1728:	89 83       	std	Y+1, r24	; 0x01
    172a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    172c:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1730:	0e 94 16 10 	call	0x202c	; 0x202c <TWI_getStatus>
    1734:	88 30       	cpi	r24, 0x08	; 8
    1736:	11 f0       	breq	.+4      	; 0x173c <EEPROM_writeByte+0x22>
        return ERROR;
    1738:	1c 82       	std	Y+4, r1	; 0x04
    173a:	28 c0       	rjmp	.+80     	; 0x178c <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	9a 81       	ldd	r25, Y+2	; 0x02
    1740:	80 70       	andi	r24, 0x00	; 0
    1742:	97 70       	andi	r25, 0x07	; 7
    1744:	88 0f       	add	r24, r24
    1746:	89 2f       	mov	r24, r25
    1748:	88 1f       	adc	r24, r24
    174a:	99 0b       	sbc	r25, r25
    174c:	91 95       	neg	r25
    174e:	80 6a       	ori	r24, 0xA0	; 160
    1750:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1754:	0e 94 16 10 	call	0x202c	; 0x202c <TWI_getStatus>
    1758:	88 31       	cpi	r24, 0x18	; 24
    175a:	11 f0       	breq	.+4      	; 0x1760 <EEPROM_writeByte+0x46>
        return ERROR; 
    175c:	1c 82       	std	Y+4, r1	; 0x04
    175e:	16 c0       	rjmp	.+44     	; 0x178c <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1766:	0e 94 16 10 	call	0x202c	; 0x202c <TWI_getStatus>
    176a:	88 32       	cpi	r24, 0x28	; 40
    176c:	11 f0       	breq	.+4      	; 0x1772 <EEPROM_writeByte+0x58>
        return ERROR;
    176e:	1c 82       	std	Y+4, r1	; 0x04
    1770:	0d c0       	rjmp	.+26     	; 0x178c <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1778:	0e 94 16 10 	call	0x202c	; 0x202c <TWI_getStatus>
    177c:	88 32       	cpi	r24, 0x28	; 40
    177e:	11 f0       	breq	.+4      	; 0x1784 <EEPROM_writeByte+0x6a>
        return ERROR;
    1780:	1c 82       	std	Y+4, r1	; 0x04
    1782:	04 c0       	rjmp	.+8      	; 0x178c <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1784:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <TWI_stop>
	
    return SUCCESS;
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	8c 83       	std	Y+4, r24	; 0x04
    178c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	00 d0       	rcall	.+0      	; 0x17a2 <EEPROM_readByte+0x6>
    17a2:	00 d0       	rcall	.+0      	; 0x17a4 <EEPROM_readByte+0x8>
    17a4:	0f 92       	push	r0
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	9a 83       	std	Y+2, r25	; 0x02
    17ac:	89 83       	std	Y+1, r24	; 0x01
    17ae:	7c 83       	std	Y+4, r23	; 0x04
    17b0:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    17b2:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    17b6:	0e 94 16 10 	call	0x202c	; 0x202c <TWI_getStatus>
    17ba:	88 30       	cpi	r24, 0x08	; 8
    17bc:	11 f0       	breq	.+4      	; 0x17c2 <EEPROM_readByte+0x26>
        return ERROR;
    17be:	1d 82       	std	Y+5, r1	; 0x05
    17c0:	44 c0       	rjmp	.+136    	; 0x184a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	9a 81       	ldd	r25, Y+2	; 0x02
    17c6:	80 70       	andi	r24, 0x00	; 0
    17c8:	97 70       	andi	r25, 0x07	; 7
    17ca:	88 0f       	add	r24, r24
    17cc:	89 2f       	mov	r24, r25
    17ce:	88 1f       	adc	r24, r24
    17d0:	99 0b       	sbc	r25, r25
    17d2:	91 95       	neg	r25
    17d4:	80 6a       	ori	r24, 0xA0	; 160
    17d6:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    17da:	0e 94 16 10 	call	0x202c	; 0x202c <TWI_getStatus>
    17de:	88 31       	cpi	r24, 0x18	; 24
    17e0:	11 f0       	breq	.+4      	; 0x17e6 <EEPROM_readByte+0x4a>
        return ERROR;
    17e2:	1d 82       	std	Y+5, r1	; 0x05
    17e4:	32 c0       	rjmp	.+100    	; 0x184a <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    17ec:	0e 94 16 10 	call	0x202c	; 0x202c <TWI_getStatus>
    17f0:	88 32       	cpi	r24, 0x28	; 40
    17f2:	11 f0       	breq	.+4      	; 0x17f8 <EEPROM_readByte+0x5c>
        return ERROR;
    17f4:	1d 82       	std	Y+5, r1	; 0x05
    17f6:	29 c0       	rjmp	.+82     	; 0x184a <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    17f8:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    17fc:	0e 94 16 10 	call	0x202c	; 0x202c <TWI_getStatus>
    1800:	80 31       	cpi	r24, 0x10	; 16
    1802:	11 f0       	breq	.+4      	; 0x1808 <EEPROM_readByte+0x6c>
        return ERROR;
    1804:	1d 82       	std	Y+5, r1	; 0x05
    1806:	21 c0       	rjmp	.+66     	; 0x184a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	9a 81       	ldd	r25, Y+2	; 0x02
    180c:	80 70       	andi	r24, 0x00	; 0
    180e:	97 70       	andi	r25, 0x07	; 7
    1810:	88 0f       	add	r24, r24
    1812:	89 2f       	mov	r24, r25
    1814:	88 1f       	adc	r24, r24
    1816:	99 0b       	sbc	r25, r25
    1818:	91 95       	neg	r25
    181a:	81 6a       	ori	r24, 0xA1	; 161
    181c:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1820:	0e 94 16 10 	call	0x202c	; 0x202c <TWI_getStatus>
    1824:	80 34       	cpi	r24, 0x40	; 64
    1826:	11 f0       	breq	.+4      	; 0x182c <EEPROM_readByte+0x90>
        return ERROR;
    1828:	1d 82       	std	Y+5, r1	; 0x05
    182a:	0f c0       	rjmp	.+30     	; 0x184a <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    182c:	0e 94 03 10 	call	0x2006	; 0x2006 <TWI_readByteWithNACK>
    1830:	eb 81       	ldd	r30, Y+3	; 0x03
    1832:	fc 81       	ldd	r31, Y+4	; 0x04
    1834:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1836:	0e 94 16 10 	call	0x202c	; 0x202c <TWI_getStatus>
    183a:	88 35       	cpi	r24, 0x58	; 88
    183c:	11 f0       	breq	.+4      	; 0x1842 <EEPROM_readByte+0xa6>
        return ERROR;
    183e:	1d 82       	std	Y+5, r1	; 0x05
    1840:	04 c0       	rjmp	.+8      	; 0x184a <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1842:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <TWI_stop>

    return SUCCESS;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	8d 83       	std	Y+5, r24	; 0x05
    184a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	00 d0       	rcall	.+0      	; 0x1862 <GPIO_setupPinDirection+0x6>
    1862:	00 d0       	rcall	.+0      	; 0x1864 <GPIO_setupPinDirection+0x8>
    1864:	0f 92       	push	r0
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	89 83       	std	Y+1, r24	; 0x01
    186c:	6a 83       	std	Y+2, r22	; 0x02
    186e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	88 30       	cpi	r24, 0x08	; 8
    1874:	08 f0       	brcs	.+2      	; 0x1878 <GPIO_setupPinDirection+0x1c>
    1876:	d5 c0       	rjmp	.+426    	; 0x1a22 <GPIO_setupPinDirection+0x1c6>
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	84 30       	cpi	r24, 0x04	; 4
    187c:	08 f0       	brcs	.+2      	; 0x1880 <GPIO_setupPinDirection+0x24>
    187e:	d1 c0       	rjmp	.+418    	; 0x1a22 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	3d 83       	std	Y+5, r19	; 0x05
    1888:	2c 83       	std	Y+4, r18	; 0x04
    188a:	8c 81       	ldd	r24, Y+4	; 0x04
    188c:	9d 81       	ldd	r25, Y+5	; 0x05
    188e:	81 30       	cpi	r24, 0x01	; 1
    1890:	91 05       	cpc	r25, r1
    1892:	09 f4       	brne	.+2      	; 0x1896 <GPIO_setupPinDirection+0x3a>
    1894:	43 c0       	rjmp	.+134    	; 0x191c <GPIO_setupPinDirection+0xc0>
    1896:	2c 81       	ldd	r18, Y+4	; 0x04
    1898:	3d 81       	ldd	r19, Y+5	; 0x05
    189a:	22 30       	cpi	r18, 0x02	; 2
    189c:	31 05       	cpc	r19, r1
    189e:	2c f4       	brge	.+10     	; 0x18aa <GPIO_setupPinDirection+0x4e>
    18a0:	8c 81       	ldd	r24, Y+4	; 0x04
    18a2:	9d 81       	ldd	r25, Y+5	; 0x05
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	71 f0       	breq	.+28     	; 0x18c4 <GPIO_setupPinDirection+0x68>
    18a8:	bc c0       	rjmp	.+376    	; 0x1a22 <GPIO_setupPinDirection+0x1c6>
    18aa:	2c 81       	ldd	r18, Y+4	; 0x04
    18ac:	3d 81       	ldd	r19, Y+5	; 0x05
    18ae:	22 30       	cpi	r18, 0x02	; 2
    18b0:	31 05       	cpc	r19, r1
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <GPIO_setupPinDirection+0x5a>
    18b4:	5f c0       	rjmp	.+190    	; 0x1974 <GPIO_setupPinDirection+0x118>
    18b6:	8c 81       	ldd	r24, Y+4	; 0x04
    18b8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ba:	83 30       	cpi	r24, 0x03	; 3
    18bc:	91 05       	cpc	r25, r1
    18be:	09 f4       	brne	.+2      	; 0x18c2 <GPIO_setupPinDirection+0x66>
    18c0:	85 c0       	rjmp	.+266    	; 0x19cc <GPIO_setupPinDirection+0x170>
    18c2:	af c0       	rjmp	.+350    	; 0x1a22 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	a1 f4       	brne	.+40     	; 0x18f2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    18ca:	aa e3       	ldi	r26, 0x3A	; 58
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	ea e3       	ldi	r30, 0x3A	; 58
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	48 2f       	mov	r20, r24
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	02 2e       	mov	r0, r18
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <GPIO_setupPinDirection+0x8c>
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	0a 94       	dec	r0
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <GPIO_setupPinDirection+0x88>
    18ec:	84 2b       	or	r24, r20
    18ee:	8c 93       	st	X, r24
    18f0:	98 c0       	rjmp	.+304    	; 0x1a22 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    18f2:	aa e3       	ldi	r26, 0x3A	; 58
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	ea e3       	ldi	r30, 0x3A	; 58
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	48 2f       	mov	r20, r24
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	02 2e       	mov	r0, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <GPIO_setupPinDirection+0xb4>
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	0a 94       	dec	r0
    1912:	e2 f7       	brpl	.-8      	; 0x190c <GPIO_setupPinDirection+0xb0>
    1914:	80 95       	com	r24
    1916:	84 23       	and	r24, r20
    1918:	8c 93       	st	X, r24
    191a:	83 c0       	rjmp	.+262    	; 0x1a22 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	a1 f4       	brne	.+40     	; 0x194a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1922:	a7 e3       	ldi	r26, 0x37	; 55
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e7 e3       	ldi	r30, 0x37	; 55
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	02 2e       	mov	r0, r18
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <GPIO_setupPinDirection+0xe4>
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	0a 94       	dec	r0
    1942:	e2 f7       	brpl	.-8      	; 0x193c <GPIO_setupPinDirection+0xe0>
    1944:	84 2b       	or	r24, r20
    1946:	8c 93       	st	X, r24
    1948:	6c c0       	rjmp	.+216    	; 0x1a22 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    194a:	a7 e3       	ldi	r26, 0x37	; 55
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e7 e3       	ldi	r30, 0x37	; 55
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	48 2f       	mov	r20, r24
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	02 2e       	mov	r0, r18
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <GPIO_setupPinDirection+0x10c>
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	0a 94       	dec	r0
    196a:	e2 f7       	brpl	.-8      	; 0x1964 <GPIO_setupPinDirection+0x108>
    196c:	80 95       	com	r24
    196e:	84 23       	and	r24, r20
    1970:	8c 93       	st	X, r24
    1972:	57 c0       	rjmp	.+174    	; 0x1a22 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	81 30       	cpi	r24, 0x01	; 1
    1978:	a1 f4       	brne	.+40     	; 0x19a2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    197a:	a4 e3       	ldi	r26, 0x34	; 52
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e4 e3       	ldi	r30, 0x34	; 52
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	48 2f       	mov	r20, r24
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	02 2e       	mov	r0, r18
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <GPIO_setupPinDirection+0x13c>
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	0a 94       	dec	r0
    199a:	e2 f7       	brpl	.-8      	; 0x1994 <GPIO_setupPinDirection+0x138>
    199c:	84 2b       	or	r24, r20
    199e:	8c 93       	st	X, r24
    19a0:	40 c0       	rjmp	.+128    	; 0x1a22 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    19a2:	a4 e3       	ldi	r26, 0x34	; 52
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e4 e3       	ldi	r30, 0x34	; 52
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	48 2f       	mov	r20, r24
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	02 2e       	mov	r0, r18
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <GPIO_setupPinDirection+0x164>
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	0a 94       	dec	r0
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <GPIO_setupPinDirection+0x160>
    19c4:	80 95       	com	r24
    19c6:	84 23       	and	r24, r20
    19c8:	8c 93       	st	X, r24
    19ca:	2b c0       	rjmp	.+86     	; 0x1a22 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	81 30       	cpi	r24, 0x01	; 1
    19d0:	a1 f4       	brne	.+40     	; 0x19fa <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    19d2:	a1 e3       	ldi	r26, 0x31	; 49
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e1 e3       	ldi	r30, 0x31	; 49
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	48 2f       	mov	r20, r24
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	02 2e       	mov	r0, r18
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <GPIO_setupPinDirection+0x194>
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	0a 94       	dec	r0
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <GPIO_setupPinDirection+0x190>
    19f4:	84 2b       	or	r24, r20
    19f6:	8c 93       	st	X, r24
    19f8:	14 c0       	rjmp	.+40     	; 0x1a22 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    19fa:	a1 e3       	ldi	r26, 0x31	; 49
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e1 e3       	ldi	r30, 0x31	; 49
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	48 2f       	mov	r20, r24
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	02 2e       	mov	r0, r18
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <GPIO_setupPinDirection+0x1bc>
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	0a 94       	dec	r0
    1a1a:	e2 f7       	brpl	.-8      	; 0x1a14 <GPIO_setupPinDirection+0x1b8>
    1a1c:	80 95       	com	r24
    1a1e:	84 23       	and	r24, r20
    1a20:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <GPIO_writePin+0x6>
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <GPIO_writePin+0x8>
    1a3a:	0f 92       	push	r0
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	89 83       	std	Y+1, r24	; 0x01
    1a42:	6a 83       	std	Y+2, r22	; 0x02
    1a44:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	88 30       	cpi	r24, 0x08	; 8
    1a4a:	08 f0       	brcs	.+2      	; 0x1a4e <GPIO_writePin+0x1c>
    1a4c:	d5 c0       	rjmp	.+426    	; 0x1bf8 <GPIO_writePin+0x1c6>
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	84 30       	cpi	r24, 0x04	; 4
    1a52:	08 f0       	brcs	.+2      	; 0x1a56 <GPIO_writePin+0x24>
    1a54:	d1 c0       	rjmp	.+418    	; 0x1bf8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	3d 83       	std	Y+5, r19	; 0x05
    1a5e:	2c 83       	std	Y+4, r18	; 0x04
    1a60:	8c 81       	ldd	r24, Y+4	; 0x04
    1a62:	9d 81       	ldd	r25, Y+5	; 0x05
    1a64:	81 30       	cpi	r24, 0x01	; 1
    1a66:	91 05       	cpc	r25, r1
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <GPIO_writePin+0x3a>
    1a6a:	43 c0       	rjmp	.+134    	; 0x1af2 <GPIO_writePin+0xc0>
    1a6c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a6e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a70:	22 30       	cpi	r18, 0x02	; 2
    1a72:	31 05       	cpc	r19, r1
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <GPIO_writePin+0x4e>
    1a76:	8c 81       	ldd	r24, Y+4	; 0x04
    1a78:	9d 81       	ldd	r25, Y+5	; 0x05
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	71 f0       	breq	.+28     	; 0x1a9a <GPIO_writePin+0x68>
    1a7e:	bc c0       	rjmp	.+376    	; 0x1bf8 <GPIO_writePin+0x1c6>
    1a80:	2c 81       	ldd	r18, Y+4	; 0x04
    1a82:	3d 81       	ldd	r19, Y+5	; 0x05
    1a84:	22 30       	cpi	r18, 0x02	; 2
    1a86:	31 05       	cpc	r19, r1
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <GPIO_writePin+0x5a>
    1a8a:	5f c0       	rjmp	.+190    	; 0x1b4a <GPIO_writePin+0x118>
    1a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a90:	83 30       	cpi	r24, 0x03	; 3
    1a92:	91 05       	cpc	r25, r1
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <GPIO_writePin+0x66>
    1a96:	85 c0       	rjmp	.+266    	; 0x1ba2 <GPIO_writePin+0x170>
    1a98:	af c0       	rjmp	.+350    	; 0x1bf8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	81 30       	cpi	r24, 0x01	; 1
    1a9e:	a1 f4       	brne	.+40     	; 0x1ac8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1aa0:	ab e3       	ldi	r26, 0x3B	; 59
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	eb e3       	ldi	r30, 0x3B	; 59
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	48 2f       	mov	r20, r24
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	02 2e       	mov	r0, r18
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <GPIO_writePin+0x8c>
    1aba:	88 0f       	add	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	0a 94       	dec	r0
    1ac0:	e2 f7       	brpl	.-8      	; 0x1aba <GPIO_writePin+0x88>
    1ac2:	84 2b       	or	r24, r20
    1ac4:	8c 93       	st	X, r24
    1ac6:	98 c0       	rjmp	.+304    	; 0x1bf8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1ac8:	ab e3       	ldi	r26, 0x3B	; 59
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	eb e3       	ldi	r30, 0x3B	; 59
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	48 2f       	mov	r20, r24
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	02 2e       	mov	r0, r18
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <GPIO_writePin+0xb4>
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	0a 94       	dec	r0
    1ae8:	e2 f7       	brpl	.-8      	; 0x1ae2 <GPIO_writePin+0xb0>
    1aea:	80 95       	com	r24
    1aec:	84 23       	and	r24, r20
    1aee:	8c 93       	st	X, r24
    1af0:	83 c0       	rjmp	.+262    	; 0x1bf8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	81 30       	cpi	r24, 0x01	; 1
    1af6:	a1 f4       	brne	.+40     	; 0x1b20 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1af8:	a8 e3       	ldi	r26, 0x38	; 56
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e8 e3       	ldi	r30, 0x38	; 56
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	48 2f       	mov	r20, r24
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	02 2e       	mov	r0, r18
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <GPIO_writePin+0xe4>
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	0a 94       	dec	r0
    1b18:	e2 f7       	brpl	.-8      	; 0x1b12 <GPIO_writePin+0xe0>
    1b1a:	84 2b       	or	r24, r20
    1b1c:	8c 93       	st	X, r24
    1b1e:	6c c0       	rjmp	.+216    	; 0x1bf8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1b20:	a8 e3       	ldi	r26, 0x38	; 56
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e8 e3       	ldi	r30, 0x38	; 56
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	48 2f       	mov	r20, r24
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	02 2e       	mov	r0, r18
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <GPIO_writePin+0x10c>
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	0a 94       	dec	r0
    1b40:	e2 f7       	brpl	.-8      	; 0x1b3a <GPIO_writePin+0x108>
    1b42:	80 95       	com	r24
    1b44:	84 23       	and	r24, r20
    1b46:	8c 93       	st	X, r24
    1b48:	57 c0       	rjmp	.+174    	; 0x1bf8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	81 30       	cpi	r24, 0x01	; 1
    1b4e:	a1 f4       	brne	.+40     	; 0x1b78 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1b50:	a5 e3       	ldi	r26, 0x35	; 53
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e5 e3       	ldi	r30, 0x35	; 53
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	48 2f       	mov	r20, r24
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	02 2e       	mov	r0, r18
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <GPIO_writePin+0x13c>
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	0a 94       	dec	r0
    1b70:	e2 f7       	brpl	.-8      	; 0x1b6a <GPIO_writePin+0x138>
    1b72:	84 2b       	or	r24, r20
    1b74:	8c 93       	st	X, r24
    1b76:	40 c0       	rjmp	.+128    	; 0x1bf8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1b78:	a5 e3       	ldi	r26, 0x35	; 53
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e5 e3       	ldi	r30, 0x35	; 53
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	48 2f       	mov	r20, r24
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	02 2e       	mov	r0, r18
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <GPIO_writePin+0x164>
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	0a 94       	dec	r0
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <GPIO_writePin+0x160>
    1b9a:	80 95       	com	r24
    1b9c:	84 23       	and	r24, r20
    1b9e:	8c 93       	st	X, r24
    1ba0:	2b c0       	rjmp	.+86     	; 0x1bf8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	81 30       	cpi	r24, 0x01	; 1
    1ba6:	a1 f4       	brne	.+40     	; 0x1bd0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1ba8:	a2 e3       	ldi	r26, 0x32	; 50
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e2 e3       	ldi	r30, 0x32	; 50
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	48 2f       	mov	r20, r24
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	02 2e       	mov	r0, r18
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <GPIO_writePin+0x194>
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	0a 94       	dec	r0
    1bc8:	e2 f7       	brpl	.-8      	; 0x1bc2 <GPIO_writePin+0x190>
    1bca:	84 2b       	or	r24, r20
    1bcc:	8c 93       	st	X, r24
    1bce:	14 c0       	rjmp	.+40     	; 0x1bf8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1bd0:	a2 e3       	ldi	r26, 0x32	; 50
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	e2 e3       	ldi	r30, 0x32	; 50
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	48 2f       	mov	r20, r24
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	02 2e       	mov	r0, r18
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <GPIO_writePin+0x1bc>
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	0a 94       	dec	r0
    1bf0:	e2 f7       	brpl	.-8      	; 0x1bea <GPIO_writePin+0x1b8>
    1bf2:	80 95       	com	r24
    1bf4:	84 23       	and	r24, r20
    1bf6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <GPIO_readPin+0x6>
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <GPIO_readPin+0x8>
    1c10:	0f 92       	push	r0
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	8a 83       	std	Y+2, r24	; 0x02
    1c18:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1c1a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	88 30       	cpi	r24, 0x08	; 8
    1c20:	08 f0       	brcs	.+2      	; 0x1c24 <GPIO_readPin+0x1c>
    1c22:	84 c0       	rjmp	.+264    	; 0x1d2c <GPIO_readPin+0x124>
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	84 30       	cpi	r24, 0x04	; 4
    1c28:	08 f0       	brcs	.+2      	; 0x1c2c <GPIO_readPin+0x24>
    1c2a:	80 c0       	rjmp	.+256    	; 0x1d2c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	3d 83       	std	Y+5, r19	; 0x05
    1c34:	2c 83       	std	Y+4, r18	; 0x04
    1c36:	4c 81       	ldd	r20, Y+4	; 0x04
    1c38:	5d 81       	ldd	r21, Y+5	; 0x05
    1c3a:	41 30       	cpi	r20, 0x01	; 1
    1c3c:	51 05       	cpc	r21, r1
    1c3e:	79 f1       	breq	.+94     	; 0x1c9e <GPIO_readPin+0x96>
    1c40:	8c 81       	ldd	r24, Y+4	; 0x04
    1c42:	9d 81       	ldd	r25, Y+5	; 0x05
    1c44:	82 30       	cpi	r24, 0x02	; 2
    1c46:	91 05       	cpc	r25, r1
    1c48:	34 f4       	brge	.+12     	; 0x1c56 <GPIO_readPin+0x4e>
    1c4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c4e:	21 15       	cp	r18, r1
    1c50:	31 05       	cpc	r19, r1
    1c52:	69 f0       	breq	.+26     	; 0x1c6e <GPIO_readPin+0x66>
    1c54:	6b c0       	rjmp	.+214    	; 0x1d2c <GPIO_readPin+0x124>
    1c56:	4c 81       	ldd	r20, Y+4	; 0x04
    1c58:	5d 81       	ldd	r21, Y+5	; 0x05
    1c5a:	42 30       	cpi	r20, 0x02	; 2
    1c5c:	51 05       	cpc	r21, r1
    1c5e:	b9 f1       	breq	.+110    	; 0x1cce <GPIO_readPin+0xc6>
    1c60:	8c 81       	ldd	r24, Y+4	; 0x04
    1c62:	9d 81       	ldd	r25, Y+5	; 0x05
    1c64:	83 30       	cpi	r24, 0x03	; 3
    1c66:	91 05       	cpc	r25, r1
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <GPIO_readPin+0x64>
    1c6a:	49 c0       	rjmp	.+146    	; 0x1cfe <GPIO_readPin+0xf6>
    1c6c:	5f c0       	rjmp	.+190    	; 0x1d2c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1c6e:	e9 e3       	ldi	r30, 0x39	; 57
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	88 2f       	mov	r24, r24
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	a9 01       	movw	r20, r18
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <GPIO_readPin+0x7e>
    1c82:	55 95       	asr	r21
    1c84:	47 95       	ror	r20
    1c86:	8a 95       	dec	r24
    1c88:	e2 f7       	brpl	.-8      	; 0x1c82 <GPIO_readPin+0x7a>
    1c8a:	ca 01       	movw	r24, r20
    1c8c:	81 70       	andi	r24, 0x01	; 1
    1c8e:	90 70       	andi	r25, 0x00	; 0
    1c90:	88 23       	and	r24, r24
    1c92:	19 f0       	breq	.+6      	; 0x1c9a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	89 83       	std	Y+1, r24	; 0x01
    1c98:	49 c0       	rjmp	.+146    	; 0x1d2c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c9a:	19 82       	std	Y+1, r1	; 0x01
    1c9c:	47 c0       	rjmp	.+142    	; 0x1d2c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1c9e:	e6 e3       	ldi	r30, 0x36	; 54
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	88 2f       	mov	r24, r24
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a9 01       	movw	r20, r18
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <GPIO_readPin+0xae>
    1cb2:	55 95       	asr	r21
    1cb4:	47 95       	ror	r20
    1cb6:	8a 95       	dec	r24
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <GPIO_readPin+0xaa>
    1cba:	ca 01       	movw	r24, r20
    1cbc:	81 70       	andi	r24, 0x01	; 1
    1cbe:	90 70       	andi	r25, 0x00	; 0
    1cc0:	88 23       	and	r24, r24
    1cc2:	19 f0       	breq	.+6      	; 0x1cca <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	31 c0       	rjmp	.+98     	; 0x1d2c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1cca:	19 82       	std	Y+1, r1	; 0x01
    1ccc:	2f c0       	rjmp	.+94     	; 0x1d2c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1cce:	e3 e3       	ldi	r30, 0x33	; 51
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	88 2f       	mov	r24, r24
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	a9 01       	movw	r20, r18
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <GPIO_readPin+0xde>
    1ce2:	55 95       	asr	r21
    1ce4:	47 95       	ror	r20
    1ce6:	8a 95       	dec	r24
    1ce8:	e2 f7       	brpl	.-8      	; 0x1ce2 <GPIO_readPin+0xda>
    1cea:	ca 01       	movw	r24, r20
    1cec:	81 70       	andi	r24, 0x01	; 1
    1cee:	90 70       	andi	r25, 0x00	; 0
    1cf0:	88 23       	and	r24, r24
    1cf2:	19 f0       	breq	.+6      	; 0x1cfa <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	89 83       	std	Y+1, r24	; 0x01
    1cf8:	19 c0       	rjmp	.+50     	; 0x1d2c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1cfa:	19 82       	std	Y+1, r1	; 0x01
    1cfc:	17 c0       	rjmp	.+46     	; 0x1d2c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1cfe:	e0 e3       	ldi	r30, 0x30	; 48
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	88 2f       	mov	r24, r24
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	a9 01       	movw	r20, r18
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <GPIO_readPin+0x10e>
    1d12:	55 95       	asr	r21
    1d14:	47 95       	ror	r20
    1d16:	8a 95       	dec	r24
    1d18:	e2 f7       	brpl	.-8      	; 0x1d12 <GPIO_readPin+0x10a>
    1d1a:	ca 01       	movw	r24, r20
    1d1c:	81 70       	andi	r24, 0x01	; 1
    1d1e:	90 70       	andi	r25, 0x00	; 0
    1d20:	88 23       	and	r24, r24
    1d22:	19 f0       	breq	.+6      	; 0x1d2a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	01 c0       	rjmp	.+2      	; 0x1d2c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d2a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <GPIO_setupPortDirection+0x6>
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <GPIO_setupPortDirection+0x8>
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    1d4c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	84 30       	cpi	r24, 0x04	; 4
    1d52:	90 f5       	brcc	.+100    	; 0x1db8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	3c 83       	std	Y+4, r19	; 0x04
    1d5c:	2b 83       	std	Y+3, r18	; 0x03
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	9c 81       	ldd	r25, Y+4	; 0x04
    1d62:	81 30       	cpi	r24, 0x01	; 1
    1d64:	91 05       	cpc	r25, r1
    1d66:	d1 f0       	breq	.+52     	; 0x1d9c <GPIO_setupPortDirection+0x5e>
    1d68:	2b 81       	ldd	r18, Y+3	; 0x03
    1d6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d6c:	22 30       	cpi	r18, 0x02	; 2
    1d6e:	31 05       	cpc	r19, r1
    1d70:	2c f4       	brge	.+10     	; 0x1d7c <GPIO_setupPortDirection+0x3e>
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	9c 81       	ldd	r25, Y+4	; 0x04
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	61 f0       	breq	.+24     	; 0x1d92 <GPIO_setupPortDirection+0x54>
    1d7a:	1e c0       	rjmp	.+60     	; 0x1db8 <GPIO_setupPortDirection+0x7a>
    1d7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d80:	22 30       	cpi	r18, 0x02	; 2
    1d82:	31 05       	cpc	r19, r1
    1d84:	81 f0       	breq	.+32     	; 0x1da6 <GPIO_setupPortDirection+0x68>
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8a:	83 30       	cpi	r24, 0x03	; 3
    1d8c:	91 05       	cpc	r25, r1
    1d8e:	81 f0       	breq	.+32     	; 0x1db0 <GPIO_setupPortDirection+0x72>
    1d90:	13 c0       	rjmp	.+38     	; 0x1db8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1d92:	ea e3       	ldi	r30, 0x3A	; 58
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	80 83       	st	Z, r24
    1d9a:	0e c0       	rjmp	.+28     	; 0x1db8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1d9c:	e7 e3       	ldi	r30, 0x37	; 55
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	80 83       	st	Z, r24
    1da4:	09 c0       	rjmp	.+18     	; 0x1db8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1da6:	e4 e3       	ldi	r30, 0x34	; 52
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	80 83       	st	Z, r24
    1dae:	04 c0       	rjmp	.+8      	; 0x1db8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1db0:	e1 e3       	ldi	r30, 0x31	; 49
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	00 d0       	rcall	.+0      	; 0x1dcc <GPIO_writePort+0x6>
    1dcc:	00 d0       	rcall	.+0      	; 0x1dce <GPIO_writePort+0x8>
    1dce:	cd b7       	in	r28, 0x3d	; 61
    1dd0:	de b7       	in	r29, 0x3e	; 62
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	84 30       	cpi	r24, 0x04	; 4
    1dda:	90 f5       	brcc	.+100    	; 0x1e40 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	3c 83       	std	Y+4, r19	; 0x04
    1de4:	2b 83       	std	Y+3, r18	; 0x03
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dea:	81 30       	cpi	r24, 0x01	; 1
    1dec:	91 05       	cpc	r25, r1
    1dee:	d1 f0       	breq	.+52     	; 0x1e24 <GPIO_writePort+0x5e>
    1df0:	2b 81       	ldd	r18, Y+3	; 0x03
    1df2:	3c 81       	ldd	r19, Y+4	; 0x04
    1df4:	22 30       	cpi	r18, 0x02	; 2
    1df6:	31 05       	cpc	r19, r1
    1df8:	2c f4       	brge	.+10     	; 0x1e04 <GPIO_writePort+0x3e>
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfe:	00 97       	sbiw	r24, 0x00	; 0
    1e00:	61 f0       	breq	.+24     	; 0x1e1a <GPIO_writePort+0x54>
    1e02:	1e c0       	rjmp	.+60     	; 0x1e40 <GPIO_writePort+0x7a>
    1e04:	2b 81       	ldd	r18, Y+3	; 0x03
    1e06:	3c 81       	ldd	r19, Y+4	; 0x04
    1e08:	22 30       	cpi	r18, 0x02	; 2
    1e0a:	31 05       	cpc	r19, r1
    1e0c:	81 f0       	breq	.+32     	; 0x1e2e <GPIO_writePort+0x68>
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	9c 81       	ldd	r25, Y+4	; 0x04
    1e12:	83 30       	cpi	r24, 0x03	; 3
    1e14:	91 05       	cpc	r25, r1
    1e16:	81 f0       	breq	.+32     	; 0x1e38 <GPIO_writePort+0x72>
    1e18:	13 c0       	rjmp	.+38     	; 0x1e40 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1e1a:	eb e3       	ldi	r30, 0x3B	; 59
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	80 83       	st	Z, r24
    1e22:	0e c0       	rjmp	.+28     	; 0x1e40 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1e24:	e8 e3       	ldi	r30, 0x38	; 56
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	80 83       	st	Z, r24
    1e2c:	09 c0       	rjmp	.+18     	; 0x1e40 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1e2e:	e5 e3       	ldi	r30, 0x35	; 53
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	80 83       	st	Z, r24
    1e36:	04 c0       	rjmp	.+8      	; 0x1e40 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1e38:	e2 e3       	ldi	r30, 0x32	; 50
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	00 d0       	rcall	.+0      	; 0x1e54 <GPIO_readPort+0x6>
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <GPIO_readPort+0x8>
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1e5c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	84 30       	cpi	r24, 0x04	; 4
    1e62:	90 f5       	brcc	.+100    	; 0x1ec8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	3c 83       	std	Y+4, r19	; 0x04
    1e6c:	2b 83       	std	Y+3, r18	; 0x03
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	9c 81       	ldd	r25, Y+4	; 0x04
    1e72:	81 30       	cpi	r24, 0x01	; 1
    1e74:	91 05       	cpc	r25, r1
    1e76:	d1 f0       	breq	.+52     	; 0x1eac <GPIO_readPort+0x5e>
    1e78:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e7c:	22 30       	cpi	r18, 0x02	; 2
    1e7e:	31 05       	cpc	r19, r1
    1e80:	2c f4       	brge	.+10     	; 0x1e8c <GPIO_readPort+0x3e>
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	9c 81       	ldd	r25, Y+4	; 0x04
    1e86:	00 97       	sbiw	r24, 0x00	; 0
    1e88:	61 f0       	breq	.+24     	; 0x1ea2 <GPIO_readPort+0x54>
    1e8a:	1e c0       	rjmp	.+60     	; 0x1ec8 <GPIO_readPort+0x7a>
    1e8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e90:	22 30       	cpi	r18, 0x02	; 2
    1e92:	31 05       	cpc	r19, r1
    1e94:	81 f0       	breq	.+32     	; 0x1eb6 <GPIO_readPort+0x68>
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9a:	83 30       	cpi	r24, 0x03	; 3
    1e9c:	91 05       	cpc	r25, r1
    1e9e:	81 f0       	breq	.+32     	; 0x1ec0 <GPIO_readPort+0x72>
    1ea0:	13 c0       	rjmp	.+38     	; 0x1ec8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1ea2:	e9 e3       	ldi	r30, 0x39	; 57
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	0e c0       	rjmp	.+28     	; 0x1ec8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1eac:	e6 e3       	ldi	r30, 0x36	; 54
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	89 83       	std	Y+1, r24	; 0x01
    1eb4:	09 c0       	rjmp	.+18     	; 0x1ec8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1eb6:	e3 e3       	ldi	r30, 0x33	; 51
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    1ebe:	04 c0       	rjmp	.+8      	; 0x1ec8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ec0:	e0 e3       	ldi	r30, 0x30	; 48
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	cf 91       	pop	r28
    1ed4:	df 91       	pop	r29
    1ed6:	08 95       	ret

00001ed8 <PWM_Timer0_Start>:
 */


#include "pwm.h"
void PWM_Timer0_Start(uint8 duty_cycle)
{
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	0f 92       	push	r0
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
    1ee2:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    1ee4:	e2 e5       	ldi	r30, 0x52	; 82
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	10 82       	st	Z, r1

	OCR0  = duty_cycle; // Set Compare Value
    1eea:	ec e5       	ldi	r30, 0x5C	; 92
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    1ef2:	a7 e3       	ldi	r26, 0x37	; 55
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e7 e3       	ldi	r30, 0x37	; 55
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	88 60       	ori	r24, 0x08	; 8
    1efe:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1f00:	e3 e5       	ldi	r30, 0x53	; 83
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	8a e6       	ldi	r24, 0x6A	; 106
    1f06:	80 83       	st	Z, r24
}
    1f08:	0f 90       	pop	r0
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	08 95       	ret

00001f10 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>
//0b00000010
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1f10:	0f 93       	push	r16
    1f12:	1f 93       	push	r17
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <TWI_init+0xa>
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	9a 83       	std	Y+2, r25	; 0x02
    1f20:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = (uint8_t)((F_CPU / (Config_Ptr->bit_rate * 2)) - 8);
    1f22:	00 e2       	ldi	r16, 0x20	; 32
    1f24:	10 e0       	ldi	r17, 0x00	; 0
    1f26:	e9 81       	ldd	r30, Y+1	; 0x01
    1f28:	fa 81       	ldd	r31, Y+2	; 0x02
    1f2a:	82 81       	ldd	r24, Z+2	; 0x02
    1f2c:	93 81       	ldd	r25, Z+3	; 0x03
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	9c 01       	movw	r18, r24
    1f34:	40 e0       	ldi	r20, 0x00	; 0
    1f36:	50 e0       	ldi	r21, 0x00	; 0
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	92 e1       	ldi	r25, 0x12	; 18
    1f3c:	aa e7       	ldi	r26, 0x7A	; 122
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	bc 01       	movw	r22, r24
    1f42:	cd 01       	movw	r24, r26
    1f44:	0e 94 27 11 	call	0x224e	; 0x224e <__udivmodsi4>
    1f48:	da 01       	movw	r26, r20
    1f4a:	c9 01       	movw	r24, r18
    1f4c:	88 50       	subi	r24, 0x08	; 8
    1f4e:	f8 01       	movw	r30, r16
    1f50:	80 83       	st	Z, r24
	TWSR = 0x00;
    1f52:	e1 e2       	ldi	r30, 0x21	; 33
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address; // my address = 0x01 :)
    1f58:	a2 e2       	ldi	r26, 0x22	; 34
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f60:	80 81       	ld	r24, Z
    1f62:	91 81       	ldd	r25, Z+1	; 0x01
    1f64:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    1f66:	e6 e5       	ldi	r30, 0x56	; 86
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	84 e0       	ldi	r24, 0x04	; 4
    1f6c:	80 83       	st	Z, r24
}
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	1f 91       	pop	r17
    1f78:	0f 91       	pop	r16
    1f7a:	08 95       	ret

00001f7c <TWI_start>:

void TWI_start(void)
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1f84:	e6 e5       	ldi	r30, 0x56	; 86
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	84 ea       	ldi	r24, 0xA4	; 164
    1f8a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1f8c:	e6 e5       	ldi	r30, 0x56	; 86
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	88 23       	and	r24, r24
    1f94:	dc f7       	brge	.-10     	; 0x1f8c <TWI_start+0x10>
}
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <TWI_stop>:

void TWI_stop(void)
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1fa4:	e6 e5       	ldi	r30, 0x56	; 86
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	84 e9       	ldi	r24, 0x94	; 148
    1faa:	80 83       	st	Z, r24
}
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	0f 92       	push	r0
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1fbe:	e3 e2       	ldi	r30, 0x23	; 35
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1fc6:	e6 e5       	ldi	r30, 0x56	; 86
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	84 e8       	ldi	r24, 0x84	; 132
    1fcc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1fce:	e6 e5       	ldi	r30, 0x56	; 86
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	88 23       	and	r24, r24
    1fd6:	dc f7       	brge	.-10     	; 0x1fce <TWI_writeByte+0x1c>
}
    1fd8:	0f 90       	pop	r0
    1fda:	cf 91       	pop	r28
    1fdc:	df 91       	pop	r29
    1fde:	08 95       	ret

00001fe0 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1fe8:	e6 e5       	ldi	r30, 0x56	; 86
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	84 ec       	ldi	r24, 0xC4	; 196
    1fee:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1ff0:	e6 e5       	ldi	r30, 0x56	; 86
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	88 23       	and	r24, r24
    1ff8:	dc f7       	brge	.-10     	; 0x1ff0 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1ffa:	e3 e2       	ldi	r30, 0x23	; 35
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
}
    2000:	cf 91       	pop	r28
    2002:	df 91       	pop	r29
    2004:	08 95       	ret

00002006 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    200e:	e6 e5       	ldi	r30, 0x56	; 86
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	84 e8       	ldi	r24, 0x84	; 132
    2014:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2016:	e6 e5       	ldi	r30, 0x56	; 86
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	88 23       	and	r24, r24
    201e:	dc f7       	brge	.-10     	; 0x2016 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2020:	e3 e2       	ldi	r30, 0x23	; 35
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
}
    2026:	cf 91       	pop	r28
    2028:	df 91       	pop	r29
    202a:	08 95       	ret

0000202c <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    202c:	df 93       	push	r29
    202e:	cf 93       	push	r28
    2030:	0f 92       	push	r0
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2036:	e1 e2       	ldi	r30, 0x21	; 33
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	88 7f       	andi	r24, 0xF8	; 248
    203e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2040:	89 81       	ldd	r24, Y+1	; 0x01
}
    2042:	0f 90       	pop	r0
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <UART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr) {
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	29 97       	sbiw	r28, 0x09	; 9
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	f8 94       	cli
    2058:	de bf       	out	0x3e, r29	; 62
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	cd bf       	out	0x3d, r28	; 61
    205e:	9f 83       	std	Y+7, r25	; 0x07
    2060:	8e 83       	std	Y+6, r24	; 0x06
    // Calculate the UBRR value based on the selected baud rate
    uint16_t ubrr_value;
    switch (Config_Ptr->baud_rate) {
    2062:	ee 81       	ldd	r30, Y+6	; 0x06
    2064:	ff 81       	ldd	r31, Y+7	; 0x07
    2066:	83 81       	ldd	r24, Z+3	; 0x03
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	39 87       	std	Y+9, r19	; 0x09
    206e:	28 87       	std	Y+8, r18	; 0x08
    2070:	88 85       	ldd	r24, Y+8	; 0x08
    2072:	99 85       	ldd	r25, Y+9	; 0x09
    2074:	00 97       	sbiw	r24, 0x00	; 0
    2076:	31 f0       	breq	.+12     	; 0x2084 <UART_init+0x3a>
    2078:	28 85       	ldd	r18, Y+8	; 0x08
    207a:	39 85       	ldd	r19, Y+9	; 0x09
    207c:	21 30       	cpi	r18, 0x01	; 1
    207e:	31 05       	cpc	r19, r1
    2080:	31 f0       	breq	.+12     	; 0x208e <UART_init+0x44>
    2082:	4a c0       	rjmp	.+148    	; 0x2118 <UART_init+0xce>
        case UART_BAUD_9600:
            ubrr_value = F_CPU / ((uint32)16 * 9600) - 1;
    2084:	83 e3       	ldi	r24, 0x33	; 51
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	9d 83       	std	Y+5, r25	; 0x05
    208a:	8c 83       	std	Y+4, r24	; 0x04
    208c:	04 c0       	rjmp	.+8      	; 0x2096 <UART_init+0x4c>
            break;
        case UART_BAUD_115200:
            ubrr_value = F_CPU / (uint32)((uint32)16 * 115200) - 1;
    208e:	83 e0       	ldi	r24, 0x03	; 3
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	9d 83       	std	Y+5, r25	; 0x05
    2094:	8c 83       	std	Y+4, r24	; 0x04
        default:
            // Handle unsupported baud rate
            return;
    }
    // Set the baud rate registers
    UBRRH = (uint8)(ubrr_value >> 8);
    2096:	e0 e4       	ldi	r30, 0x40	; 64
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	8c 81       	ldd	r24, Y+4	; 0x04
    209c:	9d 81       	ldd	r25, Y+5	; 0x05
    209e:	89 2f       	mov	r24, r25
    20a0:	99 27       	eor	r25, r25
    20a2:	80 83       	st	Z, r24
    UBRRL = (uint8)ubrr_value;
    20a4:	e9 e2       	ldi	r30, 0x29	; 41
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	8c 81       	ldd	r24, Y+4	; 0x04
    20aa:	80 83       	st	Z, r24

    // Configure data frame format: bit data, parity, and stop bits
    uint8_t data_bits = (Config_Ptr->bit_data);
    20ac:	ee 81       	ldd	r30, Y+6	; 0x06
    20ae:	ff 81       	ldd	r31, Y+7	; 0x07
    20b0:	80 81       	ld	r24, Z
    20b2:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t parity_bit = (Config_Ptr->parity) << UPM0;
    20b4:	ee 81       	ldd	r30, Y+6	; 0x06
    20b6:	ff 81       	ldd	r31, Y+7	; 0x07
    20b8:	81 81       	ldd	r24, Z+1	; 0x01
    20ba:	82 95       	swap	r24
    20bc:	80 7f       	andi	r24, 0xF0	; 240
    20be:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t stop_bits = (Config_Ptr->stop_bit) << USBS;
    20c0:	ee 81       	ldd	r30, Y+6	; 0x06
    20c2:	ff 81       	ldd	r31, Y+7	; 0x07
    20c4:	82 81       	ldd	r24, Z+2	; 0x02
    20c6:	88 0f       	add	r24, r24
    20c8:	88 0f       	add	r24, r24
    20ca:	88 0f       	add	r24, r24
    20cc:	89 83       	std	Y+1, r24	; 0x01

    UCSRC = (1 << URSEL) | (parity_bit) | (stop_bits) | (data_bits << UCSZ0);
    20ce:	e0 e4       	ldi	r30, 0x40	; 64
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	9a 81       	ldd	r25, Y+2	; 0x02
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	89 2b       	or	r24, r25
    20d8:	80 68       	ori	r24, 0x80	; 128
    20da:	28 2f       	mov	r18, r24
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	88 2f       	mov	r24, r24
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	88 0f       	add	r24, r24
    20e4:	99 1f       	adc	r25, r25
    20e6:	82 2b       	or	r24, r18
    20e8:	80 83       	st	Z, r24

    // Enable the transmitter and receiver
    UCSRB = (1 << TXEN) | (1 << RXEN);
    20ea:	ea e2       	ldi	r30, 0x2A	; 42
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	88 e1       	ldi	r24, 0x18	; 24
    20f0:	80 83       	st	Z, r24
    if(Config_Ptr->bit_data==UART_9_BITS)
    20f2:	ee 81       	ldd	r30, Y+6	; 0x06
    20f4:	ff 81       	ldd	r31, Y+7	; 0x07
    20f6:	80 81       	ld	r24, Z
    20f8:	84 30       	cpi	r24, 0x04	; 4
    20fa:	71 f4       	brne	.+28     	; 0x2118 <UART_init+0xce>
    {
    	UCSRB|=(1<<UCSZ2);
    20fc:	aa e2       	ldi	r26, 0x2A	; 42
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	ea e2       	ldi	r30, 0x2A	; 42
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	84 60       	ori	r24, 0x04	; 4
    2108:	8c 93       	st	X, r24
    	UCSRC|=(3<< UCSZ0);
    210a:	a0 e4       	ldi	r26, 0x40	; 64
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e0 e4       	ldi	r30, 0x40	; 64
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	86 60       	ori	r24, 0x06	; 6
    2116:	8c 93       	st	X, r24
    }
}
    2118:	29 96       	adiw	r28, 0x09	; 9
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	f8 94       	cli
    211e:	de bf       	out	0x3e, r29	; 62
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	cd bf       	out	0x3d, r28	; 61
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	0f 92       	push	r0
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2136:	eb e2       	ldi	r30, 0x2B	; 43
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	88 2f       	mov	r24, r24
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	80 72       	andi	r24, 0x20	; 32
    2142:	90 70       	andi	r25, 0x00	; 0
    2144:	00 97       	sbiw	r24, 0x00	; 0
    2146:	b9 f3       	breq	.-18     	; 0x2136 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2148:	ec e2       	ldi	r30, 0x2C	; 44
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2150:	0f 90       	pop	r0
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2160:	eb e2       	ldi	r30, 0x2B	; 43
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	88 23       	and	r24, r24
    2168:	dc f7       	brge	.-10     	; 0x2160 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    216a:	ec e2       	ldi	r30, 0x2C	; 44
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
}
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	00 d0       	rcall	.+0      	; 0x217c <UART_sendString+0x6>
    217c:	0f 92       	push	r0
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	9b 83       	std	Y+3, r25	; 0x03
    2184:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2186:	19 82       	std	Y+1, r1	; 0x01
    2188:	0e c0       	rjmp	.+28     	; 0x21a6 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	28 2f       	mov	r18, r24
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	8a 81       	ldd	r24, Y+2	; 0x02
    2192:	9b 81       	ldd	r25, Y+3	; 0x03
    2194:	fc 01       	movw	r30, r24
    2196:	e2 0f       	add	r30, r18
    2198:	f3 1f       	adc	r31, r19
    219a:	80 81       	ld	r24, Z
    219c:	0e 94 95 10 	call	0x212a	; 0x212a <UART_sendByte>
		i++;
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	8f 5f       	subi	r24, 0xFF	; 255
    21a4:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	28 2f       	mov	r18, r24
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	8a 81       	ldd	r24, Y+2	; 0x02
    21ae:	9b 81       	ldd	r25, Y+3	; 0x03
    21b0:	fc 01       	movw	r30, r24
    21b2:	e2 0f       	add	r30, r18
    21b4:	f3 1f       	adc	r31, r19
    21b6:	80 81       	ld	r24, Z
    21b8:	88 23       	and	r24, r24
    21ba:	39 f7       	brne	.-50     	; 0x218a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	08 95       	ret

000021c8 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    21c8:	0f 93       	push	r16
    21ca:	1f 93       	push	r17
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	00 d0       	rcall	.+0      	; 0x21d2 <UART_receiveString+0xa>
    21d2:	0f 92       	push	r0
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	9b 83       	std	Y+3, r25	; 0x03
    21da:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    21dc:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	28 2f       	mov	r18, r24
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	9b 81       	ldd	r25, Y+3	; 0x03
    21e8:	8c 01       	movw	r16, r24
    21ea:	02 0f       	add	r16, r18
    21ec:	13 1f       	adc	r17, r19
    21ee:	0e 94 ac 10 	call	0x2158	; 0x2158 <UART_recieveByte>
    21f2:	f8 01       	movw	r30, r16
    21f4:	80 83       	st	Z, r24
    21f6:	0f c0       	rjmp	.+30     	; 0x2216 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	8f 5f       	subi	r24, 0xFF	; 255
    21fc:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	28 2f       	mov	r18, r24
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	8a 81       	ldd	r24, Y+2	; 0x02
    2206:	9b 81       	ldd	r25, Y+3	; 0x03
    2208:	8c 01       	movw	r16, r24
    220a:	02 0f       	add	r16, r18
    220c:	13 1f       	adc	r17, r19
    220e:	0e 94 ac 10 	call	0x2158	; 0x2158 <UART_recieveByte>
    2212:	f8 01       	movw	r30, r16
    2214:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	28 2f       	mov	r18, r24
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
    221e:	9b 81       	ldd	r25, Y+3	; 0x03
    2220:	fc 01       	movw	r30, r24
    2222:	e2 0f       	add	r30, r18
    2224:	f3 1f       	adc	r31, r19
    2226:	80 81       	ld	r24, Z
    2228:	83 32       	cpi	r24, 0x23	; 35
    222a:	31 f7       	brne	.-52     	; 0x21f8 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	28 2f       	mov	r18, r24
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	8a 81       	ldd	r24, Y+2	; 0x02
    2234:	9b 81       	ldd	r25, Y+3	; 0x03
    2236:	fc 01       	movw	r30, r24
    2238:	e2 0f       	add	r30, r18
    223a:	f3 1f       	adc	r31, r19
    223c:	10 82       	st	Z, r1
}
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	1f 91       	pop	r17
    224a:	0f 91       	pop	r16
    224c:	08 95       	ret

0000224e <__udivmodsi4>:
    224e:	a1 e2       	ldi	r26, 0x21	; 33
    2250:	1a 2e       	mov	r1, r26
    2252:	aa 1b       	sub	r26, r26
    2254:	bb 1b       	sub	r27, r27
    2256:	fd 01       	movw	r30, r26
    2258:	0d c0       	rjmp	.+26     	; 0x2274 <__udivmodsi4_ep>

0000225a <__udivmodsi4_loop>:
    225a:	aa 1f       	adc	r26, r26
    225c:	bb 1f       	adc	r27, r27
    225e:	ee 1f       	adc	r30, r30
    2260:	ff 1f       	adc	r31, r31
    2262:	a2 17       	cp	r26, r18
    2264:	b3 07       	cpc	r27, r19
    2266:	e4 07       	cpc	r30, r20
    2268:	f5 07       	cpc	r31, r21
    226a:	20 f0       	brcs	.+8      	; 0x2274 <__udivmodsi4_ep>
    226c:	a2 1b       	sub	r26, r18
    226e:	b3 0b       	sbc	r27, r19
    2270:	e4 0b       	sbc	r30, r20
    2272:	f5 0b       	sbc	r31, r21

00002274 <__udivmodsi4_ep>:
    2274:	66 1f       	adc	r22, r22
    2276:	77 1f       	adc	r23, r23
    2278:	88 1f       	adc	r24, r24
    227a:	99 1f       	adc	r25, r25
    227c:	1a 94       	dec	r1
    227e:	69 f7       	brne	.-38     	; 0x225a <__udivmodsi4_loop>
    2280:	60 95       	com	r22
    2282:	70 95       	com	r23
    2284:	80 95       	com	r24
    2286:	90 95       	com	r25
    2288:	9b 01       	movw	r18, r22
    228a:	ac 01       	movw	r20, r24
    228c:	bd 01       	movw	r22, r26
    228e:	cf 01       	movw	r24, r30
    2290:	08 95       	ret

00002292 <__prologue_saves__>:
    2292:	2f 92       	push	r2
    2294:	3f 92       	push	r3
    2296:	4f 92       	push	r4
    2298:	5f 92       	push	r5
    229a:	6f 92       	push	r6
    229c:	7f 92       	push	r7
    229e:	8f 92       	push	r8
    22a0:	9f 92       	push	r9
    22a2:	af 92       	push	r10
    22a4:	bf 92       	push	r11
    22a6:	cf 92       	push	r12
    22a8:	df 92       	push	r13
    22aa:	ef 92       	push	r14
    22ac:	ff 92       	push	r15
    22ae:	0f 93       	push	r16
    22b0:	1f 93       	push	r17
    22b2:	cf 93       	push	r28
    22b4:	df 93       	push	r29
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
    22ba:	ca 1b       	sub	r28, r26
    22bc:	db 0b       	sbc	r29, r27
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	09 94       	ijmp

000022ca <__epilogue_restores__>:
    22ca:	2a 88       	ldd	r2, Y+18	; 0x12
    22cc:	39 88       	ldd	r3, Y+17	; 0x11
    22ce:	48 88       	ldd	r4, Y+16	; 0x10
    22d0:	5f 84       	ldd	r5, Y+15	; 0x0f
    22d2:	6e 84       	ldd	r6, Y+14	; 0x0e
    22d4:	7d 84       	ldd	r7, Y+13	; 0x0d
    22d6:	8c 84       	ldd	r8, Y+12	; 0x0c
    22d8:	9b 84       	ldd	r9, Y+11	; 0x0b
    22da:	aa 84       	ldd	r10, Y+10	; 0x0a
    22dc:	b9 84       	ldd	r11, Y+9	; 0x09
    22de:	c8 84       	ldd	r12, Y+8	; 0x08
    22e0:	df 80       	ldd	r13, Y+7	; 0x07
    22e2:	ee 80       	ldd	r14, Y+6	; 0x06
    22e4:	fd 80       	ldd	r15, Y+5	; 0x05
    22e6:	0c 81       	ldd	r16, Y+4	; 0x04
    22e8:	1b 81       	ldd	r17, Y+3	; 0x03
    22ea:	aa 81       	ldd	r26, Y+2	; 0x02
    22ec:	b9 81       	ldd	r27, Y+1	; 0x01
    22ee:	ce 0f       	add	r28, r30
    22f0:	d1 1d       	adc	r29, r1
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	de bf       	out	0x3e, r29	; 62
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	cd bf       	out	0x3d, r28	; 61
    22fc:	ed 01       	movw	r28, r26
    22fe:	08 95       	ret

00002300 <_exit>:
    2300:	f8 94       	cli

00002302 <__stop_program>:
    2302:	ff cf       	rjmp	.-2      	; 0x2302 <__stop_program>
